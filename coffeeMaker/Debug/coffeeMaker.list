
coffeeMaker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aa0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08007c30  08007c30  00017c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008008  08008008  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008010  08008010  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008010  08008010  00018010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008014  08008014  00018014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000730  20000070  08008088  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  08008088  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fcf9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035dd  00000000  00000000  0003fd99  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e70  00000000  00000000  00043378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cc8  00000000  00000000  000451e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b6a8  00000000  00000000  00046eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000166de  00000000  00000000  00072558  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001101b3  00000000  00000000  00088c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00198de9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000892c  00000000  00000000  00198e64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c18 	.word	0x08007c18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007c18 	.word	0x08007c18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d66:	2003      	movs	r0, #3
 8000d68:	f001 fa4f 	bl	800220a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f006 f9dd 	bl	800712c <HAL_InitTick>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d002      	beq.n	8000d7e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	e001      	b.n	8000d82 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d7e:	f005 ff4d 	bl	8006c1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d82:	79fb      	ldrb	r3, [r7, #7]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_IncTick+0x1c>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_IncTick+0x20>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a03      	ldr	r2, [pc, #12]	; (8000da8 <HAL_IncTick+0x1c>)
 8000d9c:	6013      	str	r3, [r2, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	200000c0 	.word	0x200000c0
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	200000c0 	.word	0x200000c0

08000dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff ffee 	bl	8000db0 <HAL_GetTick>
 8000dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d004      	beq.n	8000dec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_Delay+0x40>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	4413      	add	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dec:	bf00      	nop
 8000dee:	f7ff ffdf 	bl	8000db0 <HAL_GetTick>
 8000df2:	4602      	mov	r2, r0
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d8f7      	bhi.n	8000dee <HAL_Delay+0x26>
  {
  }
}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000004 	.word	0x20000004

08000e0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	431a      	orrs	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	609a      	str	r2, [r3, #8]
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	431a      	orrs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e74:	b490      	push	{r4, r7}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	3360      	adds	r3, #96	; 0x60
 8000e86:	461a      	mov	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000e90:	6822      	ldr	r2, [r4, #0]
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <LL_ADC_SetOffset+0x40>)
 8000e94:	4013      	ands	r3, r2
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ea6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc90      	pop	{r4, r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	03fff000 	.word	0x03fff000

08000eb8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000eb8:	b490      	push	{r4, r7}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3360      	adds	r3, #96	; 0x60
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ed0:	6823      	ldr	r3, [r4, #0]
 8000ed2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc90      	pop	{r4, r7}
 8000ede:	4770      	bx	lr

08000ee0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ee0:	b490      	push	{r4, r7}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3360      	adds	r3, #96	; 0x60
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc90      	pop	{r4, r7}
 8000f0e:	4770      	bx	lr

08000f10 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f36:	b490      	push	{r4, r7}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	3330      	adds	r3, #48	; 0x30
 8000f46:	461a      	mov	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	4413      	add	r3, r2
 8000f54:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000f56:	6822      	ldr	r2, [r4, #0]
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	f003 031f 	and.w	r3, r3, #31
 8000f5e:	211f      	movs	r1, #31
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	401a      	ands	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	0e9b      	lsrs	r3, r3, #26
 8000f6c:	f003 011f 	and.w	r1, r3, #31
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	f003 031f 	and.w	r3, r3, #31
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc90      	pop	{r4, r7}
 8000f86:	4770      	bx	lr

08000f88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f88:	b490      	push	{r4, r7}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3314      	adds	r3, #20
 8000f98:	461a      	mov	r2, r3
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	0e5b      	lsrs	r3, r3, #25
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	4413      	add	r3, r2
 8000fa6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000fa8:	6822      	ldr	r2, [r4, #0]
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	0d1b      	lsrs	r3, r3, #20
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	2107      	movs	r1, #7
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	401a      	ands	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	0d1b      	lsrs	r3, r3, #20
 8000fc0:	f003 031f 	and.w	r3, r3, #31
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc90      	pop	{r4, r7}
 8000fd6:	4770      	bx	lr

08000fd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0318 	and.w	r3, r3, #24
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ffc:	40d9      	lsrs	r1, r3
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	400b      	ands	r3, r1
 8001002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001006:	431a      	orrs	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	0007ffff 	.word	0x0007ffff

08001020 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 031f 	and.w	r3, r3, #31
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	6093      	str	r3, [r2, #8]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800108c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001090:	d101      	bne.n	8001096 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010e0:	d101      	bne.n	80010e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001104:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001108:	f043 0201 	orr.w	r2, r3, #1
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b01      	cmp	r3, #1
 800112e:	d101      	bne.n	8001134 <LL_ADC_IsEnabled+0x18>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <LL_ADC_IsEnabled+0x1a>
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001152:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001156:	f043 0204 	orr.w	r2, r3, #4
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	2b04      	cmp	r3, #4
 800117c:	d101      	bne.n	8001182 <LL_ADC_REG_IsConversionOngoing+0x18>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d101      	bne.n	80011a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e134      	b.n	800143c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d109      	bne.n	80011f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f005 fd3f 	bl	8006c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff3f 	bl	800107c <LL_ADC_IsDeepPowerDownEnabled>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d004      	beq.n	800120e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff25 	bl	8001058 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff5a 	bl	80010cc <LL_ADC_IsInternalRegulatorEnabled>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d113      	bne.n	8001246 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff3e 	bl	80010a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001228:	4b86      	ldr	r3, [pc, #536]	; (8001444 <HAL_ADC_Init+0x28c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	099b      	lsrs	r3, r3, #6
 800122e:	4a86      	ldr	r2, [pc, #536]	; (8001448 <HAL_ADC_Init+0x290>)
 8001230:	fba2 2303 	umull	r2, r3, r2, r3
 8001234:	099b      	lsrs	r3, r3, #6
 8001236:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001238:	e002      	b.n	8001240 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	3b01      	subs	r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f9      	bne.n	800123a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff3e 	bl	80010cc <LL_ADC_IsInternalRegulatorEnabled>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10d      	bne.n	8001272 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125a:	f043 0210 	orr.w	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001266:	f043 0201 	orr.w	r2, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff77 	bl	800116a <LL_ADC_REG_IsConversionOngoing>
 800127c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b00      	cmp	r3, #0
 8001288:	f040 80cf 	bne.w	800142a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f040 80cb 	bne.w	800142a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001298:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800129c:	f043 0202 	orr.w	r2, r3, #2
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff37 	bl	800111c <LL_ADC_IsEnabled>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d115      	bne.n	80012e0 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012b4:	4865      	ldr	r0, [pc, #404]	; (800144c <HAL_ADC_Init+0x294>)
 80012b6:	f7ff ff31 	bl	800111c <LL_ADC_IsEnabled>
 80012ba:	4604      	mov	r4, r0
 80012bc:	4864      	ldr	r0, [pc, #400]	; (8001450 <HAL_ADC_Init+0x298>)
 80012be:	f7ff ff2d 	bl	800111c <LL_ADC_IsEnabled>
 80012c2:	4603      	mov	r3, r0
 80012c4:	431c      	orrs	r4, r3
 80012c6:	4863      	ldr	r0, [pc, #396]	; (8001454 <HAL_ADC_Init+0x29c>)
 80012c8:	f7ff ff28 	bl	800111c <LL_ADC_IsEnabled>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4323      	orrs	r3, r4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d105      	bne.n	80012e0 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	4619      	mov	r1, r3
 80012da:	485f      	ldr	r0, [pc, #380]	; (8001458 <HAL_ADC_Init+0x2a0>)
 80012dc:	f7ff fd96 	bl	8000e0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7e5b      	ldrb	r3, [r3, #25]
 80012e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012ea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80012f0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80012f6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012fe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d106      	bne.n	800131c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	3b01      	subs	r3, #1
 8001314:	045b      	lsls	r3, r3, #17
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	2b00      	cmp	r3, #0
 8001322:	d009      	beq.n	8001338 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	4b47      	ldr	r3, [pc, #284]	; (800145c <HAL_ADC_Init+0x2a4>)
 8001340:	4013      	ands	r3, r2
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	430b      	orrs	r3, r1
 800134a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff0a 	bl	800116a <LL_ADC_REG_IsConversionOngoing>
 8001356:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff17 	bl	8001190 <LL_ADC_INJ_IsConversionOngoing>
 8001362:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d13d      	bne.n	80013e6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d13a      	bne.n	80013e6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001374:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800137c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800138c:	f023 0302 	bic.w	r3, r3, #2
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	69b9      	ldr	r1, [r7, #24]
 8001396:	430b      	orrs	r3, r1
 8001398:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d118      	bne.n	80013d6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013ae:	f023 0304 	bic.w	r3, r3, #4
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013ba:	4311      	orrs	r1, r2
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013c0:	4311      	orrs	r1, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80013c6:	430a      	orrs	r2, r1
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0201 	orr.w	r2, r2, #1
 80013d2:	611a      	str	r2, [r3, #16]
 80013d4:	e007      	b.n	80013e6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0201 	bic.w	r2, r2, #1
 80013e4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d10c      	bne.n	8001408 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	f023 010f 	bic.w	r1, r3, #15
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	1e5a      	subs	r2, r3, #1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
 8001406:	e007      	b.n	8001418 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 020f 	bic.w	r2, r2, #15
 8001416:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141c:	f023 0303 	bic.w	r3, r3, #3
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	655a      	str	r2, [r3, #84]	; 0x54
 8001428:	e007      	b.n	800143a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142e:	f043 0210 	orr.w	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800143a:	7ffb      	ldrb	r3, [r7, #31]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3724      	adds	r7, #36	; 0x24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}
 8001444:	20000008 	.word	0x20000008
 8001448:	053e2d63 	.word	0x053e2d63
 800144c:	50040000 	.word	0x50040000
 8001450:	50040100 	.word	0x50040100
 8001454:	50040200 	.word	0x50040200
 8001458:	50040300 	.word	0x50040300
 800145c:	fff0c007 	.word	0xfff0c007

08001460 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001468:	4857      	ldr	r0, [pc, #348]	; (80015c8 <HAL_ADC_Start+0x168>)
 800146a:	f7ff fdd9 	bl	8001020 <LL_ADC_GetMultimode>
 800146e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fe78 	bl	800116a <LL_ADC_REG_IsConversionOngoing>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	f040 809c 	bne.w	80015ba <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_ADC_Start+0x30>
 800148c:	2302      	movs	r3, #2
 800148e:	e097      	b.n	80015c0 <HAL_ADC_Start+0x160>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 fcdd 	bl	8001e58 <ADC_Enable>
 800149e:	4603      	mov	r3, r0
 80014a0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f040 8083 	bne.w	80015b0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a42      	ldr	r2, [pc, #264]	; (80015cc <HAL_ADC_Start+0x16c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d002      	beq.n	80014ce <HAL_ADC_Start+0x6e>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	e000      	b.n	80014d0 <HAL_ADC_Start+0x70>
 80014ce:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <HAL_ADC_Start+0x170>)
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d002      	beq.n	80014de <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d105      	bne.n	80014ea <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014f6:	d106      	bne.n	8001506 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fc:	f023 0206 	bic.w	r2, r3, #6
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	659a      	str	r2, [r3, #88]	; 0x58
 8001504:	e002      	b.n	800150c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	221c      	movs	r2, #28
 8001512:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a2a      	ldr	r2, [pc, #168]	; (80015cc <HAL_ADC_Start+0x16c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d002      	beq.n	800152c <HAL_ADC_Start+0xcc>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	e000      	b.n	800152e <HAL_ADC_Start+0xce>
 800152c:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <HAL_ADC_Start+0x170>)
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	4293      	cmp	r3, r2
 8001534:	d008      	beq.n	8001548 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	2b05      	cmp	r3, #5
 8001540:	d002      	beq.n	8001548 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	2b09      	cmp	r3, #9
 8001546:	d114      	bne.n	8001572 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800155e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fde9 	bl	8001142 <LL_ADC_REG_StartConversion>
 8001570:	e025      	b.n	80015be <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <HAL_ADC_Start+0x16c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d002      	beq.n	800158e <HAL_ADC_Start+0x12e>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	e000      	b.n	8001590 <HAL_ADC_Start+0x130>
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_ADC_Start+0x170>)
 8001590:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00f      	beq.n	80015be <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54
 80015ae:	e006      	b.n	80015be <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80015b8:	e001      	b.n	80015be <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015ba:	2302      	movs	r3, #2
 80015bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80015be:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	50040300 	.word	0x50040300
 80015cc:	50040100 	.word	0x50040100
 80015d0:	50040000 	.word	0x50040000

080015d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015de:	4862      	ldr	r0, [pc, #392]	; (8001768 <HAL_ADC_PollForConversion+0x194>)
 80015e0:	f7ff fd1e 	bl	8001020 <LL_ADC_GetMultimode>
 80015e4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d102      	bne.n	80015f4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80015ee:	2308      	movs	r3, #8
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	e02a      	b.n	800164a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d002      	beq.n	8001606 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b09      	cmp	r3, #9
 8001604:	d111      	bne.n	800162a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001618:	f043 0220 	orr.w	r2, r3, #32
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e09d      	b.n	8001760 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001624:	2304      	movs	r3, #4
 8001626:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001628:	e00f      	b.n	800164a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800162a:	484f      	ldr	r0, [pc, #316]	; (8001768 <HAL_ADC_PollForConversion+0x194>)
 800162c:	f7ff fd06 	bl	800103c <LL_ADC_GetMultiDMATransfer>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d007      	beq.n	8001646 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163a:	f043 0220 	orr.w	r2, r3, #32
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e08c      	b.n	8001760 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001646:	2304      	movs	r3, #4
 8001648:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800164a:	f7ff fbb1 	bl	8000db0 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001650:	e01a      	b.n	8001688 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d016      	beq.n	8001688 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800165a:	f7ff fba9 	bl	8000db0 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d302      	bcc.n	8001670 <HAL_ADC_PollForConversion+0x9c>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10b      	bne.n	8001688 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001674:	f043 0204 	orr.w	r2, r3, #4
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e06b      	b.n	8001760 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4013      	ands	r3, r2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0dd      	beq.n	8001652 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fc32 	bl	8000f10 <LL_ADC_REG_IsTriggerSourceSWStart>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d01c      	beq.n	80016ec <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7e5b      	ldrb	r3, [r3, #25]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d118      	bne.n	80016ec <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d111      	bne.n	80016ec <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e4:	f043 0201 	orr.w	r2, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1e      	ldr	r2, [pc, #120]	; (800176c <HAL_ADC_PollForConversion+0x198>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d002      	beq.n	80016fc <HAL_ADC_PollForConversion+0x128>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	e000      	b.n	80016fe <HAL_ADC_PollForConversion+0x12a>
 80016fc:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <HAL_ADC_PollForConversion+0x19c>)
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	4293      	cmp	r3, r2
 8001704:	d008      	beq.n	8001718 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b05      	cmp	r3, #5
 8001710:	d002      	beq.n	8001718 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b09      	cmp	r3, #9
 8001716:	d104      	bne.n	8001722 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	e00c      	b.n	800173c <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a11      	ldr	r2, [pc, #68]	; (800176c <HAL_ADC_PollForConversion+0x198>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d002      	beq.n	8001732 <HAL_ADC_PollForConversion+0x15e>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	e000      	b.n	8001734 <HAL_ADC_PollForConversion+0x160>
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_ADC_PollForConversion+0x19c>)
 8001734:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2b08      	cmp	r3, #8
 8001740:	d104      	bne.n	800174c <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2208      	movs	r2, #8
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e008      	b.n	800175e <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d103      	bne.n	800175e <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3720      	adds	r7, #32
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	50040300 	.word	0x50040300
 800176c:	50040100 	.word	0x50040100
 8001770:	50040000 	.word	0x50040000

08001774 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b0a6      	sub	sp, #152	; 0x98
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x22>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e348      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x6b4>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fcd3 	bl	800116a <LL_ADC_REG_IsConversionOngoing>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f040 8329 	bne.w	8001e1e <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	d824      	bhi.n	800181e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	3b02      	subs	r3, #2
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d81b      	bhi.n	8001816 <HAL_ADC_ConfigChannel+0x86>
 80017de:	a201      	add	r2, pc, #4	; (adr r2, 80017e4 <HAL_ADC_ConfigChannel+0x54>)
 80017e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e4:	080017f5 	.word	0x080017f5
 80017e8:	080017fd 	.word	0x080017fd
 80017ec:	08001805 	.word	0x08001805
 80017f0:	0800180d 	.word	0x0800180d
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	220c      	movs	r2, #12
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	e011      	b.n	8001820 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	2212      	movs	r2, #18
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	e00d      	b.n	8001820 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2218      	movs	r2, #24
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	e009      	b.n	8001820 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	e004      	b.n	8001820 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2206      	movs	r2, #6
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	e000      	b.n	8001820 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800181e:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	f7ff fb82 	bl	8000f36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fc97 	bl	800116a <LL_ADC_REG_IsConversionOngoing>
 800183c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fca3 	bl	8001190 <LL_ADC_INJ_IsConversionOngoing>
 800184a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800184e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 8148 	bne.w	8001ae8 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800185c:	2b00      	cmp	r3, #0
 800185e:	f040 8143 	bne.w	8001ae8 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6819      	ldr	r1, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	461a      	mov	r2, r3
 8001870:	f7ff fb8a 	bl	8000f88 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	08db      	lsrs	r3, r3, #3
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b04      	cmp	r3, #4
 8001894:	d00a      	beq.n	80018ac <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	6919      	ldr	r1, [r3, #16]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018a6:	f7ff fae5 	bl	8000e74 <LL_ADC_SetOffset>
 80018aa:	e11d      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fb00 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10a      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x148>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff faf5 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	0e9b      	lsrs	r3, r3, #26
 80018d2:	f003 021f 	and.w	r2, r3, #31
 80018d6:	e012      	b.n	80018fe <HAL_ADC_ConfigChannel+0x16e>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff faea 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001906:	2b00      	cmp	r3, #0
 8001908:	d105      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x186>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	0e9b      	lsrs	r3, r3, #26
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	e00a      	b.n	800192c <HAL_ADC_ConfigChannel+0x19c>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001926:	fab3 f383 	clz	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	429a      	cmp	r2, r3
 800192e:	d106      	bne.n	800193e <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fad1 	bl	8000ee0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2101      	movs	r1, #1
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fab7 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10a      	bne.n	800196a <HAL_ADC_ConfigChannel+0x1da>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff faac 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	0e9b      	lsrs	r3, r3, #26
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	e010      	b.n	800198c <HAL_ADC_ConfigChannel+0x1fc>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2101      	movs	r1, #1
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff faa1 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800197c:	fa93 f3a3 	rbit	r3, r3
 8001980:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001994:	2b00      	cmp	r3, #0
 8001996:	d105      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x214>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0e9b      	lsrs	r3, r3, #26
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	e00a      	b.n	80019ba <HAL_ADC_ConfigChannel+0x22a>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019ac:	fa93 f3a3 	rbit	r3, r3
 80019b0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80019b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d106      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	2101      	movs	r1, #1
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fa8a 	bl	8000ee0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2102      	movs	r1, #2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fa70 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10a      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x268>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2102      	movs	r1, #2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fa65 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	0e9b      	lsrs	r3, r3, #26
 80019f2:	f003 021f 	and.w	r2, r3, #31
 80019f6:	e010      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x28a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2102      	movs	r1, #2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fa5a 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	461a      	mov	r2, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d105      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x2a2>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0e9b      	lsrs	r3, r3, #26
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	e00a      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x2b8>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a3a:	fa93 f3a3 	rbit	r3, r3
 8001a3e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a42:	fab3 f383 	clz	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d106      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2200      	movs	r2, #0
 8001a52:	2102      	movs	r1, #2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fa43 	bl	8000ee0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2103      	movs	r1, #3
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fa29 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10a      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x2f6>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2103      	movs	r1, #3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fa1e 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	0e9b      	lsrs	r3, r3, #26
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	e010      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x318>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2103      	movs	r1, #3
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fa13 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aa0:	fab3 f383 	clz	r3, r3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x330>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0e9b      	lsrs	r3, r3, #26
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	e00a      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x346>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d106      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2103      	movs	r1, #3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f9fc 	bl	8000ee0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fb15 	bl	800111c <LL_ADC_IsEnabled>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f040 810c 	bne.w	8001d12 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6819      	ldr	r1, [r3, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	461a      	mov	r2, r3
 8001b08:	f7ff fa66 	bl	8000fd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4aad      	ldr	r2, [pc, #692]	; (8001dc8 <HAL_ADC_ConfigChannel+0x638>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	f040 80fd 	bne.w	8001d12 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10b      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x3b0>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0e9b      	lsrs	r3, r3, #26
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	2b09      	cmp	r3, #9
 8001b36:	bf94      	ite	ls
 8001b38:	2301      	movls	r3, #1
 8001b3a:	2300      	movhi	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	e012      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x3d6>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	2b09      	cmp	r3, #9
 8001b5e:	bf94      	ite	ls
 8001b60:	2301      	movls	r3, #1
 8001b62:	2300      	movhi	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d064      	beq.n	8001c34 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d107      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x3f6>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	0e9b      	lsrs	r3, r3, #26
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	069b      	lsls	r3, r3, #26
 8001b80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b84:	e00e      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x414>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b8e:	fa93 f3a3 	rbit	r3, r3
 8001b92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	069b      	lsls	r3, r3, #26
 8001ba0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d109      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x434>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0e9b      	lsrs	r3, r3, #26
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	e010      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x456>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	2101      	movs	r1, #1
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	ea42 0103 	orr.w	r1, r2, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10a      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x47c>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	0e9b      	lsrs	r3, r3, #26
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f003 021f 	and.w	r2, r3, #31
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	051b      	lsls	r3, r3, #20
 8001c0a:	e011      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x4a0>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c30:	430b      	orrs	r3, r1
 8001c32:	e069      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d107      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x4c0>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0e9b      	lsrs	r3, r3, #26
 8001c46:	3301      	adds	r3, #1
 8001c48:	069b      	lsls	r3, r3, #26
 8001c4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c4e:	e00e      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x4de>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	61fb      	str	r3, [r7, #28]
  return result;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	3301      	adds	r3, #1
 8001c68:	069b      	lsls	r3, r3, #26
 8001c6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x4fe>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	0e9b      	lsrs	r3, r3, #26
 8001c80:	3301      	adds	r3, #1
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	2101      	movs	r1, #1
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	e010      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x520>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	617b      	str	r3, [r7, #20]
  return result;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	2101      	movs	r1, #1
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	ea42 0103 	orr.w	r1, r2, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10d      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x54c>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0e9b      	lsrs	r3, r3, #26
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3b1e      	subs	r3, #30
 8001cd4:	051b      	lsls	r3, r3, #20
 8001cd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cda:	e014      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x576>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	60fb      	str	r3, [r7, #12]
  return result;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3b1e      	subs	r3, #30
 8001d00:	051b      	lsls	r3, r3, #20
 8001d02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d06:	430b      	orrs	r3, r1
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	6892      	ldr	r2, [r2, #8]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f7ff f93b 	bl	8000f88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <HAL_ADC_ConfigChannel+0x63c>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 808c 	beq.w	8001e38 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d20:	482b      	ldr	r0, [pc, #172]	; (8001dd0 <HAL_ADC_ConfigChannel+0x640>)
 8001d22:	f7ff f899 	bl	8000e58 <LL_ADC_GetCommonPathInternalCh>
 8001d26:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a29      	ldr	r2, [pc, #164]	; (8001dd4 <HAL_ADC_ConfigChannel+0x644>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d12b      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x5fc>
 8001d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d125      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a24      	ldr	r2, [pc, #144]	; (8001dd8 <HAL_ADC_ConfigChannel+0x648>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_ADC_ConfigChannel+0x5c4>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <HAL_ADC_ConfigChannel+0x64c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d16e      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	481c      	ldr	r0, [pc, #112]	; (8001dd0 <HAL_ADC_ConfigChannel+0x640>)
 8001d60:	f7ff f867 	bl	8000e32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d64:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <HAL_ADC_ConfigChannel+0x650>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	099b      	lsrs	r3, r3, #6
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <HAL_ADC_ConfigChannel+0x654>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	099a      	lsrs	r2, r3, #6
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d7c:	e002      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f9      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d8a:	e052      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a15      	ldr	r2, [pc, #84]	; (8001de8 <HAL_ADC_ConfigChannel+0x658>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d12a      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x65c>
 8001d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d124      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_ADC_ConfigChannel+0x648>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d004      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x626>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_ADC_ConfigChannel+0x64c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d13f      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001db6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <HAL_ADC_ConfigChannel+0x640>)
 8001dc2:	f7ff f836 	bl	8000e32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dc6:	e036      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x6a6>
 8001dc8:	407f0000 	.word	0x407f0000
 8001dcc:	80080000 	.word	0x80080000
 8001dd0:	50040300 	.word	0x50040300
 8001dd4:	c7520000 	.word	0xc7520000
 8001dd8:	50040000 	.word	0x50040000
 8001ddc:	50040200 	.word	0x50040200
 8001de0:	20000008 	.word	0x20000008
 8001de4:	053e2d63 	.word	0x053e2d63
 8001de8:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a16      	ldr	r2, [pc, #88]	; (8001e4c <HAL_ADC_ConfigChannel+0x6bc>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d120      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d11a      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <HAL_ADC_ConfigChannel+0x6c0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d115      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e14:	4619      	mov	r1, r3
 8001e16:	480f      	ldr	r0, [pc, #60]	; (8001e54 <HAL_ADC_ConfigChannel+0x6c4>)
 8001e18:	f7ff f80b 	bl	8000e32 <LL_ADC_SetCommonPathInternalCh>
 8001e1c:	e00c      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f043 0220 	orr.w	r2, r3, #32
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001e30:	e002      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e32:	bf00      	nop
 8001e34:	e000      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e36:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e40:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3798      	adds	r7, #152	; 0x98
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	80000001 	.word	0x80000001
 8001e50:	50040000 	.word	0x50040000
 8001e54:	50040300 	.word	0x50040300

08001e58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff f959 	bl	800111c <LL_ADC_IsEnabled>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d146      	bne.n	8001efe <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <ADC_Enable+0xb0>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00d      	beq.n	8001e9a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e82:	f043 0210 	orr.w	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	f043 0201 	orr.w	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e032      	b.n	8001f00 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f928 	bl	80010f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001ea4:	f7fe ff84 	bl	8000db0 <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001eaa:	e021      	b.n	8001ef0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff f933 	bl	800111c <LL_ADC_IsEnabled>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d104      	bne.n	8001ec6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f917 	bl	80010f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ec6:	f7fe ff73 	bl	8000db0 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d90d      	bls.n	8001ef0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	f043 0210 	orr.w	r2, r3, #16
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	f043 0201 	orr.w	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e007      	b.n	8001f00 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d1d6      	bne.n	8001eac <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	8000003f 	.word	0x8000003f

08001f0c <LL_ADC_IsEnabled>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <LL_ADC_IsEnabled+0x18>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <LL_ADC_IsEnabled+0x1a>
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_ADC_REG_IsConversionOngoing>:
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d101      	bne.n	8001f4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b09f      	sub	sp, #124	; 0x7c
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e08f      	b.n	8002096 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a47      	ldr	r2, [pc, #284]	; (80020a0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d102      	bne.n	8001f8e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001f88:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	e001      	b.n	8001f92 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10b      	bne.n	8001fb0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9c:	f043 0220 	orr.w	r2, r3, #32
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e072      	b.n	8002096 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ffbd 	bl	8001f32 <LL_ADC_REG_IsConversionOngoing>
 8001fb8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ffb7 	bl	8001f32 <LL_ADC_REG_IsConversionOngoing>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d154      	bne.n	8002074 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d151      	bne.n	8002074 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001fd0:	4b35      	ldr	r3, [pc, #212]	; (80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001fd2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d02c      	beq.n	8002036 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fee:	035b      	lsls	r3, r3, #13
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ff8:	4829      	ldr	r0, [pc, #164]	; (80020a0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001ffa:	f7ff ff87 	bl	8001f0c <LL_ADC_IsEnabled>
 8001ffe:	4604      	mov	r4, r0
 8002000:	4828      	ldr	r0, [pc, #160]	; (80020a4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002002:	f7ff ff83 	bl	8001f0c <LL_ADC_IsEnabled>
 8002006:	4603      	mov	r3, r0
 8002008:	431c      	orrs	r4, r3
 800200a:	4828      	ldr	r0, [pc, #160]	; (80020ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800200c:	f7ff ff7e 	bl	8001f0c <LL_ADC_IsEnabled>
 8002010:	4603      	mov	r3, r0
 8002012:	4323      	orrs	r3, r4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d137      	bne.n	8002088 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002020:	f023 030f 	bic.w	r3, r3, #15
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	6811      	ldr	r1, [r2, #0]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	6892      	ldr	r2, [r2, #8]
 800202c:	430a      	orrs	r2, r1
 800202e:	431a      	orrs	r2, r3
 8002030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002032:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002034:	e028      	b.n	8002088 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800203e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002040:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002042:	4817      	ldr	r0, [pc, #92]	; (80020a0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002044:	f7ff ff62 	bl	8001f0c <LL_ADC_IsEnabled>
 8002048:	4604      	mov	r4, r0
 800204a:	4816      	ldr	r0, [pc, #88]	; (80020a4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800204c:	f7ff ff5e 	bl	8001f0c <LL_ADC_IsEnabled>
 8002050:	4603      	mov	r3, r0
 8002052:	431c      	orrs	r4, r3
 8002054:	4815      	ldr	r0, [pc, #84]	; (80020ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002056:	f7ff ff59 	bl	8001f0c <LL_ADC_IsEnabled>
 800205a:	4603      	mov	r3, r0
 800205c:	4323      	orrs	r3, r4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d112      	bne.n	8002088 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800206a:	f023 030f 	bic.w	r3, r3, #15
 800206e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002070:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002072:	e009      	b.n	8002088 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002086:	e000      	b.n	800208a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002088:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002092:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002096:	4618      	mov	r0, r3
 8002098:	377c      	adds	r7, #124	; 0x7c
 800209a:	46bd      	mov	sp, r7
 800209c:	bd90      	pop	{r4, r7, pc}
 800209e:	bf00      	nop
 80020a0:	50040000 	.word	0x50040000
 80020a4:	50040100 	.word	0x50040100
 80020a8:	50040300 	.word	0x50040300
 80020ac:	50040200 	.word	0x50040200

080020b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020cc:	4013      	ands	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e2:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	60d3      	str	r3, [r2, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_GetPriorityGrouping+0x18>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 0307 	and.w	r3, r3, #7
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db0b      	blt.n	800213e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	4907      	ldr	r1, [pc, #28]	; (800214c <__NVIC_EnableIRQ+0x38>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2001      	movs	r0, #1
 8002136:	fa00 f202 	lsl.w	r2, r0, r2
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	; (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	; (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ff4c 	bl	80020b0 <__NVIC_SetPriorityGrouping>
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
 800222c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002232:	f7ff ff61 	bl	80020f8 <__NVIC_GetPriorityGrouping>
 8002236:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	6978      	ldr	r0, [r7, #20]
 800223e:	f7ff ffb1 	bl	80021a4 <NVIC_EncodePriority>
 8002242:	4602      	mov	r2, r0
 8002244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ff80 	bl	8002150 <__NVIC_SetPriority>
}
 8002250:	bf00      	nop
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff54 	bl	8002114 <__NVIC_EnableIRQ>
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0ac      	b.n	80023e0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f000 f8b2 	bl	80023f4 <DFSDM_GetChannelFromInstance>
 8002290:	4602      	mov	r2, r0
 8002292:	4b55      	ldr	r3, [pc, #340]	; (80023e8 <HAL_DFSDM_ChannelInit+0x174>)
 8002294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e09f      	b.n	80023e0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f004 fd51 	bl	8006d48 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80022a6:	4b51      	ldr	r3, [pc, #324]	; (80023ec <HAL_DFSDM_ChannelInit+0x178>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	3301      	adds	r3, #1
 80022ac:	4a4f      	ldr	r2, [pc, #316]	; (80023ec <HAL_DFSDM_ChannelInit+0x178>)
 80022ae:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80022b0:	4b4e      	ldr	r3, [pc, #312]	; (80023ec <HAL_DFSDM_ChannelInit+0x178>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d125      	bne.n	8002304 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80022b8:	4b4d      	ldr	r3, [pc, #308]	; (80023f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a4c      	ldr	r2, [pc, #304]	; (80023f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80022be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022c2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80022c4:	4b4a      	ldr	r3, [pc, #296]	; (80023f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4948      	ldr	r1, [pc, #288]	; (80023f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a46      	ldr	r2, [pc, #280]	; (80023f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80022d8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80022dc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	791b      	ldrb	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d108      	bne.n	80022f8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80022e6:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	041b      	lsls	r3, r3, #16
 80022f2:	493f      	ldr	r1, [pc, #252]	; (80023f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80022f8:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a3c      	ldr	r2, [pc, #240]	; (80023f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80022fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002302:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002312:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002322:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002328:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 020f 	bic.w	r2, r2, #15
 8002340:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6819      	ldr	r1, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002368:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6899      	ldr	r1, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	3b01      	subs	r3, #1
 800237a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f002 0207 	and.w	r2, r2, #7
 8002394:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023c0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 f810 	bl	80023f4 <DFSDM_GetChannelFromInstance>
 80023d4:	4601      	mov	r1, r0
 80023d6:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <HAL_DFSDM_ChannelInit+0x174>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000090 	.word	0x20000090
 80023ec:	2000008c 	.word	0x2000008c
 80023f0:	40016000 	.word	0x40016000

080023f4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <DFSDM_GetChannelFromInstance+0x7c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d102      	bne.n	800240a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	e02b      	b.n	8002462 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a19      	ldr	r2, [pc, #100]	; (8002474 <DFSDM_GetChannelFromInstance+0x80>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d102      	bne.n	8002418 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002412:	2301      	movs	r3, #1
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	e024      	b.n	8002462 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a17      	ldr	r2, [pc, #92]	; (8002478 <DFSDM_GetChannelFromInstance+0x84>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d102      	bne.n	8002426 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002420:	2302      	movs	r3, #2
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e01d      	b.n	8002462 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a14      	ldr	r2, [pc, #80]	; (800247c <DFSDM_GetChannelFromInstance+0x88>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d102      	bne.n	8002434 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800242e:	2304      	movs	r3, #4
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	e016      	b.n	8002462 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a12      	ldr	r2, [pc, #72]	; (8002480 <DFSDM_GetChannelFromInstance+0x8c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d102      	bne.n	8002442 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800243c:	2305      	movs	r3, #5
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e00f      	b.n	8002462 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <DFSDM_GetChannelFromInstance+0x90>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d102      	bne.n	8002450 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800244a:	2306      	movs	r3, #6
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	e008      	b.n	8002462 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <DFSDM_GetChannelFromInstance+0x94>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d102      	bne.n	800245e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002458:	2307      	movs	r3, #7
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	e001      	b.n	8002462 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800245e:	2303      	movs	r3, #3
 8002460:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002462:	68fb      	ldr	r3, [r7, #12]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	40016000 	.word	0x40016000
 8002474:	40016020 	.word	0x40016020
 8002478:	40016040 	.word	0x40016040
 800247c:	40016080 	.word	0x40016080
 8002480:	400160a0 	.word	0x400160a0
 8002484:	400160c0 	.word	0x400160c0
 8002488:	400160e0 	.word	0x400160e0

0800248c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249a:	e17f      	b.n	800279c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2101      	movs	r1, #1
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8171 	beq.w	8002796 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d00b      	beq.n	80024d4 <HAL_GPIO_Init+0x48>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d007      	beq.n	80024d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024c8:	2b11      	cmp	r3, #17
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b12      	cmp	r3, #18
 80024d2:	d130      	bne.n	8002536 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800250a:	2201      	movs	r2, #1
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	f003 0201 	and.w	r2, r3, #1
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b03      	cmp	r3, #3
 8002540:	d118      	bne.n	8002574 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002548:	2201      	movs	r2, #1
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	08db      	lsrs	r3, r3, #3
 800255e:	f003 0201 	and.w	r2, r3, #1
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x128>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b12      	cmp	r3, #18
 80025b2:	d123      	bne.n	80025fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	08da      	lsrs	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3208      	adds	r2, #8
 80025bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	08da      	lsrs	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3208      	adds	r2, #8
 80025f6:	6939      	ldr	r1, [r7, #16]
 80025f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80ac 	beq.w	8002796 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	4b5e      	ldr	r3, [pc, #376]	; (80027b8 <HAL_GPIO_Init+0x32c>)
 8002640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002642:	4a5d      	ldr	r2, [pc, #372]	; (80027b8 <HAL_GPIO_Init+0x32c>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6613      	str	r3, [r2, #96]	; 0x60
 800264a:	4b5b      	ldr	r3, [pc, #364]	; (80027b8 <HAL_GPIO_Init+0x32c>)
 800264c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002656:	4a59      	ldr	r2, [pc, #356]	; (80027bc <HAL_GPIO_Init+0x330>)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002662:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002680:	d025      	beq.n	80026ce <HAL_GPIO_Init+0x242>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4e      	ldr	r2, [pc, #312]	; (80027c0 <HAL_GPIO_Init+0x334>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01f      	beq.n	80026ca <HAL_GPIO_Init+0x23e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4d      	ldr	r2, [pc, #308]	; (80027c4 <HAL_GPIO_Init+0x338>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d019      	beq.n	80026c6 <HAL_GPIO_Init+0x23a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4c      	ldr	r2, [pc, #304]	; (80027c8 <HAL_GPIO_Init+0x33c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_GPIO_Init+0x236>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4b      	ldr	r2, [pc, #300]	; (80027cc <HAL_GPIO_Init+0x340>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00d      	beq.n	80026be <HAL_GPIO_Init+0x232>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4a      	ldr	r2, [pc, #296]	; (80027d0 <HAL_GPIO_Init+0x344>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d007      	beq.n	80026ba <HAL_GPIO_Init+0x22e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a49      	ldr	r2, [pc, #292]	; (80027d4 <HAL_GPIO_Init+0x348>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d101      	bne.n	80026b6 <HAL_GPIO_Init+0x22a>
 80026b2:	2306      	movs	r3, #6
 80026b4:	e00c      	b.n	80026d0 <HAL_GPIO_Init+0x244>
 80026b6:	2307      	movs	r3, #7
 80026b8:	e00a      	b.n	80026d0 <HAL_GPIO_Init+0x244>
 80026ba:	2305      	movs	r3, #5
 80026bc:	e008      	b.n	80026d0 <HAL_GPIO_Init+0x244>
 80026be:	2304      	movs	r3, #4
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x244>
 80026c2:	2303      	movs	r3, #3
 80026c4:	e004      	b.n	80026d0 <HAL_GPIO_Init+0x244>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_Init+0x244>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x244>
 80026ce:	2300      	movs	r3, #0
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	f002 0203 	and.w	r2, r2, #3
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	4093      	lsls	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026e0:	4936      	ldr	r1, [pc, #216]	; (80027bc <HAL_GPIO_Init+0x330>)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026ee:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_GPIO_Init+0x34c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002712:	4a31      	ldr	r2, [pc, #196]	; (80027d8 <HAL_GPIO_Init+0x34c>)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002718:	4b2f      	ldr	r3, [pc, #188]	; (80027d8 <HAL_GPIO_Init+0x34c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800273c:	4a26      	ldr	r2, [pc, #152]	; (80027d8 <HAL_GPIO_Init+0x34c>)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002742:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <HAL_GPIO_Init+0x34c>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	43db      	mvns	r3, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002766:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <HAL_GPIO_Init+0x34c>)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_GPIO_Init+0x34c>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	43db      	mvns	r3, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002790:	4a11      	ldr	r2, [pc, #68]	; (80027d8 <HAL_GPIO_Init+0x34c>)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3301      	adds	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa22 f303 	lsr.w	r3, r2, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f47f ae78 	bne.w	800249c <HAL_GPIO_Init+0x10>
  }
}
 80027ac:	bf00      	nop
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40010000 	.word	0x40010000
 80027c0:	48000400 	.word	0x48000400
 80027c4:	48000800 	.word	0x48000800
 80027c8:	48000c00 	.word	0x48000c00
 80027cc:	48001000 	.word	0x48001000
 80027d0:	48001400 	.word	0x48001400
 80027d4:	48001800 	.word	0x48001800
 80027d8:	40010400 	.word	0x40010400

080027dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	887b      	ldrh	r3, [r7, #2]
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	e001      	b.n	80027fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	807b      	strh	r3, [r7, #2]
 8002818:	4613      	mov	r3, r2
 800281a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800281c:	787b      	ldrb	r3, [r7, #1]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002828:	e002      	b.n	8002830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002852:	4a05      	ldr	r2, [pc, #20]	; (8002868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f806 	bl	800286c <HAL_GPIO_EXTI_Callback>
  }
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40010400 	.word	0x40010400

0800286c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e081      	b.n	8002998 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d106      	bne.n	80028ae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f004 fa91 	bl	8006dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2224      	movs	r2, #36	; 0x24
 80028b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d107      	bne.n	80028fc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	e006      	b.n	800290a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002908:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d104      	bne.n	800291c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800291a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800292a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800293e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	ea42 0103 	orr.w	r1, r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	021a      	lsls	r2, r3, #8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69d9      	ldr	r1, [r3, #28]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1a      	ldr	r2, [r3, #32]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0201 	orr.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d138      	bne.n	8002a28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e032      	b.n	8002a2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6819      	ldr	r1, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e000      	b.n	8002a2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d139      	bne.n	8002ac0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e033      	b.n	8002ac2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2224      	movs	r2, #36	; 0x24
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0201 	bic.w	r2, r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	e000      	b.n	8002ac2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ac0:	2302      	movs	r3, #2
  }
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ace:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ad0:	b08f      	sub	sp, #60	; 0x3c
 8002ad2:	af0a      	add	r7, sp, #40	; 0x28
 8002ad4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e116      	b.n	8002d0e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f004 faaa 	bl	8007054 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2203      	movs	r2, #3
 8002b04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f002 fe38 	bl	8005794 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	687e      	ldr	r6, [r7, #4]
 8002b2c:	466d      	mov	r5, sp
 8002b2e:	f106 0410 	add.w	r4, r6, #16
 8002b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b42:	1d33      	adds	r3, r6, #4
 8002b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b46:	6838      	ldr	r0, [r7, #0]
 8002b48:	f002 fdd2 	bl	80056f0 <USB_CoreInit>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0d7      	b.n	8002d0e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f002 fe26 	bl	80057b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	e04a      	b.n	8002c06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	333d      	adds	r3, #61	; 0x3d
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	333c      	adds	r3, #60	; 0x3c
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	b298      	uxth	r0, r3
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	3342      	adds	r3, #66	; 0x42
 8002bac:	4602      	mov	r2, r0
 8002bae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	333f      	adds	r3, #63	; 0x3f
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3344      	adds	r3, #68	; 0x44
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	3348      	adds	r3, #72	; 0x48
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3350      	adds	r3, #80	; 0x50
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	3301      	adds	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
 8002c06:	7bfa      	ldrb	r2, [r7, #15]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d3af      	bcc.n	8002b70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]
 8002c14:	e044      	b.n	8002ca0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d3b5      	bcc.n	8002c16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	687e      	ldr	r6, [r7, #4]
 8002cb2:	466d      	mov	r5, sp
 8002cb4:	f106 0410 	add.w	r4, r6, #16
 8002cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cc8:	1d33      	adds	r3, r6, #4
 8002cca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ccc:	6838      	ldr	r0, [r7, #0]
 8002cce:	f002 fd9d 	bl	800580c <USB_DevInit>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e014      	b.n	8002d0e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d102      	bne.n	8002d02 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f80a 	bl	8002d16 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f002 ff2d 	bl	8005b66 <USB_DevDisconnect>

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d16 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d48:	f043 0303 	orr.w	r3, r3, #3
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40007000 	.word	0x40007000

08002d80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40007000 	.word	0x40007000

08002d9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002daa:	d130      	bne.n	8002e0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dac:	4b23      	ldr	r3, [pc, #140]	; (8002e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db8:	d038      	beq.n	8002e2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dba:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dc2:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2232      	movs	r2, #50	; 0x32
 8002dd0:	fb02 f303 	mul.w	r3, r2, r3
 8002dd4:	4a1b      	ldr	r2, [pc, #108]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	0c9b      	lsrs	r3, r3, #18
 8002ddc:	3301      	adds	r3, #1
 8002dde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002de0:	e002      	b.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df4:	d102      	bne.n	8002dfc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f2      	bne.n	8002de2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e08:	d110      	bne.n	8002e2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e00f      	b.n	8002e2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1a:	d007      	beq.n	8002e2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e1c:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e24:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40007000 	.word	0x40007000
 8002e40:	20000008 	.word	0x20000008
 8002e44:	431bde83 	.word	0x431bde83

08002e48 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e56:	6053      	str	r3, [r2, #4]
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40007000 	.word	0x40007000

08002e68 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002e70:	f7fd ff9e 	bl	8000db0 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e06f      	b.n	8002f60 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_QSPI_Init+0x28>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e067      	b.n	8002f60 <HAL_QSPI_Init+0xf8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10b      	bne.n	8002ebc <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f003 ffd3 	bl	8006e58 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002eb2:	f241 3188 	movw	r1, #5000	; 0x1388
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f858 	bl	8002f6c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	021a      	lsls	r2, r3, #8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2120      	movs	r1, #32
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f850 	bl	8002f88 <QSPI_WaitFlagStateUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002eec:	7afb      	ldrb	r3, [r7, #11]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d131      	bne.n	8002f56 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002efc:	f023 0310 	bic.w	r3, r3, #16
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6852      	ldr	r2, [r2, #4]
 8002f04:	0611      	lsls	r1, r2, #24
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68d2      	ldr	r2, [r2, #12]
 8002f0a:	4311      	orrs	r1, r2
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <HAL_QSPI_Init+0x100>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6912      	ldr	r2, [r2, #16]
 8002f22:	0411      	lsls	r1, r2, #16
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6952      	ldr	r2, [r2, #20]
 8002f28:	4311      	orrs	r1, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6992      	ldr	r2, [r2, #24]
 8002f2e:	4311      	orrs	r1, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002f5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	ffe0f8fe 	.word	0xffe0f8fe

08002f6c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002f98:	e01a      	b.n	8002fd0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d016      	beq.n	8002fd0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa2:	f7fd ff05 	bl	8000db0 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d302      	bcc.n	8002fb8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e00e      	b.n	8002fee <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf14      	ite	ne
 8002fde:	2301      	movne	r3, #1
 8002fe0:	2300      	moveq	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d1d6      	bne.n	8002f9a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e3d4      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800300a:	4ba1      	ldr	r3, [pc, #644]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003014:	4b9e      	ldr	r3, [pc, #632]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 80e4 	beq.w	80031f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <HAL_RCC_OscConfig+0x4a>
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b0c      	cmp	r3, #12
 8003036:	f040 808b 	bne.w	8003150 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b01      	cmp	r3, #1
 800303e:	f040 8087 	bne.w	8003150 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003042:	4b93      	ldr	r3, [pc, #588]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_RCC_OscConfig+0x62>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e3ac      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1a      	ldr	r2, [r3, #32]
 800305e:	4b8c      	ldr	r3, [pc, #560]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d004      	beq.n	8003074 <HAL_RCC_OscConfig+0x7c>
 800306a:	4b89      	ldr	r3, [pc, #548]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003072:	e005      	b.n	8003080 <HAL_RCC_OscConfig+0x88>
 8003074:	4b86      	ldr	r3, [pc, #536]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 8003076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003080:	4293      	cmp	r3, r2
 8003082:	d223      	bcs.n	80030cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fd71 	bl	8003b70 <RCC_SetFlashLatencyFromMSIRange>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e38d      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003098:	4b7d      	ldr	r3, [pc, #500]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a7c      	ldr	r2, [pc, #496]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 800309e:	f043 0308 	orr.w	r3, r3, #8
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b7a      	ldr	r3, [pc, #488]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	4977      	ldr	r1, [pc, #476]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b6:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	4972      	ldr	r1, [pc, #456]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
 80030ca:	e025      	b.n	8003118 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030cc:	4b70      	ldr	r3, [pc, #448]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a6f      	ldr	r2, [pc, #444]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80030d2:	f043 0308 	orr.w	r3, r3, #8
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4b6d      	ldr	r3, [pc, #436]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	496a      	ldr	r1, [pc, #424]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ea:	4b69      	ldr	r3, [pc, #420]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	4965      	ldr	r1, [pc, #404]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fd31 	bl	8003b70 <RCC_SetFlashLatencyFromMSIRange>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e34d      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003118:	f000 fc36 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 800311c:	4601      	mov	r1, r0
 800311e:	4b5c      	ldr	r3, [pc, #368]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	4a5a      	ldr	r2, [pc, #360]	; (8003294 <HAL_RCC_OscConfig+0x29c>)
 800312a:	5cd3      	ldrb	r3, [r2, r3]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	fa21 f303 	lsr.w	r3, r1, r3
 8003134:	4a58      	ldr	r2, [pc, #352]	; (8003298 <HAL_RCC_OscConfig+0x2a0>)
 8003136:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003138:	4b58      	ldr	r3, [pc, #352]	; (800329c <HAL_RCC_OscConfig+0x2a4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f003 fff5 	bl	800712c <HAL_InitTick>
 8003142:	4603      	mov	r3, r0
 8003144:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d052      	beq.n	80031f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	e331      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d032      	beq.n	80031be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003158:	4b4d      	ldr	r3, [pc, #308]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a4c      	ldr	r2, [pc, #304]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003164:	f7fd fe24 	bl	8000db0 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800316c:	f7fd fe20 	bl	8000db0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e31a      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800317e:	4b44      	ldr	r3, [pc, #272]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800318a:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a40      	ldr	r2, [pc, #256]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 8003190:	f043 0308 	orr.w	r3, r3, #8
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b3e      	ldr	r3, [pc, #248]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	493b      	ldr	r1, [pc, #236]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031a8:	4b39      	ldr	r3, [pc, #228]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	4936      	ldr	r1, [pc, #216]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]
 80031bc:	e01a      	b.n	80031f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031be:	4b34      	ldr	r3, [pc, #208]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a33      	ldr	r2, [pc, #204]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ca:	f7fd fdf1 	bl	8000db0 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031d2:	f7fd fded 	bl	8000db0 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e2e7      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031e4:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x1da>
 80031f0:	e000      	b.n	80031f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d074      	beq.n	80032ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2b08      	cmp	r3, #8
 8003204:	d005      	beq.n	8003212 <HAL_RCC_OscConfig+0x21a>
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b0c      	cmp	r3, #12
 800320a:	d10e      	bne.n	800322a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d10b      	bne.n	800322a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003212:	4b1f      	ldr	r3, [pc, #124]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d064      	beq.n	80032e8 <HAL_RCC_OscConfig+0x2f0>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d160      	bne.n	80032e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e2c4      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x24a>
 8003234:	4b16      	ldr	r3, [pc, #88]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a15      	ldr	r2, [pc, #84]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 800323a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	e01d      	b.n	800327e <HAL_RCC_OscConfig+0x286>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800324a:	d10c      	bne.n	8003266 <HAL_RCC_OscConfig+0x26e>
 800324c:	4b10      	ldr	r3, [pc, #64]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a0f      	ldr	r2, [pc, #60]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 8003252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0c      	ldr	r2, [pc, #48]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 800325e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	e00b      	b.n	800327e <HAL_RCC_OscConfig+0x286>
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a09      	ldr	r2, [pc, #36]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 800326c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b07      	ldr	r3, [pc, #28]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a06      	ldr	r2, [pc, #24]	; (8003290 <HAL_RCC_OscConfig+0x298>)
 8003278:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01c      	beq.n	80032c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7fd fd93 	bl	8000db0 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800328c:	e011      	b.n	80032b2 <HAL_RCC_OscConfig+0x2ba>
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000
 8003294:	08007f8c 	.word	0x08007f8c
 8003298:	20000008 	.word	0x20000008
 800329c:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fd fd86 	bl	8000db0 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	; 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e280      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b2:	4baf      	ldr	r3, [pc, #700]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x2a8>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fd fd76 	bl	8000db0 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fd fd72 	bl	8000db0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e26c      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032da:	4ba5      	ldr	r3, [pc, #660]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x2d0>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d060      	beq.n	80033b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_OscConfig+0x310>
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d119      	bne.n	8003336 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d116      	bne.n	8003336 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003308:	4b99      	ldr	r3, [pc, #612]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_OscConfig+0x328>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e249      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003320:	4b93      	ldr	r3, [pc, #588]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	4990      	ldr	r1, [pc, #576]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003334:	e040      	b.n	80033b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d023      	beq.n	8003386 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800333e:	4b8c      	ldr	r3, [pc, #560]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a8b      	ldr	r2, [pc, #556]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334a:	f7fd fd31 	bl	8000db0 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003352:	f7fd fd2d 	bl	8000db0 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e227      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003364:	4b82      	ldr	r3, [pc, #520]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003370:	4b7f      	ldr	r3, [pc, #508]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	061b      	lsls	r3, r3, #24
 800337e:	497c      	ldr	r1, [pc, #496]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003380:	4313      	orrs	r3, r2
 8003382:	604b      	str	r3, [r1, #4]
 8003384:	e018      	b.n	80033b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003386:	4b7a      	ldr	r3, [pc, #488]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a79      	ldr	r2, [pc, #484]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 800338c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7fd fd0d 	bl	8000db0 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339a:	f7fd fd09 	bl	8000db0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e203      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033ac:	4b70      	ldr	r3, [pc, #448]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f0      	bne.n	800339a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d03c      	beq.n	800343e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01c      	beq.n	8003406 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033cc:	4b68      	ldr	r3, [pc, #416]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80033ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d2:	4a67      	ldr	r2, [pc, #412]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fd fce8 	bl	8000db0 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e4:	f7fd fce4 	bl	8000db0 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e1de      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033f6:	4b5e      	ldr	r3, [pc, #376]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80033f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ef      	beq.n	80033e4 <HAL_RCC_OscConfig+0x3ec>
 8003404:	e01b      	b.n	800343e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003406:	4b5a      	ldr	r3, [pc, #360]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800340c:	4a58      	ldr	r2, [pc, #352]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7fd fccb 	bl	8000db0 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341e:	f7fd fcc7 	bl	8000db0 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e1c1      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003430:	4b4f      	ldr	r3, [pc, #316]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1ef      	bne.n	800341e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80a6 	beq.w	8003598 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344c:	2300      	movs	r3, #0
 800344e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003450:	4b47      	ldr	r3, [pc, #284]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10d      	bne.n	8003478 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345c:	4b44      	ldr	r3, [pc, #272]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	4a43      	ldr	r2, [pc, #268]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003466:	6593      	str	r3, [r2, #88]	; 0x58
 8003468:	4b41      	ldr	r3, [pc, #260]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003474:	2301      	movs	r3, #1
 8003476:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003478:	4b3e      	ldr	r3, [pc, #248]	; (8003574 <HAL_RCC_OscConfig+0x57c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d118      	bne.n	80034b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003484:	4b3b      	ldr	r3, [pc, #236]	; (8003574 <HAL_RCC_OscConfig+0x57c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a3a      	ldr	r2, [pc, #232]	; (8003574 <HAL_RCC_OscConfig+0x57c>)
 800348a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003490:	f7fd fc8e 	bl	8000db0 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003498:	f7fd fc8a 	bl	8000db0 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e184      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034aa:	4b32      	ldr	r3, [pc, #200]	; (8003574 <HAL_RCC_OscConfig+0x57c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d108      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4d8>
 80034be:	4b2c      	ldr	r3, [pc, #176]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c4:	4a2a      	ldr	r2, [pc, #168]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ce:	e024      	b.n	800351a <HAL_RCC_OscConfig+0x522>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b05      	cmp	r3, #5
 80034d6:	d110      	bne.n	80034fa <HAL_RCC_OscConfig+0x502>
 80034d8:	4b25      	ldr	r3, [pc, #148]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	4a24      	ldr	r2, [pc, #144]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80034e0:	f043 0304 	orr.w	r3, r3, #4
 80034e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034e8:	4b21      	ldr	r3, [pc, #132]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	4a20      	ldr	r2, [pc, #128]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034f8:	e00f      	b.n	800351a <HAL_RCC_OscConfig+0x522>
 80034fa:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003500:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003502:	f023 0301 	bic.w	r3, r3, #1
 8003506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800350a:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	4a17      	ldr	r2, [pc, #92]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003512:	f023 0304 	bic.w	r3, r3, #4
 8003516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d016      	beq.n	8003550 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7fd fc45 	bl	8000db0 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003528:	e00a      	b.n	8003540 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fd fc41 	bl	8000db0 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f241 3288 	movw	r2, #5000	; 0x1388
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e139      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0ed      	beq.n	800352a <HAL_RCC_OscConfig+0x532>
 800354e:	e01a      	b.n	8003586 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fd fc2e 	bl	8000db0 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003556:	e00f      	b.n	8003578 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003558:	f7fd fc2a 	bl	8000db0 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d906      	bls.n	8003578 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e122      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003578:	4b90      	ldr	r3, [pc, #576]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e8      	bne.n	8003558 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003586:	7ffb      	ldrb	r3, [r7, #31]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358c:	4b8b      	ldr	r3, [pc, #556]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	4a8a      	ldr	r2, [pc, #552]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 8003592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003596:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8108 	beq.w	80037b2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	f040 80d0 	bne.w	800374c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035ac:	4b83      	ldr	r3, [pc, #524]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 0203 	and.w	r2, r3, #3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	429a      	cmp	r2, r3
 80035be:	d130      	bne.n	8003622 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	3b01      	subs	r3, #1
 80035cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d127      	bne.n	8003622 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d11f      	bne.n	8003622 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035ec:	2a07      	cmp	r2, #7
 80035ee:	bf14      	ite	ne
 80035f0:	2201      	movne	r2, #1
 80035f2:	2200      	moveq	r2, #0
 80035f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d113      	bne.n	8003622 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	3b01      	subs	r3, #1
 8003608:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d109      	bne.n	8003622 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	085b      	lsrs	r3, r3, #1
 800361a:	3b01      	subs	r3, #1
 800361c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d06e      	beq.n	8003700 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b0c      	cmp	r3, #12
 8003626:	d069      	beq.n	80036fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003628:	4b64      	ldr	r3, [pc, #400]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d105      	bne.n	8003640 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003634:	4b61      	ldr	r3, [pc, #388]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0b7      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003644:	4b5d      	ldr	r3, [pc, #372]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a5c      	ldr	r2, [pc, #368]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 800364a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800364e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003650:	f7fd fbae 	bl	8000db0 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003658:	f7fd fbaa 	bl	8000db0 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e0a4      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800366a:	4b54      	ldr	r3, [pc, #336]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003676:	4b51      	ldr	r3, [pc, #324]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	4b51      	ldr	r3, [pc, #324]	; (80037c0 <HAL_RCC_OscConfig+0x7c8>)
 800367c:	4013      	ands	r3, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003686:	3a01      	subs	r2, #1
 8003688:	0112      	lsls	r2, r2, #4
 800368a:	4311      	orrs	r1, r2
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003690:	0212      	lsls	r2, r2, #8
 8003692:	4311      	orrs	r1, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003698:	0852      	lsrs	r2, r2, #1
 800369a:	3a01      	subs	r2, #1
 800369c:	0552      	lsls	r2, r2, #21
 800369e:	4311      	orrs	r1, r2
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036a4:	0852      	lsrs	r2, r2, #1
 80036a6:	3a01      	subs	r2, #1
 80036a8:	0652      	lsls	r2, r2, #25
 80036aa:	4311      	orrs	r1, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036b0:	0912      	lsrs	r2, r2, #4
 80036b2:	0452      	lsls	r2, r2, #17
 80036b4:	430a      	orrs	r2, r1
 80036b6:	4941      	ldr	r1, [pc, #260]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036bc:	4b3f      	ldr	r3, [pc, #252]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a3e      	ldr	r2, [pc, #248]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 80036c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036c8:	4b3c      	ldr	r3, [pc, #240]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 80036ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036d4:	f7fd fb6c 	bl	8000db0 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036dc:	f7fd fb68 	bl	8000db0 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e062      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ee:	4b33      	ldr	r3, [pc, #204]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036fa:	e05a      	b.n	80037b2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e059      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003700:	4b2e      	ldr	r3, [pc, #184]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d152      	bne.n	80037b2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800370c:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 8003712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003716:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003718:	4b28      	ldr	r3, [pc, #160]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a27      	ldr	r2, [pc, #156]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 800371e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003722:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003724:	f7fd fb44 	bl	8000db0 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fd fb40 	bl	8000db0 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e03a      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373e:	4b1f      	ldr	r3, [pc, #124]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x734>
 800374a:	e032      	b.n	80037b2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d02d      	beq.n	80037ae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003752:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a19      	ldr	r2, [pc, #100]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 8003758:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800375c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800375e:	4b17      	ldr	r3, [pc, #92]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800376a:	4b14      	ldr	r3, [pc, #80]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	4a13      	ldr	r2, [pc, #76]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 8003770:	f023 0303 	bic.w	r3, r3, #3
 8003774:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003776:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	4a10      	ldr	r2, [pc, #64]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 800377c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003784:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7fd fb13 	bl	8000db0 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378e:	f7fd fb0f 	bl	8000db0 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e009      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_RCC_OscConfig+0x7c4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x796>
 80037ac:	e001      	b.n	80037b2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3720      	adds	r7, #32
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000
 80037c0:	f99d808c 	.word	0xf99d808c

080037c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0c8      	b.n	800396a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037d8:	4b66      	ldr	r3, [pc, #408]	; (8003974 <HAL_RCC_ClockConfig+0x1b0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d910      	bls.n	8003808 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	4b63      	ldr	r3, [pc, #396]	; (8003974 <HAL_RCC_ClockConfig+0x1b0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 0207 	bic.w	r2, r3, #7
 80037ee:	4961      	ldr	r1, [pc, #388]	; (8003974 <HAL_RCC_ClockConfig+0x1b0>)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	4b5f      	ldr	r3, [pc, #380]	; (8003974 <HAL_RCC_ClockConfig+0x1b0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0b0      	b.n	800396a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d04c      	beq.n	80038ae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d107      	bne.n	800382c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800381c:	4b56      	ldr	r3, [pc, #344]	; (8003978 <HAL_RCC_ClockConfig+0x1b4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d121      	bne.n	800386c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e09e      	b.n	800396a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d107      	bne.n	8003844 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003834:	4b50      	ldr	r3, [pc, #320]	; (8003978 <HAL_RCC_ClockConfig+0x1b4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d115      	bne.n	800386c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e092      	b.n	800396a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d107      	bne.n	800385c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800384c:	4b4a      	ldr	r3, [pc, #296]	; (8003978 <HAL_RCC_ClockConfig+0x1b4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e086      	b.n	800396a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800385c:	4b46      	ldr	r3, [pc, #280]	; (8003978 <HAL_RCC_ClockConfig+0x1b4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e07e      	b.n	800396a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800386c:	4b42      	ldr	r3, [pc, #264]	; (8003978 <HAL_RCC_ClockConfig+0x1b4>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f023 0203 	bic.w	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	493f      	ldr	r1, [pc, #252]	; (8003978 <HAL_RCC_ClockConfig+0x1b4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387e:	f7fd fa97 	bl	8000db0 <HAL_GetTick>
 8003882:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003884:	e00a      	b.n	800389c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003886:	f7fd fa93 	bl	8000db0 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	f241 3288 	movw	r2, #5000	; 0x1388
 8003894:	4293      	cmp	r3, r2
 8003896:	d901      	bls.n	800389c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e066      	b.n	800396a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389c:	4b36      	ldr	r3, [pc, #216]	; (8003978 <HAL_RCC_ClockConfig+0x1b4>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 020c 	and.w	r2, r3, #12
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d1eb      	bne.n	8003886 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ba:	4b2f      	ldr	r3, [pc, #188]	; (8003978 <HAL_RCC_ClockConfig+0x1b4>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	492c      	ldr	r1, [pc, #176]	; (8003978 <HAL_RCC_ClockConfig+0x1b4>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038cc:	4b29      	ldr	r3, [pc, #164]	; (8003974 <HAL_RCC_ClockConfig+0x1b0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d210      	bcs.n	80038fc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b26      	ldr	r3, [pc, #152]	; (8003974 <HAL_RCC_ClockConfig+0x1b0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 0207 	bic.w	r2, r3, #7
 80038e2:	4924      	ldr	r1, [pc, #144]	; (8003974 <HAL_RCC_ClockConfig+0x1b0>)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b22      	ldr	r3, [pc, #136]	; (8003974 <HAL_RCC_ClockConfig+0x1b0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e036      	b.n	800396a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <HAL_RCC_ClockConfig+0x1b4>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4918      	ldr	r1, [pc, #96]	; (8003978 <HAL_RCC_ClockConfig+0x1b4>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003926:	4b14      	ldr	r3, [pc, #80]	; (8003978 <HAL_RCC_ClockConfig+0x1b4>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4910      	ldr	r1, [pc, #64]	; (8003978 <HAL_RCC_ClockConfig+0x1b4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800393a:	f000 f825 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 800393e:	4601      	mov	r1, r0
 8003940:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <HAL_RCC_ClockConfig+0x1b4>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	4a0c      	ldr	r2, [pc, #48]	; (800397c <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	5cd3      	ldrb	r3, [r2, r3]
 800394e:	f003 031f 	and.w	r3, r3, #31
 8003952:	fa21 f303 	lsr.w	r3, r1, r3
 8003956:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f003 fbe4 	bl	800712c <HAL_InitTick>
 8003964:	4603      	mov	r3, r0
 8003966:	72fb      	strb	r3, [r7, #11]

  return status;
 8003968:	7afb      	ldrb	r3, [r7, #11]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40022000 	.word	0x40022000
 8003978:	40021000 	.word	0x40021000
 800397c:	08007f8c 	.word	0x08007f8c
 8003980:	20000008 	.word	0x20000008
 8003984:	20000000 	.word	0x20000000

08003988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003988:	b480      	push	{r7}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	2300      	movs	r3, #0
 8003994:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003996:	4b3d      	ldr	r3, [pc, #244]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x104>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a0:	4b3a      	ldr	r3, [pc, #232]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x104>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0x34>
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	d121      	bne.n	80039fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d11e      	bne.n	80039fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039bc:	4b33      	ldr	r3, [pc, #204]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x104>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039c8:	4b30      	ldr	r3, [pc, #192]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x104>)
 80039ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ce:	0a1b      	lsrs	r3, r3, #8
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	e005      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039d8:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x104>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039e4:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10d      	bne.n	8003a10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039f8:	e00a      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d102      	bne.n	8003a06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a00:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a02:	61bb      	str	r3, [r7, #24]
 8003a04:	e004      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a0c:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	2b0c      	cmp	r3, #12
 8003a14:	d133      	bne.n	8003a7e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x104>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d002      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0xa4>
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d003      	beq.n	8003a32 <HAL_RCC_GetSysClockFreq+0xaa>
 8003a2a:	e005      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a2e:	617b      	str	r3, [r7, #20]
      break;
 8003a30:	e005      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a32:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a34:	617b      	str	r3, [r7, #20]
      break;
 8003a36:	e002      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	617b      	str	r3, [r7, #20]
      break;
 8003a3c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a3e:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x104>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	3301      	adds	r3, #1
 8003a4a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x104>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	0a1b      	lsrs	r3, r3, #8
 8003a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	fb02 f203 	mul.w	r2, r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a62:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x104>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	0e5b      	lsrs	r3, r3, #25
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a7e:	69bb      	ldr	r3, [r7, #24]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3724      	adds	r7, #36	; 0x24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	08007fa4 	.word	0x08007fa4
 8003a94:	00f42400 	.word	0x00f42400
 8003a98:	007a1200 	.word	0x007a1200

08003a9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa0:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000008 	.word	0x20000008

08003ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ab8:	f7ff fff0 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003abc:	4601      	mov	r1, r0
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	4a04      	ldr	r2, [pc, #16]	; (8003adc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aca:	5cd3      	ldrb	r3, [r2, r3]
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	08007f9c 	.word	0x08007f9c

08003ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ae4:	f7ff ffda 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003ae8:	4601      	mov	r1, r0
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	0adb      	lsrs	r3, r3, #11
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003af6:	5cd3      	ldrb	r3, [r2, r3]
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40021000 	.word	0x40021000
 8003b08:	08007f9c 	.word	0x08007f9c

08003b0c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	220f      	movs	r2, #15
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003b1c:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <HAL_RCC_GetClockConfig+0x5c>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0203 	and.w	r2, r3, #3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003b28:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <HAL_RCC_GetClockConfig+0x5c>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <HAL_RCC_GetClockConfig+0x5c>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003b40:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <HAL_RCC_GetClockConfig+0x5c>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	08db      	lsrs	r3, r3, #3
 8003b46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b4e:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <HAL_RCC_GetClockConfig+0x60>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0207 	and.w	r2, r3, #7
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	601a      	str	r2, [r3, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	40022000 	.word	0x40022000

08003b70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b78:	2300      	movs	r3, #0
 8003b7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b7c:	4b2a      	ldr	r3, [pc, #168]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b88:	f7ff f8fa 	bl	8002d80 <HAL_PWREx_GetVoltageRange>
 8003b8c:	6178      	str	r0, [r7, #20]
 8003b8e:	e014      	b.n	8003bba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b90:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	4a24      	ldr	r2, [pc, #144]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b9c:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ba8:	f7ff f8ea 	bl	8002d80 <HAL_PWREx_GetVoltageRange>
 8003bac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bae:	4b1e      	ldr	r3, [pc, #120]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb2:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc0:	d10b      	bne.n	8003bda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b80      	cmp	r3, #128	; 0x80
 8003bc6:	d919      	bls.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2ba0      	cmp	r3, #160	; 0xa0
 8003bcc:	d902      	bls.n	8003bd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bce:	2302      	movs	r3, #2
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	e013      	b.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	e010      	b.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b80      	cmp	r3, #128	; 0x80
 8003bde:	d902      	bls.n	8003be6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003be0:	2303      	movs	r3, #3
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	e00a      	b.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b80      	cmp	r3, #128	; 0x80
 8003bea:	d102      	bne.n	8003bf2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bec:	2302      	movs	r3, #2
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	e004      	b.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b70      	cmp	r3, #112	; 0x70
 8003bf6:	d101      	bne.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f023 0207 	bic.w	r2, r3, #7
 8003c04:	4909      	ldr	r1, [pc, #36]	; (8003c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c0c:	4b07      	ldr	r3, [pc, #28]	; (8003c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d001      	beq.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40022000 	.word	0x40022000

08003c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c38:	2300      	movs	r3, #0
 8003c3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d03f      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c54:	d01c      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c5a:	d802      	bhi.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00e      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003c60:	e01f      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003c62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c66:	d003      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003c68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c6c:	d01c      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003c6e:	e018      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c70:	4b85      	ldr	r3, [pc, #532]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a84      	ldr	r2, [pc, #528]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c7c:	e015      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3304      	adds	r3, #4
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fac9 	bl	800421c <RCCEx_PLLSAI1_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c8e:	e00c      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3320      	adds	r3, #32
 8003c94:	2100      	movs	r1, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fbb0 	bl	80043fc <RCCEx_PLLSAI2_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ca0:	e003      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ca6:	e000      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003caa:	7cfb      	ldrb	r3, [r7, #19]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10b      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb0:	4b75      	ldr	r3, [pc, #468]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cbe:	4972      	ldr	r1, [pc, #456]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cc6:	e001      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc8:	7cfb      	ldrb	r3, [r7, #19]
 8003cca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d03f      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ce0:	d01c      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003ce2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ce6:	d802      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00e      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003cec:	e01f      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003cee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cf2:	d003      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003cf4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cf8:	d01c      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003cfa:	e018      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cfc:	4b62      	ldr	r3, [pc, #392]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4a61      	ldr	r2, [pc, #388]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d08:	e015      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	2100      	movs	r1, #0
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fa83 	bl	800421c <RCCEx_PLLSAI1_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d1a:	e00c      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3320      	adds	r3, #32
 8003d20:	2100      	movs	r1, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fb6a 	bl	80043fc <RCCEx_PLLSAI2_Config>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d2c:	e003      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	74fb      	strb	r3, [r7, #19]
      break;
 8003d32:	e000      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d36:	7cfb      	ldrb	r3, [r7, #19]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10b      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d3c:	4b52      	ldr	r3, [pc, #328]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d4a:	494f      	ldr	r1, [pc, #316]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d52:	e001      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	7cfb      	ldrb	r3, [r7, #19]
 8003d56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80a0 	beq.w	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d66:	2300      	movs	r3, #0
 8003d68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d6a:	4b47      	ldr	r3, [pc, #284]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00d      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d80:	4b41      	ldr	r3, [pc, #260]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	4a40      	ldr	r2, [pc, #256]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d8c:	4b3e      	ldr	r3, [pc, #248]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9c:	4b3b      	ldr	r3, [pc, #236]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a3a      	ldr	r2, [pc, #232]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003da8:	f7fd f802 	bl	8000db0 <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dae:	e009      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db0:	f7fc fffe 	bl	8000db0 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d902      	bls.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	74fb      	strb	r3, [r7, #19]
        break;
 8003dc2:	e005      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dc4:	4b31      	ldr	r3, [pc, #196]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0ef      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003dd0:	7cfb      	ldrb	r3, [r7, #19]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d15c      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dd6:	4b2c      	ldr	r3, [pc, #176]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01f      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d019      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003df4:	4b24      	ldr	r3, [pc, #144]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e00:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	4a20      	ldr	r2, [pc, #128]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e10:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	4a1c      	ldr	r2, [pc, #112]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e20:	4a19      	ldr	r2, [pc, #100]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e32:	f7fc ffbd 	bl	8000db0 <HAL_GetTick>
 8003e36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e38:	e00b      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3a:	f7fc ffb9 	bl	8000db0 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d902      	bls.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e50:	e006      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e52:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ec      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003e60:	7cfb      	ldrb	r3, [r7, #19]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e76:	4904      	ldr	r1, [pc, #16]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e7e:	e009      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	74bb      	strb	r3, [r7, #18]
 8003e84:	e006      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e90:	7cfb      	ldrb	r3, [r7, #19]
 8003e92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e94:	7c7b      	ldrb	r3, [r7, #17]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d105      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9a:	4b9e      	ldr	r3, [pc, #632]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9e:	4a9d      	ldr	r2, [pc, #628]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eb2:	4b98      	ldr	r3, [pc, #608]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	f023 0203 	bic.w	r2, r3, #3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	4994      	ldr	r1, [pc, #592]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ed4:	4b8f      	ldr	r3, [pc, #572]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f023 020c 	bic.w	r2, r3, #12
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee2:	498c      	ldr	r1, [pc, #560]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ef6:	4b87      	ldr	r3, [pc, #540]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	4983      	ldr	r1, [pc, #524]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f18:	4b7e      	ldr	r3, [pc, #504]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	497b      	ldr	r1, [pc, #492]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f3a:	4b76      	ldr	r3, [pc, #472]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f48:	4972      	ldr	r1, [pc, #456]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f5c:	4b6d      	ldr	r3, [pc, #436]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	496a      	ldr	r1, [pc, #424]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f7e:	4b65      	ldr	r3, [pc, #404]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8c:	4961      	ldr	r1, [pc, #388]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fa0:	4b5c      	ldr	r3, [pc, #368]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fae:	4959      	ldr	r1, [pc, #356]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fc2:	4b54      	ldr	r3, [pc, #336]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd0:	4950      	ldr	r1, [pc, #320]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fe4:	4b4b      	ldr	r3, [pc, #300]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	4948      	ldr	r1, [pc, #288]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004006:	4b43      	ldr	r3, [pc, #268]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	493f      	ldr	r1, [pc, #252]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d028      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004028:	4b3a      	ldr	r3, [pc, #232]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004036:	4937      	ldr	r1, [pc, #220]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004046:	d106      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004048:	4b32      	ldr	r3, [pc, #200]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4a31      	ldr	r2, [pc, #196]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800404e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004052:	60d3      	str	r3, [r2, #12]
 8004054:	e011      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800405a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800405e:	d10c      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	2101      	movs	r1, #1
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f8d8 	bl	800421c <RCCEx_PLLSAI1_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004076:	7cfb      	ldrb	r3, [r7, #19]
 8004078:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d028      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004086:	4b23      	ldr	r3, [pc, #140]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	491f      	ldr	r1, [pc, #124]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040a4:	d106      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a6:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	4a1a      	ldr	r2, [pc, #104]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040b0:	60d3      	str	r3, [r2, #12]
 80040b2:	e011      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	2101      	movs	r1, #1
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 f8a9 	bl	800421c <RCCEx_PLLSAI1_Config>
 80040ca:	4603      	mov	r3, r0
 80040cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d02b      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f2:	4908      	ldr	r1, [pc, #32]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004102:	d109      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004104:	4b03      	ldr	r3, [pc, #12]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4a02      	ldr	r2, [pc, #8]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800410a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800410e:	60d3      	str	r3, [r2, #12]
 8004110:	e014      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004120:	d10c      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3304      	adds	r3, #4
 8004126:	2101      	movs	r1, #1
 8004128:	4618      	mov	r0, r3
 800412a:	f000 f877 	bl	800421c <RCCEx_PLLSAI1_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004132:	7cfb      	ldrb	r3, [r7, #19]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02f      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004148:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004156:	4928      	ldr	r1, [pc, #160]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004166:	d10d      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3304      	adds	r3, #4
 800416c:	2102      	movs	r1, #2
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f854 	bl	800421c <RCCEx_PLLSAI1_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004178:	7cfb      	ldrb	r3, [r7, #19]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d014      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800417e:	7cfb      	ldrb	r3, [r7, #19]
 8004180:	74bb      	strb	r3, [r7, #18]
 8004182:	e011      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800418c:	d10c      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3320      	adds	r3, #32
 8004192:	2102      	movs	r1, #2
 8004194:	4618      	mov	r0, r3
 8004196:	f000 f931 	bl	80043fc <RCCEx_PLLSAI2_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80041a4:	7cfb      	ldrb	r3, [r7, #19]
 80041a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041b4:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c2:	490d      	ldr	r1, [pc, #52]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00b      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e6:	4904      	ldr	r1, [pc, #16]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40021000 	.word	0x40021000

080041fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004206:	f043 0304 	orr.w	r3, r3, #4
 800420a:	6013      	str	r3, [r2, #0]
}
 800420c:	bf00      	nop
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000

0800421c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800422a:	4b73      	ldr	r3, [pc, #460]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d018      	beq.n	8004268 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004236:	4b70      	ldr	r3, [pc, #448]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0203 	and.w	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d10d      	bne.n	8004262 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
       ||
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800424e:	4b6a      	ldr	r3, [pc, #424]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	091b      	lsrs	r3, r3, #4
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
       ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d044      	beq.n	80042ec <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
 8004266:	e041      	b.n	80042ec <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d00c      	beq.n	800428a <RCCEx_PLLSAI1_Config+0x6e>
 8004270:	2b03      	cmp	r3, #3
 8004272:	d013      	beq.n	800429c <RCCEx_PLLSAI1_Config+0x80>
 8004274:	2b01      	cmp	r3, #1
 8004276:	d120      	bne.n	80042ba <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004278:	4b5f      	ldr	r3, [pc, #380]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d11d      	bne.n	80042c0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004288:	e01a      	b.n	80042c0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800428a:	4b5b      	ldr	r3, [pc, #364]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004292:	2b00      	cmp	r3, #0
 8004294:	d116      	bne.n	80042c4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800429a:	e013      	b.n	80042c4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800429c:	4b56      	ldr	r3, [pc, #344]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10f      	bne.n	80042c8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042a8:	4b53      	ldr	r3, [pc, #332]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042b8:	e006      	b.n	80042c8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
      break;
 80042be:	e004      	b.n	80042ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80042c0:	bf00      	nop
 80042c2:	e002      	b.n	80042ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80042c4:	bf00      	nop
 80042c6:	e000      	b.n	80042ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80042c8:	bf00      	nop
    }

    if(status == HAL_OK)
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10d      	bne.n	80042ec <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042d0:	4b49      	ldr	r3, [pc, #292]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6819      	ldr	r1, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	430b      	orrs	r3, r1
 80042e6:	4944      	ldr	r1, [pc, #272]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d17d      	bne.n	80043ee <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042f2:	4b41      	ldr	r3, [pc, #260]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a40      	ldr	r2, [pc, #256]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fe:	f7fc fd57 	bl	8000db0 <HAL_GetTick>
 8004302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004304:	e009      	b.n	800431a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004306:	f7fc fd53 	bl	8000db0 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d902      	bls.n	800431a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	73fb      	strb	r3, [r7, #15]
        break;
 8004318:	e005      	b.n	8004326 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800431a:	4b37      	ldr	r3, [pc, #220]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1ef      	bne.n	8004306 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d160      	bne.n	80043ee <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d111      	bne.n	8004356 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004332:	4b31      	ldr	r3, [pc, #196]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800433a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6892      	ldr	r2, [r2, #8]
 8004342:	0211      	lsls	r1, r2, #8
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	68d2      	ldr	r2, [r2, #12]
 8004348:	0912      	lsrs	r2, r2, #4
 800434a:	0452      	lsls	r2, r2, #17
 800434c:	430a      	orrs	r2, r1
 800434e:	492a      	ldr	r1, [pc, #168]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004350:	4313      	orrs	r3, r2
 8004352:	610b      	str	r3, [r1, #16]
 8004354:	e027      	b.n	80043a6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d112      	bne.n	8004382 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800435c:	4b26      	ldr	r3, [pc, #152]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004364:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6892      	ldr	r2, [r2, #8]
 800436c:	0211      	lsls	r1, r2, #8
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6912      	ldr	r2, [r2, #16]
 8004372:	0852      	lsrs	r2, r2, #1
 8004374:	3a01      	subs	r2, #1
 8004376:	0552      	lsls	r2, r2, #21
 8004378:	430a      	orrs	r2, r1
 800437a:	491f      	ldr	r1, [pc, #124]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	610b      	str	r3, [r1, #16]
 8004380:	e011      	b.n	80043a6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004382:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800438a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6892      	ldr	r2, [r2, #8]
 8004392:	0211      	lsls	r1, r2, #8
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6952      	ldr	r2, [r2, #20]
 8004398:	0852      	lsrs	r2, r2, #1
 800439a:	3a01      	subs	r2, #1
 800439c:	0652      	lsls	r2, r2, #25
 800439e:	430a      	orrs	r2, r1
 80043a0:	4915      	ldr	r1, [pc, #84]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043a6:	4b14      	ldr	r3, [pc, #80]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a13      	ldr	r2, [pc, #76]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b2:	f7fc fcfd 	bl	8000db0 <HAL_GetTick>
 80043b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043b8:	e009      	b.n	80043ce <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043ba:	f7fc fcf9 	bl	8000db0 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d902      	bls.n	80043ce <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	73fb      	strb	r3, [r7, #15]
          break;
 80043cc:	e005      	b.n	80043da <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0ef      	beq.n	80043ba <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d106      	bne.n	80043ee <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	4903      	ldr	r1, [pc, #12]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000

080043fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800440a:	4b68      	ldr	r3, [pc, #416]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d018      	beq.n	8004448 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004416:	4b65      	ldr	r3, [pc, #404]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f003 0203 	and.w	r2, r3, #3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d10d      	bne.n	8004442 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
       ||
 800442a:	2b00      	cmp	r3, #0
 800442c:	d009      	beq.n	8004442 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800442e:	4b5f      	ldr	r3, [pc, #380]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	091b      	lsrs	r3, r3, #4
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
       ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d044      	beq.n	80044cc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
 8004446:	e041      	b.n	80044cc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d00c      	beq.n	800446a <RCCEx_PLLSAI2_Config+0x6e>
 8004450:	2b03      	cmp	r3, #3
 8004452:	d013      	beq.n	800447c <RCCEx_PLLSAI2_Config+0x80>
 8004454:	2b01      	cmp	r3, #1
 8004456:	d120      	bne.n	800449a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004458:	4b54      	ldr	r3, [pc, #336]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d11d      	bne.n	80044a0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004468:	e01a      	b.n	80044a0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800446a:	4b50      	ldr	r3, [pc, #320]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004472:	2b00      	cmp	r3, #0
 8004474:	d116      	bne.n	80044a4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800447a:	e013      	b.n	80044a4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800447c:	4b4b      	ldr	r3, [pc, #300]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10f      	bne.n	80044a8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004488:	4b48      	ldr	r3, [pc, #288]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004498:	e006      	b.n	80044a8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
      break;
 800449e:	e004      	b.n	80044aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80044a0:	bf00      	nop
 80044a2:	e002      	b.n	80044aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80044a4:	bf00      	nop
 80044a6:	e000      	b.n	80044aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80044a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10d      	bne.n	80044cc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044b0:	4b3e      	ldr	r3, [pc, #248]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6819      	ldr	r1, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	430b      	orrs	r3, r1
 80044c6:	4939      	ldr	r1, [pc, #228]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d167      	bne.n	80045a2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044d2:	4b36      	ldr	r3, [pc, #216]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a35      	ldr	r2, [pc, #212]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80044d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044de:	f7fc fc67 	bl	8000db0 <HAL_GetTick>
 80044e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044e4:	e009      	b.n	80044fa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044e6:	f7fc fc63 	bl	8000db0 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d902      	bls.n	80044fa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	73fb      	strb	r3, [r7, #15]
        break;
 80044f8:	e005      	b.n	8004506 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044fa:	4b2c      	ldr	r3, [pc, #176]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1ef      	bne.n	80044e6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d14a      	bne.n	80045a2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d111      	bne.n	8004536 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004512:	4b26      	ldr	r3, [pc, #152]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800451a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6892      	ldr	r2, [r2, #8]
 8004522:	0211      	lsls	r1, r2, #8
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	68d2      	ldr	r2, [r2, #12]
 8004528:	0912      	lsrs	r2, r2, #4
 800452a:	0452      	lsls	r2, r2, #17
 800452c:	430a      	orrs	r2, r1
 800452e:	491f      	ldr	r1, [pc, #124]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004530:	4313      	orrs	r3, r2
 8004532:	614b      	str	r3, [r1, #20]
 8004534:	e011      	b.n	800455a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004536:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800453e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6892      	ldr	r2, [r2, #8]
 8004546:	0211      	lsls	r1, r2, #8
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6912      	ldr	r2, [r2, #16]
 800454c:	0852      	lsrs	r2, r2, #1
 800454e:	3a01      	subs	r2, #1
 8004550:	0652      	lsls	r2, r2, #25
 8004552:	430a      	orrs	r2, r1
 8004554:	4915      	ldr	r1, [pc, #84]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004556:	4313      	orrs	r3, r2
 8004558:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800455a:	4b14      	ldr	r3, [pc, #80]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a13      	ldr	r2, [pc, #76]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004564:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004566:	f7fc fc23 	bl	8000db0 <HAL_GetTick>
 800456a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800456c:	e009      	b.n	8004582 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800456e:	f7fc fc1f 	bl	8000db0 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d902      	bls.n	8004582 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	73fb      	strb	r3, [r7, #15]
          break;
 8004580:	e005      	b.n	800458e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004582:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0ef      	beq.n	800456e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004596:	695a      	ldr	r2, [r3, #20]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	4903      	ldr	r1, [pc, #12]	; (80045ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40021000 	.word	0x40021000

080045b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e07c      	b.n	80046bc <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f002 fc7f 	bl	8006ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2202      	movs	r2, #2
 80045e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004602:	d902      	bls.n	800460a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e002      	b.n	8004610 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800460a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800460e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004618:	d007      	beq.n	800462a <HAL_SPI_Init+0x7a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004622:	d002      	beq.n	800462a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10b      	bne.n	800464a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800463a:	d903      	bls.n	8004644 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
 8004642:	e002      	b.n	800464a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	ea42 0103 	orr.w	r1, r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	0c1b      	lsrs	r3, r3, #16
 800468a:	f003 0204 	and.w	r2, r3, #4
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	ea42 0103 	orr.w	r1, r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e01d      	b.n	8004712 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f815 	bl	800471a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f000 f986 	bl	8004a14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <HAL_TIM_Base_Start_IT+0x50>)
 8004750:	4013      	ands	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b06      	cmp	r3, #6
 8004758:	d00b      	beq.n	8004772 <HAL_TIM_Base_Start_IT+0x42>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004760:	d007      	beq.n	8004772 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	00010007 	.word	0x00010007

08004784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b02      	cmp	r3, #2
 8004798:	d122      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d11b      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0202 	mvn.w	r2, #2
 80047b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f905 	bl	80049d6 <HAL_TIM_IC_CaptureCallback>
 80047cc:	e005      	b.n	80047da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f8f7 	bl	80049c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f908 	bl	80049ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d122      	bne.n	8004834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d11b      	bne.n	8004834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0204 	mvn.w	r2, #4
 8004804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f8db 	bl	80049d6 <HAL_TIM_IC_CaptureCallback>
 8004820:	e005      	b.n	800482e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8cd 	bl	80049c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f8de 	bl	80049ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b08      	cmp	r3, #8
 8004840:	d122      	bne.n	8004888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d11b      	bne.n	8004888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0208 	mvn.w	r2, #8
 8004858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2204      	movs	r2, #4
 800485e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f8b1 	bl	80049d6 <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f8a3 	bl	80049c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f8b4 	bl	80049ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b10      	cmp	r3, #16
 8004894:	d122      	bne.n	80048dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d11b      	bne.n	80048dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0210 	mvn.w	r2, #16
 80048ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2208      	movs	r2, #8
 80048b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f887 	bl	80049d6 <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f879 	bl	80049c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f88a 	bl	80049ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d10e      	bne.n	8004908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0201 	mvn.w	r2, #1
 8004900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f002 f970 	bl	8006be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d10e      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	2b80      	cmp	r3, #128	; 0x80
 8004922:	d107      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f914 	bl	8004b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004942:	d10e      	bne.n	8004962 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b80      	cmp	r3, #128	; 0x80
 8004950:	d107      	bne.n	8004962 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800495a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f907 	bl	8004b70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b40      	cmp	r3, #64	; 0x40
 800496e:	d10e      	bne.n	800498e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d107      	bne.n	800498e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f838 	bl	80049fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b20      	cmp	r3, #32
 800499a:	d10e      	bne.n	80049ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d107      	bne.n	80049ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f06f 0220 	mvn.w	r2, #32
 80049b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f8c7 	bl	8004b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a40      	ldr	r2, [pc, #256]	; (8004b28 <TIM_Base_SetConfig+0x114>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <TIM_Base_SetConfig+0x40>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a32:	d00f      	beq.n	8004a54 <TIM_Base_SetConfig+0x40>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a3d      	ldr	r2, [pc, #244]	; (8004b2c <TIM_Base_SetConfig+0x118>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00b      	beq.n	8004a54 <TIM_Base_SetConfig+0x40>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a3c      	ldr	r2, [pc, #240]	; (8004b30 <TIM_Base_SetConfig+0x11c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d007      	beq.n	8004a54 <TIM_Base_SetConfig+0x40>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a3b      	ldr	r2, [pc, #236]	; (8004b34 <TIM_Base_SetConfig+0x120>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_Base_SetConfig+0x40>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a3a      	ldr	r2, [pc, #232]	; (8004b38 <TIM_Base_SetConfig+0x124>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d108      	bne.n	8004a66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a2f      	ldr	r2, [pc, #188]	; (8004b28 <TIM_Base_SetConfig+0x114>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d01f      	beq.n	8004aae <TIM_Base_SetConfig+0x9a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a74:	d01b      	beq.n	8004aae <TIM_Base_SetConfig+0x9a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a2c      	ldr	r2, [pc, #176]	; (8004b2c <TIM_Base_SetConfig+0x118>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d017      	beq.n	8004aae <TIM_Base_SetConfig+0x9a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2b      	ldr	r2, [pc, #172]	; (8004b30 <TIM_Base_SetConfig+0x11c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <TIM_Base_SetConfig+0x9a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a2a      	ldr	r2, [pc, #168]	; (8004b34 <TIM_Base_SetConfig+0x120>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00f      	beq.n	8004aae <TIM_Base_SetConfig+0x9a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a29      	ldr	r2, [pc, #164]	; (8004b38 <TIM_Base_SetConfig+0x124>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00b      	beq.n	8004aae <TIM_Base_SetConfig+0x9a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a28      	ldr	r2, [pc, #160]	; (8004b3c <TIM_Base_SetConfig+0x128>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d007      	beq.n	8004aae <TIM_Base_SetConfig+0x9a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a27      	ldr	r2, [pc, #156]	; (8004b40 <TIM_Base_SetConfig+0x12c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d003      	beq.n	8004aae <TIM_Base_SetConfig+0x9a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a26      	ldr	r2, [pc, #152]	; (8004b44 <TIM_Base_SetConfig+0x130>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d108      	bne.n	8004ac0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a10      	ldr	r2, [pc, #64]	; (8004b28 <TIM_Base_SetConfig+0x114>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00f      	beq.n	8004b0c <TIM_Base_SetConfig+0xf8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a12      	ldr	r2, [pc, #72]	; (8004b38 <TIM_Base_SetConfig+0x124>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00b      	beq.n	8004b0c <TIM_Base_SetConfig+0xf8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a11      	ldr	r2, [pc, #68]	; (8004b3c <TIM_Base_SetConfig+0x128>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <TIM_Base_SetConfig+0xf8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a10      	ldr	r2, [pc, #64]	; (8004b40 <TIM_Base_SetConfig+0x12c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_Base_SetConfig+0xf8>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a0f      	ldr	r2, [pc, #60]	; (8004b44 <TIM_Base_SetConfig+0x130>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d103      	bne.n	8004b14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	615a      	str	r2, [r3, #20]
}
 8004b1a:	bf00      	nop
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40000400 	.word	0x40000400
 8004b30:	40000800 	.word	0x40000800
 8004b34:	40000c00 	.word	0x40000c00
 8004b38:	40013400 	.word	0x40013400
 8004b3c:	40014000 	.word	0x40014000
 8004b40:	40014400 	.word	0x40014400
 8004b44:	40014800 	.word	0x40014800

08004b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e040      	b.n	8004c18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f002 f9de 	bl	8006f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2224      	movs	r2, #36	; 0x24
 8004bb0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0201 	bic.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f8c0 	bl	8004d48 <UART_SetConfig>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e022      	b.n	8004c18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fc26 	bl	800542c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fcad 	bl	8005570 <UART_CheckIdleState>
 8004c16:	4603      	mov	r3, r0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08a      	sub	sp, #40	; 0x28
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	f040 8081 	bne.w	8004d3c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_UART_Transmit+0x26>
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e079      	b.n	8004d3e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_UART_Transmit+0x38>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e072      	b.n	8004d3e <HAL_UART_Transmit+0x11e>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2221      	movs	r2, #33	; 0x21
 8004c6a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004c6c:	f7fc f8a0 	bl	8000db0 <HAL_GetTick>
 8004c70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	88fa      	ldrh	r2, [r7, #6]
 8004c76:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	88fa      	ldrh	r2, [r7, #6]
 8004c7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8a:	d108      	bne.n	8004c9e <HAL_UART_Transmit+0x7e>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d104      	bne.n	8004c9e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	e003      	b.n	8004ca6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004cae:	e02d      	b.n	8004d0c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2180      	movs	r1, #128	; 0x80
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 fc9d 	bl	80055fa <UART_WaitOnFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e039      	b.n	8004d3e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10b      	bne.n	8004ce8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	881a      	ldrh	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cdc:	b292      	uxth	r2, r2
 8004cde:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	3302      	adds	r3, #2
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	e008      	b.n	8004cfa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	781a      	ldrb	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	b292      	uxth	r2, r2
 8004cf2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1cb      	bne.n	8004cb0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2140      	movs	r1, #64	; 0x40
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fc69 	bl	80055fa <UART_WaitOnFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e005      	b.n	8004d3e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	e000      	b.n	8004d3e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004d3c:	2302      	movs	r3, #2
  }
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d48:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004d4c:	b08a      	sub	sp, #40	; 0x28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	4bb8      	ldr	r3, [pc, #736]	; (8005060 <UART_SetConfig+0x318>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d86:	430b      	orrs	r3, r1
 8004d88:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4aae      	ldr	r2, [pc, #696]	; (8005064 <UART_SetConfig+0x31c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d004      	beq.n	8004dba <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db6:	4313      	orrs	r3, r2
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4aa5      	ldr	r2, [pc, #660]	; (8005068 <UART_SetConfig+0x320>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d126      	bne.n	8004e26 <UART_SetConfig+0xde>
 8004dd8:	4ba4      	ldr	r3, [pc, #656]	; (800506c <UART_SetConfig+0x324>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d81a      	bhi.n	8004e1c <UART_SetConfig+0xd4>
 8004de6:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <UART_SetConfig+0xa4>)
 8004de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dec:	08004dfd 	.word	0x08004dfd
 8004df0:	08004e0d 	.word	0x08004e0d
 8004df4:	08004e05 	.word	0x08004e05
 8004df8:	08004e15 	.word	0x08004e15
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e02:	e105      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004e04:	2302      	movs	r3, #2
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0a:	e101      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e12:	e0fd      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004e14:	2308      	movs	r3, #8
 8004e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e1a:	e0f9      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e22:	bf00      	nop
 8004e24:	e0f4      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a91      	ldr	r2, [pc, #580]	; (8005070 <UART_SetConfig+0x328>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d138      	bne.n	8004ea2 <UART_SetConfig+0x15a>
 8004e30:	4b8e      	ldr	r3, [pc, #568]	; (800506c <UART_SetConfig+0x324>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b0c      	cmp	r3, #12
 8004e3c:	d82c      	bhi.n	8004e98 <UART_SetConfig+0x150>
 8004e3e:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <UART_SetConfig+0xfc>)
 8004e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e44:	08004e79 	.word	0x08004e79
 8004e48:	08004e99 	.word	0x08004e99
 8004e4c:	08004e99 	.word	0x08004e99
 8004e50:	08004e99 	.word	0x08004e99
 8004e54:	08004e89 	.word	0x08004e89
 8004e58:	08004e99 	.word	0x08004e99
 8004e5c:	08004e99 	.word	0x08004e99
 8004e60:	08004e99 	.word	0x08004e99
 8004e64:	08004e81 	.word	0x08004e81
 8004e68:	08004e99 	.word	0x08004e99
 8004e6c:	08004e99 	.word	0x08004e99
 8004e70:	08004e99 	.word	0x08004e99
 8004e74:	08004e91 	.word	0x08004e91
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7e:	e0c7      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004e80:	2302      	movs	r3, #2
 8004e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e86:	e0c3      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8e:	e0bf      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004e90:	2308      	movs	r3, #8
 8004e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e96:	e0bb      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004e98:	2310      	movs	r3, #16
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9e:	bf00      	nop
 8004ea0:	e0b6      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a73      	ldr	r2, [pc, #460]	; (8005074 <UART_SetConfig+0x32c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d125      	bne.n	8004ef8 <UART_SetConfig+0x1b0>
 8004eac:	4b6f      	ldr	r3, [pc, #444]	; (800506c <UART_SetConfig+0x324>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004eb6:	2b10      	cmp	r3, #16
 8004eb8:	d011      	beq.n	8004ede <UART_SetConfig+0x196>
 8004eba:	2b10      	cmp	r3, #16
 8004ebc:	d802      	bhi.n	8004ec4 <UART_SetConfig+0x17c>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <UART_SetConfig+0x186>
 8004ec2:	e014      	b.n	8004eee <UART_SetConfig+0x1a6>
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d006      	beq.n	8004ed6 <UART_SetConfig+0x18e>
 8004ec8:	2b30      	cmp	r3, #48	; 0x30
 8004eca:	d00c      	beq.n	8004ee6 <UART_SetConfig+0x19e>
 8004ecc:	e00f      	b.n	8004eee <UART_SetConfig+0x1a6>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed4:	e09c      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004edc:	e098      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004ede:	2304      	movs	r3, #4
 8004ee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee4:	e094      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004ee6:	2308      	movs	r3, #8
 8004ee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eec:	e090      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004eee:	2310      	movs	r3, #16
 8004ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef4:	bf00      	nop
 8004ef6:	e08b      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a5e      	ldr	r2, [pc, #376]	; (8005078 <UART_SetConfig+0x330>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d125      	bne.n	8004f4e <UART_SetConfig+0x206>
 8004f02:	4b5a      	ldr	r3, [pc, #360]	; (800506c <UART_SetConfig+0x324>)
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d011      	beq.n	8004f34 <UART_SetConfig+0x1ec>
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d802      	bhi.n	8004f1a <UART_SetConfig+0x1d2>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <UART_SetConfig+0x1dc>
 8004f18:	e014      	b.n	8004f44 <UART_SetConfig+0x1fc>
 8004f1a:	2b80      	cmp	r3, #128	; 0x80
 8004f1c:	d006      	beq.n	8004f2c <UART_SetConfig+0x1e4>
 8004f1e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f20:	d00c      	beq.n	8004f3c <UART_SetConfig+0x1f4>
 8004f22:	e00f      	b.n	8004f44 <UART_SetConfig+0x1fc>
 8004f24:	2300      	movs	r3, #0
 8004f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f2a:	e071      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f32:	e06d      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004f34:	2304      	movs	r3, #4
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f3a:	e069      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004f3c:	2308      	movs	r3, #8
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f42:	e065      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004f44:	2310      	movs	r3, #16
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4a:	bf00      	nop
 8004f4c:	e060      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a4a      	ldr	r2, [pc, #296]	; (800507c <UART_SetConfig+0x334>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d129      	bne.n	8004fac <UART_SetConfig+0x264>
 8004f58:	4b44      	ldr	r3, [pc, #272]	; (800506c <UART_SetConfig+0x324>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f66:	d014      	beq.n	8004f92 <UART_SetConfig+0x24a>
 8004f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6c:	d802      	bhi.n	8004f74 <UART_SetConfig+0x22c>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <UART_SetConfig+0x23a>
 8004f72:	e016      	b.n	8004fa2 <UART_SetConfig+0x25a>
 8004f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f78:	d007      	beq.n	8004f8a <UART_SetConfig+0x242>
 8004f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f7e:	d00c      	beq.n	8004f9a <UART_SetConfig+0x252>
 8004f80:	e00f      	b.n	8004fa2 <UART_SetConfig+0x25a>
 8004f82:	2300      	movs	r3, #0
 8004f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f88:	e042      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f90:	e03e      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004f92:	2304      	movs	r3, #4
 8004f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f98:	e03a      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa0:	e036      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004fa2:	2310      	movs	r3, #16
 8004fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa8:	bf00      	nop
 8004faa:	e031      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a2c      	ldr	r2, [pc, #176]	; (8005064 <UART_SetConfig+0x31c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d129      	bne.n	800500a <UART_SetConfig+0x2c2>
 8004fb6:	4b2d      	ldr	r3, [pc, #180]	; (800506c <UART_SetConfig+0x324>)
 8004fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc4:	d014      	beq.n	8004ff0 <UART_SetConfig+0x2a8>
 8004fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fca:	d802      	bhi.n	8004fd2 <UART_SetConfig+0x28a>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d007      	beq.n	8004fe0 <UART_SetConfig+0x298>
 8004fd0:	e016      	b.n	8005000 <UART_SetConfig+0x2b8>
 8004fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd6:	d007      	beq.n	8004fe8 <UART_SetConfig+0x2a0>
 8004fd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fdc:	d00c      	beq.n	8004ff8 <UART_SetConfig+0x2b0>
 8004fde:	e00f      	b.n	8005000 <UART_SetConfig+0x2b8>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe6:	e013      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fee:	e00f      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff6:	e00b      	b.n	8005010 <UART_SetConfig+0x2c8>
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffe:	e007      	b.n	8005010 <UART_SetConfig+0x2c8>
 8005000:	2310      	movs	r3, #16
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005006:	bf00      	nop
 8005008:	e002      	b.n	8005010 <UART_SetConfig+0x2c8>
 800500a:	2310      	movs	r3, #16
 800500c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a13      	ldr	r2, [pc, #76]	; (8005064 <UART_SetConfig+0x31c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	f040 80fe 	bne.w	8005218 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800501c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005020:	2b08      	cmp	r3, #8
 8005022:	d837      	bhi.n	8005094 <UART_SetConfig+0x34c>
 8005024:	a201      	add	r2, pc, #4	; (adr r2, 800502c <UART_SetConfig+0x2e4>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	08005051 	.word	0x08005051
 8005030:	08005095 	.word	0x08005095
 8005034:	08005059 	.word	0x08005059
 8005038:	08005095 	.word	0x08005095
 800503c:	08005085 	.word	0x08005085
 8005040:	08005095 	.word	0x08005095
 8005044:	08005095 	.word	0x08005095
 8005048:	08005095 	.word	0x08005095
 800504c:	0800508d 	.word	0x0800508d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005050:	f7fe fd30 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 8005054:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005056:	e020      	b.n	800509a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005058:	4b09      	ldr	r3, [pc, #36]	; (8005080 <UART_SetConfig+0x338>)
 800505a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800505c:	e01d      	b.n	800509a <UART_SetConfig+0x352>
 800505e:	bf00      	nop
 8005060:	efff69f3 	.word	0xefff69f3
 8005064:	40008000 	.word	0x40008000
 8005068:	40013800 	.word	0x40013800
 800506c:	40021000 	.word	0x40021000
 8005070:	40004400 	.word	0x40004400
 8005074:	40004800 	.word	0x40004800
 8005078:	40004c00 	.word	0x40004c00
 800507c:	40005000 	.word	0x40005000
 8005080:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005084:	f7fe fc80 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 8005088:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800508a:	e006      	b.n	800509a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800508c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005090:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005092:	e002      	b.n	800509a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	76fb      	strb	r3, [r7, #27]
        break;
 8005098:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 81b9 	beq.w	8005414 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	4613      	mov	r3, r2
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	4413      	add	r3, r2
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d305      	bcc.n	80050be <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d902      	bls.n	80050c4 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	76fb      	strb	r3, [r7, #27]
 80050c2:	e1a7      	b.n	8005414 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80050c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	f200 8092 	bhi.w	80051f2 <UART_SetConfig+0x4aa>
 80050ce:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <UART_SetConfig+0x38c>)
 80050d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d4:	080050f9 	.word	0x080050f9
 80050d8:	080051f3 	.word	0x080051f3
 80050dc:	08005147 	.word	0x08005147
 80050e0:	080051f3 	.word	0x080051f3
 80050e4:	0800517b 	.word	0x0800517b
 80050e8:	080051f3 	.word	0x080051f3
 80050ec:	080051f3 	.word	0x080051f3
 80050f0:	080051f3 	.word	0x080051f3
 80050f4:	080051c9 	.word	0x080051c9
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80050f8:	f7fe fcdc 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 80050fc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4619      	mov	r1, r3
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	f04f 0400 	mov.w	r4, #0
 800510e:	0214      	lsls	r4, r2, #8
 8005110:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005114:	020b      	lsls	r3, r1, #8
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6852      	ldr	r2, [r2, #4]
 800511a:	0852      	lsrs	r2, r2, #1
 800511c:	4611      	mov	r1, r2
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	eb13 0b01 	adds.w	fp, r3, r1
 8005126:	eb44 0c02 	adc.w	ip, r4, r2
 800512a:	4658      	mov	r0, fp
 800512c:	4661      	mov	r1, ip
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f04f 0400 	mov.w	r4, #0
 8005136:	461a      	mov	r2, r3
 8005138:	4623      	mov	r3, r4
 800513a:	f7fb fc8f 	bl	8000a5c <__aeabi_uldivmod>
 800513e:	4603      	mov	r3, r0
 8005140:	460c      	mov	r4, r1
 8005142:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005144:	e058      	b.n	80051f8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	f04f 0400 	mov.w	r4, #0
 8005150:	49ae      	ldr	r1, [pc, #696]	; (800540c <UART_SetConfig+0x6c4>)
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	eb13 0b01 	adds.w	fp, r3, r1
 800515a:	eb44 0c02 	adc.w	ip, r4, r2
 800515e:	4658      	mov	r0, fp
 8005160:	4661      	mov	r1, ip
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f04f 0400 	mov.w	r4, #0
 800516a:	461a      	mov	r2, r3
 800516c:	4623      	mov	r3, r4
 800516e:	f7fb fc75 	bl	8000a5c <__aeabi_uldivmod>
 8005172:	4603      	mov	r3, r0
 8005174:	460c      	mov	r4, r1
 8005176:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005178:	e03e      	b.n	80051f8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800517a:	f7fe fc05 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 800517e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4619      	mov	r1, r3
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	f04f 0400 	mov.w	r4, #0
 8005190:	0214      	lsls	r4, r2, #8
 8005192:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005196:	020b      	lsls	r3, r1, #8
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6852      	ldr	r2, [r2, #4]
 800519c:	0852      	lsrs	r2, r2, #1
 800519e:	4611      	mov	r1, r2
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	eb13 0b01 	adds.w	fp, r3, r1
 80051a8:	eb44 0c02 	adc.w	ip, r4, r2
 80051ac:	4658      	mov	r0, fp
 80051ae:	4661      	mov	r1, ip
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f04f 0400 	mov.w	r4, #0
 80051b8:	461a      	mov	r2, r3
 80051ba:	4623      	mov	r3, r4
 80051bc:	f7fb fc4e 	bl	8000a5c <__aeabi_uldivmod>
 80051c0:	4603      	mov	r3, r0
 80051c2:	460c      	mov	r4, r1
 80051c4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80051c6:	e017      	b.n	80051f8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	f04f 0400 	mov.w	r4, #0
 80051d2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80051d6:	f144 0100 	adc.w	r1, r4, #0
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f04f 0400 	mov.w	r4, #0
 80051e2:	461a      	mov	r2, r3
 80051e4:	4623      	mov	r3, r4
 80051e6:	f7fb fc39 	bl	8000a5c <__aeabi_uldivmod>
 80051ea:	4603      	mov	r3, r0
 80051ec:	460c      	mov	r4, r1
 80051ee:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80051f0:	e002      	b.n	80051f8 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	76fb      	strb	r3, [r7, #27]
            break;
 80051f6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051fe:	d308      	bcc.n	8005212 <UART_SetConfig+0x4ca>
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005206:	d204      	bcs.n	8005212 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	60da      	str	r2, [r3, #12]
 8005210:	e100      	b.n	8005414 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	76fb      	strb	r3, [r7, #27]
 8005216:	e0fd      	b.n	8005414 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005220:	f040 8084 	bne.w	800532c <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8005224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005228:	2b08      	cmp	r3, #8
 800522a:	d85f      	bhi.n	80052ec <UART_SetConfig+0x5a4>
 800522c:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <UART_SetConfig+0x4ec>)
 800522e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005232:	bf00      	nop
 8005234:	08005259 	.word	0x08005259
 8005238:	08005279 	.word	0x08005279
 800523c:	08005299 	.word	0x08005299
 8005240:	080052ed 	.word	0x080052ed
 8005244:	080052b5 	.word	0x080052b5
 8005248:	080052ed 	.word	0x080052ed
 800524c:	080052ed 	.word	0x080052ed
 8005250:	080052ed 	.word	0x080052ed
 8005254:	080052d5 	.word	0x080052d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005258:	f7fe fc2c 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 800525c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	005a      	lsls	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	085b      	lsrs	r3, r3, #1
 8005268:	441a      	add	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	b29b      	uxth	r3, r3
 8005274:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005276:	e03c      	b.n	80052f2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005278:	f7fe fc32 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 800527c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	005a      	lsls	r2, r3, #1
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	441a      	add	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005292:	b29b      	uxth	r3, r3
 8005294:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005296:	e02c      	b.n	80052f2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80052a2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6852      	ldr	r2, [r2, #4]
 80052aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80052b2:	e01e      	b.n	80052f2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052b4:	f7fe fb68 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 80052b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	005a      	lsls	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	441a      	add	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80052d2:	e00e      	b.n	80052f2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	085b      	lsrs	r3, r3, #1
 80052da:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80052ea:	e002      	b.n	80052f2 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	76fb      	strb	r3, [r7, #27]
        break;
 80052f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2b0f      	cmp	r3, #15
 80052f6:	d916      	bls.n	8005326 <UART_SetConfig+0x5de>
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fe:	d212      	bcs.n	8005326 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f023 030f 	bic.w	r3, r3, #15
 8005308:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	085b      	lsrs	r3, r3, #1
 800530e:	b29b      	uxth	r3, r3
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	b29a      	uxth	r2, r3
 8005316:	89fb      	ldrh	r3, [r7, #14]
 8005318:	4313      	orrs	r3, r2
 800531a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	89fa      	ldrh	r2, [r7, #14]
 8005322:	60da      	str	r2, [r3, #12]
 8005324:	e076      	b.n	8005414 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	76fb      	strb	r3, [r7, #27]
 800532a:	e073      	b.n	8005414 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800532c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005330:	2b08      	cmp	r3, #8
 8005332:	d85c      	bhi.n	80053ee <UART_SetConfig+0x6a6>
 8005334:	a201      	add	r2, pc, #4	; (adr r2, 800533c <UART_SetConfig+0x5f4>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	08005361 	.word	0x08005361
 8005340:	0800537f 	.word	0x0800537f
 8005344:	0800539d 	.word	0x0800539d
 8005348:	080053ef 	.word	0x080053ef
 800534c:	080053b9 	.word	0x080053b9
 8005350:	080053ef 	.word	0x080053ef
 8005354:	080053ef 	.word	0x080053ef
 8005358:	080053ef 	.word	0x080053ef
 800535c:	080053d7 	.word	0x080053d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005360:	f7fe fba8 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 8005364:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	085a      	lsrs	r2, r3, #1
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	441a      	add	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	b29b      	uxth	r3, r3
 800537a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800537c:	e03a      	b.n	80053f4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800537e:	f7fe fbaf 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 8005382:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	085a      	lsrs	r2, r3, #1
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	441a      	add	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	fbb2 f3f3 	udiv	r3, r2, r3
 8005396:	b29b      	uxth	r3, r3
 8005398:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800539a:	e02b      	b.n	80053f4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	085b      	lsrs	r3, r3, #1
 80053a2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80053a6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6852      	ldr	r2, [r2, #4]
 80053ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80053b6:	e01d      	b.n	80053f4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b8:	f7fe fae6 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 80053bc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	085a      	lsrs	r2, r3, #1
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	441a      	add	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80053d4:	e00e      	b.n	80053f4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	085b      	lsrs	r3, r3, #1
 80053dc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80053ec:	e002      	b.n	80053f4 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	76fb      	strb	r3, [r7, #27]
        break;
 80053f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	2b0f      	cmp	r3, #15
 80053f8:	d90a      	bls.n	8005410 <UART_SetConfig+0x6c8>
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005400:	d206      	bcs.n	8005410 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	60da      	str	r2, [r3, #12]
 800540a:	e003      	b.n	8005414 <UART_SetConfig+0x6cc>
 800540c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005420:	7efb      	ldrb	r3, [r7, #27]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3728      	adds	r7, #40	; 0x28
 8005426:	46bd      	mov	sp, r7
 8005428:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800542c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	f003 0310 	and.w	r3, r3, #16
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01a      	beq.n	8005542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800552a:	d10a      	bne.n	8005542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	605a      	str	r2, [r3, #4]
  }
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af02      	add	r7, sp, #8
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800557e:	f7fb fc17 	bl	8000db0 <HAL_GetTick>
 8005582:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b08      	cmp	r3, #8
 8005590:	d10e      	bne.n	80055b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005592:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f82a 	bl	80055fa <UART_WaitOnFlagUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e020      	b.n	80055f2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d10e      	bne.n	80055dc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f814 	bl	80055fa <UART_WaitOnFlagUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e00a      	b.n	80055f2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	603b      	str	r3, [r7, #0]
 8005606:	4613      	mov	r3, r2
 8005608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800560a:	e05d      	b.n	80056c8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d059      	beq.n	80056c8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005614:	f7fb fbcc 	bl	8000db0 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	429a      	cmp	r2, r3
 8005622:	d302      	bcc.n	800562a <UART_WaitOnFlagUntilTimeout+0x30>
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d11b      	bne.n	8005662 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005638:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0201 	bic.w	r2, r2, #1
 8005648:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e042      	b.n	80056e8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d02b      	beq.n	80056c8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800567a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800567e:	d123      	bne.n	80056c8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005688:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005698:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2220      	movs	r2, #32
 80056ba:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e00f      	b.n	80056e8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69da      	ldr	r2, [r3, #28]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	4013      	ands	r3, r2
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	bf0c      	ite	eq
 80056d8:	2301      	moveq	r3, #1
 80056da:	2300      	movne	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	461a      	mov	r2, r3
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d092      	beq.n	800560c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056f0:	b084      	sub	sp, #16
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	f107 001c 	add.w	r0, r7, #28
 80056fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	2b01      	cmp	r3, #1
 8005706:	d122      	bne.n	800574e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800571c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005732:	2b01      	cmp	r3, #1
 8005734:	d105      	bne.n	8005742 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fa28 	bl	8005b98 <USB_CoreReset>
 8005748:	4603      	mov	r3, r0
 800574a:	73fb      	strb	r3, [r7, #15]
 800574c:	e01a      	b.n	8005784 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa1c 	bl	8005b98 <USB_CoreReset>
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	639a      	str	r2, [r3, #56]	; 0x38
 8005776:	e005      	b.n	8005784 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005790:	b004      	add	sp, #16
 8005792:	4770      	bx	lr

08005794 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f023 0201 	bic.w	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b082      	sub	sp, #8
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	460b      	mov	r3, r1
 80057c0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d106      	bne.n	80057e2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	60da      	str	r2, [r3, #12]
 80057e0:	e00b      	b.n	80057fa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d106      	bne.n	80057f6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	60da      	str	r2, [r3, #12]
 80057f4:	e001      	b.n	80057fa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e003      	b.n	8005802 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80057fa:	2032      	movs	r0, #50	; 0x32
 80057fc:	f7fb fae4 	bl	8000dc8 <HAL_Delay>

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800580c:	b084      	sub	sp, #16
 800580e:	b580      	push	{r7, lr}
 8005810:	b086      	sub	sp, #24
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800581a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005826:	2300      	movs	r3, #0
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	e009      	b.n	8005840 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	3340      	adds	r3, #64	; 0x40
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	2200      	movs	r2, #0
 8005838:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	3301      	adds	r3, #1
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2b0e      	cmp	r3, #14
 8005844:	d9f2      	bls.n	800582c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005848:	2b00      	cmp	r3, #0
 800584a:	d11c      	bne.n	8005886 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800585a:	f043 0302 	orr.w	r3, r3, #2
 800585e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e005      	b.n	8005892 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005898:	461a      	mov	r2, r3
 800589a:	2300      	movs	r3, #0
 800589c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a4:	4619      	mov	r1, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ac:	461a      	mov	r2, r3
 80058ae:	680b      	ldr	r3, [r1, #0]
 80058b0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058b2:	2103      	movs	r1, #3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f93d 	bl	8005b34 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058ba:	2110      	movs	r1, #16
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f8f1 	bl	8005aa4 <USB_FlushTxFifo>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f90f 	bl	8005af0 <USB_FlushRxFifo>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	461a      	mov	r2, r3
 80058e4:	2300      	movs	r3, #0
 80058e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ee:	461a      	mov	r2, r3
 80058f0:	2300      	movs	r3, #0
 80058f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fa:	461a      	mov	r2, r3
 80058fc:	2300      	movs	r3, #0
 80058fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005900:	2300      	movs	r3, #0
 8005902:	613b      	str	r3, [r7, #16]
 8005904:	e043      	b.n	800598e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800591c:	d118      	bne.n	8005950 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10a      	bne.n	800593a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005930:	461a      	mov	r2, r3
 8005932:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	e013      	b.n	8005962 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005946:	461a      	mov	r2, r3
 8005948:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	e008      	b.n	8005962 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	461a      	mov	r2, r3
 800595e:	2300      	movs	r3, #0
 8005960:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596e:	461a      	mov	r2, r3
 8005970:	2300      	movs	r3, #0
 8005972:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	461a      	mov	r2, r3
 8005982:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005986:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	3301      	adds	r3, #1
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	429a      	cmp	r2, r3
 8005994:	d3b7      	bcc.n	8005906 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005996:	2300      	movs	r3, #0
 8005998:	613b      	str	r3, [r7, #16]
 800599a:	e043      	b.n	8005a24 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b2:	d118      	bne.n	80059e6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c6:	461a      	mov	r2, r3
 80059c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	e013      	b.n	80059f8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059dc:	461a      	mov	r2, r3
 80059de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	e008      	b.n	80059f8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	461a      	mov	r2, r3
 80059f4:	2300      	movs	r3, #0
 80059f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a04:	461a      	mov	r2, r3
 8005a06:	2300      	movs	r3, #0
 8005a08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a16:	461a      	mov	r2, r3
 8005a18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	3301      	adds	r3, #1
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d3b7      	bcc.n	800599c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	f043 0210 	orr.w	r2, r3, #16
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	4b10      	ldr	r3, [pc, #64]	; (8005aa0 <USB_DevInit+0x294>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d005      	beq.n	8005a78 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	f043 0208 	orr.w	r2, r3, #8
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d107      	bne.n	8005a8e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a86:	f043 0304 	orr.w	r3, r3, #4
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a9a:	b004      	add	sp, #16
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	803c3800 	.word	0x803c3800

08005aa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	019b      	lsls	r3, r3, #6
 8005ab6:	f043 0220 	orr.w	r2, r3, #32
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4a09      	ldr	r2, [pc, #36]	; (8005aec <USB_FlushTxFifo+0x48>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d901      	bls.n	8005ad0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e006      	b.n	8005ade <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d0f0      	beq.n	8005abe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	00030d40 	.word	0x00030d40

08005af0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2210      	movs	r2, #16
 8005b00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3301      	adds	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4a09      	ldr	r2, [pc, #36]	; (8005b30 <USB_FlushRxFifo+0x40>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d901      	bls.n	8005b14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e006      	b.n	8005b22 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d0f0      	beq.n	8005b02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	00030d40 	.word	0x00030d40

08005b34 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	68f9      	ldr	r1, [r7, #12]
 8005b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b54:	4313      	orrs	r3, r2
 8005b56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b80:	f043 0302 	orr.w	r3, r3, #2
 8005b84:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005b86:	2003      	movs	r0, #3
 8005b88:	f7fb f91e 	bl	8000dc8 <HAL_Delay>

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4a13      	ldr	r2, [pc, #76]	; (8005bfc <USB_CoreReset+0x64>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d901      	bls.n	8005bb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e01b      	b.n	8005bee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	daf2      	bge.n	8005ba4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f043 0201 	orr.w	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4a09      	ldr	r2, [pc, #36]	; (8005bfc <USB_CoreReset+0x64>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d901      	bls.n	8005be0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e006      	b.n	8005bee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d0f0      	beq.n	8005bce <USB_CoreReset+0x36>

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	00030d40 	.word	0x00030d40

08005c00 <ansiEscapePrint>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ansiEscapePrint(uint8_t x, uint8_t y, char * color, char * str)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b09a      	sub	sp, #104	; 0x68
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	60ba      	str	r2, [r7, #8]
 8005c08:	607b      	str	r3, [r7, #4]
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	73fb      	strb	r3, [r7, #15]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	73bb      	strb	r3, [r7, #14]
  char buf[80];
  sprintf(buf, "\033[%d;%dH\033[%sm%s", y, x, color, str);
 8005c12:	7bba      	ldrb	r2, [r7, #14]
 8005c14:	7bf9      	ldrb	r1, [r7, #15]
 8005c16:	f107 0010 	add.w	r0, r7, #16
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	9301      	str	r3, [sp, #4]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	460b      	mov	r3, r1
 8005c24:	4915      	ldr	r1, [pc, #84]	; (8005c7c <ansiEscapePrint+0x7c>)
 8005c26:	f001 fbf1 	bl	800740c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), 1000);
 8005c2a:	f107 0310 	add.w	r3, r7, #16
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fa face 	bl	80001d0 <strlen>
 8005c34:	4603      	mov	r3, r0
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	f107 0110 	add.w	r1, r7, #16
 8005c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c40:	480f      	ldr	r0, [pc, #60]	; (8005c80 <ansiEscapePrint+0x80>)
 8005c42:	f7fe ffed 	bl	8004c20 <HAL_UART_Transmit>
  sprintf(buf, "\033[1D");
 8005c46:	f107 0310 	add.w	r3, r7, #16
 8005c4a:	4a0e      	ldr	r2, [pc, #56]	; (8005c84 <ansiEscapePrint+0x84>)
 8005c4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c50:	6018      	str	r0, [r3, #0]
 8005c52:	3304      	adds	r3, #4
 8005c54:	7019      	strb	r1, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), 1000);
 8005c56:	f107 0310 	add.w	r3, r7, #16
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fa fab8 	bl	80001d0 <strlen>
 8005c60:	4603      	mov	r3, r0
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	f107 0110 	add.w	r1, r7, #16
 8005c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c6c:	4804      	ldr	r0, [pc, #16]	; (8005c80 <ansiEscapePrint+0x80>)
 8005c6e:	f7fe ffd7 	bl	8004c20 <HAL_UART_Transmit>
}
 8005c72:	bf00      	nop
 8005c74:	3760      	adds	r7, #96	; 0x60
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	08007c30 	.word	0x08007c30
 8005c80:	20000698 	.word	0x20000698
 8005c84:	08007c40 	.word	0x08007c40

08005c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c88:	b590      	push	{r4, r7, lr}
 8005c8a:	b0d1      	sub	sp, #324	; 0x144
 8005c8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c8e:	f7fb f865 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c92:	f000 fb89 	bl	80063a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c96:	f000 fe11 	bl	80068bc <MX_GPIO_Init>
  MX_ADC1_Init();
 8005c9a:	f000 fc2b 	bl	80064f4 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8005c9e:	f000 fca3 	bl	80065e8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8005ca2:	f000 fcd9 	bl	8006658 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8005ca6:	f000 fd17 	bl	80066d8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8005caa:	f000 fd3b 	bl	8006724 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8005cae:	f000 fd77 	bl	80067a0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8005cb2:	f000 fda5 	bl	8006800 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8005cb6:	f000 fdd3 	bl	8006860 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t adcSelector;
  uint32_t selectorSw;
  uint32_t selectMode = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  uint32_t enableBrew = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  uint32_t adcLevel;
  uint32_t adcTemperature;
  uint32_t tempSetpoint=10;
 8005cc6:	230a      	movs	r3, #10
 8005cc8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  uint32_t levelSetpoint=0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

  char buf[256];

  int16_t y = 20;
 8005cd2:	2314      	movs	r3, #20
 8005cd4:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
  int16_t old_y = y;
 8005cd8:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8005cdc:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c

  ADC_ChannelConfTypeDef sConfig;
      sConfig.Channel = ADC_CHANNEL_1;
 8005ce0:	1d3b      	adds	r3, r7, #4
 8005ce2:	4abb      	ldr	r2, [pc, #748]	; (8005fd0 <main+0x348>)
 8005ce4:	601a      	str	r2, [r3, #0]
      sConfig.Rank = ADC_REGULAR_RANK_1;
 8005ce6:	1d3b      	adds	r3, r7, #4
 8005ce8:	2206      	movs	r2, #6
 8005cea:	605a      	str	r2, [r3, #4]
      sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8005cec:	1d3b      	adds	r3, r7, #4
 8005cee:	2200      	movs	r2, #0
 8005cf0:	609a      	str	r2, [r3, #8]
      sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005cf2:	1d3b      	adds	r3, r7, #4
 8005cf4:	227f      	movs	r2, #127	; 0x7f
 8005cf6:	60da      	str	r2, [r3, #12]
      sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005cf8:	1d3b      	adds	r3, r7, #4
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	611a      	str	r2, [r3, #16]
      sConfig.Offset = 0;
 8005cfe:	1d3b      	adds	r3, r7, #4
 8005d00:	2200      	movs	r2, #0
 8005d02:	615a      	str	r2, [r3, #20]

  snprintf(buf, sizeof(buf), "\033[2J");
 8005d04:	f107 031c 	add.w	r3, r7, #28
 8005d08:	4ab2      	ldr	r2, [pc, #712]	; (8005fd4 <main+0x34c>)
 8005d0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d0e:	6018      	str	r0, [r3, #0]
 8005d10:	3304      	adds	r3, #4
 8005d12:	7019      	strb	r1, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), 1000);
 8005d14:	f107 031c 	add.w	r3, r7, #28
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fa fa59 	bl	80001d0 <strlen>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	f107 011c 	add.w	r1, r7, #28
 8005d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d2a:	48ab      	ldr	r0, [pc, #684]	; (8005fd8 <main+0x350>)
 8005d2c:	f7fe ff78 	bl	8004c20 <HAL_UART_Transmit>
  ansiEscapePrint(0, 1, BLU_ON_BLK,  "Welcome to Embedded Real-Time Operating Systems (RTOS)");
 8005d30:	4baa      	ldr	r3, [pc, #680]	; (8005fdc <main+0x354>)
 8005d32:	4aab      	ldr	r2, [pc, #684]	; (8005fe0 <main+0x358>)
 8005d34:	2101      	movs	r1, #1
 8005d36:	2000      	movs	r0, #0
 8005d38:	f7ff ff62 	bl	8005c00 <ansiEscapePrint>
  ansiEscapePrint(0, 2, BLU_ON_BLK,  "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
 8005d3c:	4ba9      	ldr	r3, [pc, #676]	; (8005fe4 <main+0x35c>)
 8005d3e:	4aa8      	ldr	r2, [pc, #672]	; (8005fe0 <main+0x358>)
 8005d40:	2102      	movs	r1, #2
 8005d42:	2000      	movs	r0, #0
 8005d44:	f7ff ff5c 	bl	8005c00 <ansiEscapePrint>
  ansiEscapePrint(0, 3, BLU_ON_BLK,  "~            Assignment: Final Project               ~");
 8005d48:	4ba7      	ldr	r3, [pc, #668]	; (8005fe8 <main+0x360>)
 8005d4a:	4aa5      	ldr	r2, [pc, #660]	; (8005fe0 <main+0x358>)
 8005d4c:	2103      	movs	r1, #3
 8005d4e:	2000      	movs	r0, #0
 8005d50:	f7ff ff56 	bl	8005c00 <ansiEscapePrint>
  ansiEscapePrint(0, 4, BLU_ON_BLK,  "~         Course Number: ECE-40290                   ~");
 8005d54:	4ba5      	ldr	r3, [pc, #660]	; (8005fec <main+0x364>)
 8005d56:	4aa2      	ldr	r2, [pc, #648]	; (8005fe0 <main+0x358>)
 8005d58:	2104      	movs	r1, #4
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f7ff ff50 	bl	8005c00 <ansiEscapePrint>
  ansiEscapePrint(0, 5, BLU_ON_BLK,  "~            Section ID: 146369                      ~");
 8005d60:	4ba3      	ldr	r3, [pc, #652]	; (8005ff0 <main+0x368>)
 8005d62:	4a9f      	ldr	r2, [pc, #636]	; (8005fe0 <main+0x358>)
 8005d64:	2105      	movs	r1, #5
 8005d66:	2000      	movs	r0, #0
 8005d68:	f7ff ff4a 	bl	8005c00 <ansiEscapePrint>
  ansiEscapePrint(0, 6, BLU_ON_BLK,  "~          Student Name: Chris Isabelle              ~");
 8005d6c:	4ba1      	ldr	r3, [pc, #644]	; (8005ff4 <main+0x36c>)
 8005d6e:	4a9c      	ldr	r2, [pc, #624]	; (8005fe0 <main+0x358>)
 8005d70:	2106      	movs	r1, #6
 8005d72:	2000      	movs	r0, #0
 8005d74:	f7ff ff44 	bl	8005c00 <ansiEscapePrint>
  ansiEscapePrint(0, 7, BLU_ON_BLK,  "~                   SID: U01136665                   ~");
 8005d78:	4b9f      	ldr	r3, [pc, #636]	; (8005ff8 <main+0x370>)
 8005d7a:	4a99      	ldr	r2, [pc, #612]	; (8005fe0 <main+0x358>)
 8005d7c:	2107      	movs	r1, #7
 8005d7e:	2000      	movs	r0, #0
 8005d80:	f7ff ff3e 	bl	8005c00 <ansiEscapePrint>
  ansiEscapePrint(0, 8, BLU_ON_BLK,  "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
 8005d84:	4b97      	ldr	r3, [pc, #604]	; (8005fe4 <main+0x35c>)
 8005d86:	4a96      	ldr	r2, [pc, #600]	; (8005fe0 <main+0x358>)
 8005d88:	2108      	movs	r1, #8
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	f7ff ff38 	bl	8005c00 <ansiEscapePrint>

  ansiEscapePrint(4, 10, YEL_ON_BLK,  "  Coffee Level (oz)");
 8005d90:	4b9a      	ldr	r3, [pc, #616]	; (8005ffc <main+0x374>)
 8005d92:	4a9b      	ldr	r2, [pc, #620]	; (8006000 <main+0x378>)
 8005d94:	210a      	movs	r1, #10
 8005d96:	2004      	movs	r0, #4
 8005d98:	f7ff ff32 	bl	8005c00 <ansiEscapePrint>
  ansiEscapePrint(16, 11, YEL_ON_BLK,  "   Set:");
 8005d9c:	4b99      	ldr	r3, [pc, #612]	; (8006004 <main+0x37c>)
 8005d9e:	4a98      	ldr	r2, [pc, #608]	; (8006000 <main+0x378>)
 8005da0:	210b      	movs	r1, #11
 8005da2:	2010      	movs	r0, #16
 8005da4:	f7ff ff2c 	bl	8005c00 <ansiEscapePrint>
  ansiEscapePrint(24, 11, RED_ON_BLK,  "unknown");
 8005da8:	4b97      	ldr	r3, [pc, #604]	; (8006008 <main+0x380>)
 8005daa:	4a98      	ldr	r2, [pc, #608]	; (800600c <main+0x384>)
 8005dac:	210b      	movs	r1, #11
 8005dae:	2018      	movs	r0, #24
 8005db0:	f7ff ff26 	bl	8005c00 <ansiEscapePrint>
  ansiEscapePrint(16, 12, YEL_ON_BLK,  "Actual:");
 8005db4:	4b96      	ldr	r3, [pc, #600]	; (8006010 <main+0x388>)
 8005db6:	4a92      	ldr	r2, [pc, #584]	; (8006000 <main+0x378>)
 8005db8:	210c      	movs	r1, #12
 8005dba:	2010      	movs	r0, #16
 8005dbc:	f7ff ff20 	bl	8005c00 <ansiEscapePrint>

  ansiEscapePrint(4, 14, YEL_ON_BLK,  "  Coffee Temperature (degC)");
 8005dc0:	4b94      	ldr	r3, [pc, #592]	; (8006014 <main+0x38c>)
 8005dc2:	4a8f      	ldr	r2, [pc, #572]	; (8006000 <main+0x378>)
 8005dc4:	210e      	movs	r1, #14
 8005dc6:	2004      	movs	r0, #4
 8005dc8:	f7ff ff1a 	bl	8005c00 <ansiEscapePrint>
  ansiEscapePrint(16, 15, YEL_ON_BLK,  "   Set:");
 8005dcc:	4b8d      	ldr	r3, [pc, #564]	; (8006004 <main+0x37c>)
 8005dce:	4a8c      	ldr	r2, [pc, #560]	; (8006000 <main+0x378>)
 8005dd0:	210f      	movs	r1, #15
 8005dd2:	2010      	movs	r0, #16
 8005dd4:	f7ff ff14 	bl	8005c00 <ansiEscapePrint>
  ansiEscapePrint(24, 15, RED_ON_BLK,  "unknown");
 8005dd8:	4b8b      	ldr	r3, [pc, #556]	; (8006008 <main+0x380>)
 8005dda:	4a8c      	ldr	r2, [pc, #560]	; (800600c <main+0x384>)
 8005ddc:	210f      	movs	r1, #15
 8005dde:	2018      	movs	r0, #24
 8005de0:	f7ff ff0e 	bl	8005c00 <ansiEscapePrint>
  ansiEscapePrint(16, 16, YEL_ON_BLK,  "Actual:");
 8005de4:	4b8a      	ldr	r3, [pc, #552]	; (8006010 <main+0x388>)
 8005de6:	4a86      	ldr	r2, [pc, #536]	; (8006000 <main+0x378>)
 8005de8:	2110      	movs	r1, #16
 8005dea:	2010      	movs	r0, #16
 8005dec:	f7ff ff08 	bl	8005c00 <ansiEscapePrint>

  ansiEscapePrint(4, 18, YEL_ON_BLK,  "  Start Brew");
 8005df0:	4b89      	ldr	r3, [pc, #548]	; (8006018 <main+0x390>)
 8005df2:	4a83      	ldr	r2, [pc, #524]	; (8006000 <main+0x378>)
 8005df4:	2112      	movs	r1, #18
 8005df6:	2004      	movs	r0, #4
 8005df8:	f7ff ff02 	bl	8005c00 <ansiEscapePrint>
  ansiEscapePrint(4, 20, GRN_ON_BLK,  ">>Use Joy-Stick to Select");
 8005dfc:	4b87      	ldr	r3, [pc, #540]	; (800601c <main+0x394>)
 8005dfe:	4a88      	ldr	r2, [pc, #544]	; (8006020 <main+0x398>)
 8005e00:	2114      	movs	r1, #20
 8005e02:	2004      	movs	r0, #4
 8005e04:	f7ff fefc 	bl	8005c00 <ansiEscapePrint>

  SET_WARM_MODE(0);
 8005e08:	2201      	movs	r2, #1
 8005e0a:	2110      	movs	r1, #16
 8005e0c:	4885      	ldr	r0, [pc, #532]	; (8006024 <main+0x39c>)
 8005e0e:	f7fc fcfd 	bl	800280c <HAL_GPIO_WritePin>
  SET_BREW_MODE(0);
 8005e12:	2201      	movs	r2, #1
 8005e14:	2120      	movs	r1, #32
 8005e16:	4883      	ldr	r0, [pc, #524]	; (8006024 <main+0x39c>)
 8005e18:	f7fc fcf8 	bl	800280c <HAL_GPIO_WritePin>

  while (1)
  {
    if(!enableBrew)
 8005e1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f040 81b9 	bne.w	8006198 <main+0x510>
    {
      selectorSw = GET_SELECTOR_SW;
 8005e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e2a:	487e      	ldr	r0, [pc, #504]	; (8006024 <main+0x39c>)
 8005e2c:	f7fc fcd6 	bl	80027dc <HAL_GPIO_ReadPin>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	bf0c      	ite	eq
 8005e36:	2301      	moveq	r3, #1
 8005e38:	2300      	movne	r3, #0
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

      sConfig.Channel = ADC_CHANNEL_1;
 8005e40:	1d3b      	adds	r3, r7, #4
 8005e42:	4a63      	ldr	r2, [pc, #396]	; (8005fd0 <main+0x348>)
 8005e44:	601a      	str	r2, [r3, #0]
      HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8005e46:	1d3b      	adds	r3, r7, #4
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4877      	ldr	r0, [pc, #476]	; (8006028 <main+0x3a0>)
 8005e4c:	f7fb fca0 	bl	8001790 <HAL_ADC_ConfigChannel>
      HAL_ADC_Start(&hadc1);
 8005e50:	4875      	ldr	r0, [pc, #468]	; (8006028 <main+0x3a0>)
 8005e52:	f7fb fb05 	bl	8001460 <HAL_ADC_Start>
      while(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY)!=HAL_OK);
 8005e56:	bf00      	nop
 8005e58:	f04f 31ff 	mov.w	r1, #4294967295
 8005e5c:	4872      	ldr	r0, [pc, #456]	; (8006028 <main+0x3a0>)
 8005e5e:	f7fb fbb9 	bl	80015d4 <HAL_ADC_PollForConversion>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1f7      	bne.n	8005e58 <main+0x1d0>
      adcSelector = HAL_ADC_GetValue(&hadc1);
 8005e68:	486f      	ldr	r0, [pc, #444]	; (8006028 <main+0x3a0>)
 8005e6a:	f7fb fc83 	bl	8001774 <HAL_ADC_GetValue>
 8005e6e:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

      y += (((int16_t)adcSelector)-1790)/512;
 8005e72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e76:	b21b      	sxth	r3, r3
 8005e78:	f2a3 63fe 	subw	r3, r3, #1790	; 0x6fe
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	da01      	bge.n	8005e84 <main+0x1fc>
 8005e80:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005e84:	125b      	asrs	r3, r3, #9
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8005e8c:	4413      	add	r3, r2
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
      y=y>0xf?0xf:y;
 8005e94:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 8005e98:	2b0f      	cmp	r3, #15
 8005e9a:	bfa8      	it	ge
 8005e9c:	230f      	movge	r3, #15
 8005e9e:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
      y=y<0?0:y;
 8005ea2:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 8005ea6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005eaa:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e

      if(selectorSw)
 8005eae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d04f      	beq.n	8005f56 <main+0x2ce>
      {
        if(selectMode)
 8005eb6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00c      	beq.n	8005ed8 <main+0x250>
        {
          selectMode = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
          y=0xc;
 8005ec4:	230c      	movs	r3, #12
 8005ec6:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
          ansiEscapePrint(4, 20, GRN_ON_BLK,  ">>Use Joy-Stick to Select ");
 8005eca:	4b58      	ldr	r3, [pc, #352]	; (800602c <main+0x3a4>)
 8005ecc:	4a54      	ldr	r2, [pc, #336]	; (8006020 <main+0x398>)
 8005ece:	2114      	movs	r1, #20
 8005ed0:	2004      	movs	r0, #4
 8005ed2:	f7ff fe95 	bl	8005c00 <ansiEscapePrint>
 8005ed6:	e03e      	b.n	8005f56 <main+0x2ce>
        }
        else
        {
          switch(y&0xc)
 8005ed8:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8005edc:	f003 030c 	and.w	r3, r3, #12
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d00b      	beq.n	8005efc <main+0x274>
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d011      	beq.n	8005f0c <main+0x284>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d134      	bne.n	8005f56 <main+0x2ce>
          {
            case(0x0):  selectMode = SELECT_SET_LEVEL;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                        HAL_Delay(500);
 8005ef2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ef6:	f7fa ff67 	bl	8000dc8 <HAL_Delay>
                        continue;
 8005efa:	e21e      	b.n	800633a <main+0x6b2>
            case(0x4):  selectMode = SELECT_SET_TEMPERATURE;
 8005efc:	2302      	movs	r3, #2
 8005efe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                        HAL_Delay(500);
 8005f02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f06:	f7fa ff5f 	bl	8000dc8 <HAL_Delay>
                        continue;
 8005f0a:	e216      	b.n	800633a <main+0x6b2>
            case(0x8):  selectMode = 0;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                        enableBrew = 1;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
                        ansiEscapePrint(4, 18, YEL_ON_BLK,  "  Start Brew");
 8005f18:	4b3f      	ldr	r3, [pc, #252]	; (8006018 <main+0x390>)
 8005f1a:	4a39      	ldr	r2, [pc, #228]	; (8006000 <main+0x378>)
 8005f1c:	2112      	movs	r1, #18
 8005f1e:	2004      	movs	r0, #4
 8005f20:	f7ff fe6e 	bl	8005c00 <ansiEscapePrint>
                        ansiEscapePrint(6, 24, GRN_ON_BLK,  "~~~~~~~~~~~~~~~~~~~~~~~~~~~");
 8005f24:	4b42      	ldr	r3, [pc, #264]	; (8006030 <main+0x3a8>)
 8005f26:	4a3e      	ldr	r2, [pc, #248]	; (8006020 <main+0x398>)
 8005f28:	2118      	movs	r1, #24
 8005f2a:	2006      	movs	r0, #6
 8005f2c:	f7ff fe68 	bl	8005c00 <ansiEscapePrint>
                        ansiEscapePrint(6, 25, GRN_ON_BLK,  "~    Coffee Brew :        ~");
 8005f30:	4b40      	ldr	r3, [pc, #256]	; (8006034 <main+0x3ac>)
 8005f32:	4a3b      	ldr	r2, [pc, #236]	; (8006020 <main+0x398>)
 8005f34:	2119      	movs	r1, #25
 8005f36:	2006      	movs	r0, #6
 8005f38:	f7ff fe62 	bl	8005c00 <ansiEscapePrint>
                        ansiEscapePrint(6, 26, GRN_ON_BLK,  "~  Coffee Warmer :        ~");
 8005f3c:	4b3e      	ldr	r3, [pc, #248]	; (8006038 <main+0x3b0>)
 8005f3e:	4a38      	ldr	r2, [pc, #224]	; (8006020 <main+0x398>)
 8005f40:	211a      	movs	r1, #26
 8005f42:	2006      	movs	r0, #6
 8005f44:	f7ff fe5c 	bl	8005c00 <ansiEscapePrint>
                        ansiEscapePrint(6, 27, GRN_ON_BLK,  "~~~~~~~~~~~~~~~~~~~~~~~~~~~");
 8005f48:	4b39      	ldr	r3, [pc, #228]	; (8006030 <main+0x3a8>)
 8005f4a:	4a35      	ldr	r2, [pc, #212]	; (8006020 <main+0x398>)
 8005f4c:	211b      	movs	r1, #27
 8005f4e:	2006      	movs	r0, #6
 8005f50:	f7ff fe56 	bl	8005c00 <ansiEscapePrint>
                        continue;
 8005f54:	e1f1      	b.n	800633a <main+0x6b2>
          }
        }
      }

      switch(selectMode)
 8005f56:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d002      	beq.n	8005f64 <main+0x2dc>
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d06e      	beq.n	8006040 <main+0x3b8>
 8005f62:	e0b3      	b.n	80060cc <main+0x444>
      {
        case(SELECT_SET_LEVEL):
            if(adcSelector > 3096)
 8005f64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f68:	f640 4218 	movw	r2, #3096	; 0xc18
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d904      	bls.n	8005f7a <main+0x2f2>
              levelSetpoint--;
 8005f70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f74:	3b01      	subs	r3, #1
 8005f76:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            if(adcSelector < 1024)
 8005f7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f82:	d204      	bcs.n	8005f8e <main+0x306>
              levelSetpoint++;
 8005f84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f88:	3301      	adds	r3, #1
 8005f8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            if(levelSetpoint > 20)
 8005f8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f92:	2b14      	cmp	r3, #20
 8005f94:	d902      	bls.n	8005f9c <main+0x314>
              levelSetpoint=20;
 8005f96:	2314      	movs	r3, #20
 8005f98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            if(levelSetpoint < 4)
 8005f9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d802      	bhi.n	8005faa <main+0x322>
              levelSetpoint=4;
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sprintf(buf, "%li oz    ", levelSetpoint);
 8005faa:	f107 031c 	add.w	r3, r7, #28
 8005fae:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005fb2:	4922      	ldr	r1, [pc, #136]	; (800603c <main+0x3b4>)
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f001 fa29 	bl	800740c <siprintf>
            ansiEscapePrint(24, 11, GRN_ON_BLK,  buf);
 8005fba:	f107 031c 	add.w	r3, r7, #28
 8005fbe:	4a18      	ldr	r2, [pc, #96]	; (8006020 <main+0x398>)
 8005fc0:	210b      	movs	r1, #11
 8005fc2:	2018      	movs	r0, #24
 8005fc4:	f7ff fe1c 	bl	8005c00 <ansiEscapePrint>
            HAL_Delay(250);
 8005fc8:	20fa      	movs	r0, #250	; 0xfa
 8005fca:	f7fa fefd 	bl	8000dc8 <HAL_Delay>
            continue;
 8005fce:	e1b4      	b.n	800633a <main+0x6b2>
 8005fd0:	04300002 	.word	0x04300002
 8005fd4:	08007c48 	.word	0x08007c48
 8005fd8:	20000698 	.word	0x20000698
 8005fdc:	08007c50 	.word	0x08007c50
 8005fe0:	08007c88 	.word	0x08007c88
 8005fe4:	08007c90 	.word	0x08007c90
 8005fe8:	08007cc8 	.word	0x08007cc8
 8005fec:	08007d00 	.word	0x08007d00
 8005ff0:	08007d38 	.word	0x08007d38
 8005ff4:	08007d70 	.word	0x08007d70
 8005ff8:	08007da8 	.word	0x08007da8
 8005ffc:	08007de0 	.word	0x08007de0
 8006000:	08007df4 	.word	0x08007df4
 8006004:	08007dfc 	.word	0x08007dfc
 8006008:	08007e04 	.word	0x08007e04
 800600c:	08007e0c 	.word	0x08007e0c
 8006010:	08007e14 	.word	0x08007e14
 8006014:	08007e1c 	.word	0x08007e1c
 8006018:	08007e38 	.word	0x08007e38
 800601c:	08007e48 	.word	0x08007e48
 8006020:	08007e64 	.word	0x08007e64
 8006024:	48000800 	.word	0x48000800
 8006028:	20000634 	.word	0x20000634
 800602c:	08007e6c 	.word	0x08007e6c
 8006030:	08007e88 	.word	0x08007e88
 8006034:	08007ea4 	.word	0x08007ea4
 8006038:	08007ec0 	.word	0x08007ec0
 800603c:	08007edc 	.word	0x08007edc
            break;
        case(SELECT_SET_TEMPERATURE):
            if(adcSelector > 3096)
 8006040:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006044:	f640 4218 	movw	r2, #3096	; 0xc18
 8006048:	4293      	cmp	r3, r2
 800604a:	d904      	bls.n	8006056 <main+0x3ce>
              tempSetpoint--;
 800604c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006050:	3b01      	subs	r3, #1
 8006052:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            if(adcSelector < 1024)
 8006056:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800605a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800605e:	d204      	bcs.n	800606a <main+0x3e2>
              tempSetpoint++;
 8006060:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006064:	3301      	adds	r3, #1
 8006066:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            if(tempSetpoint>60)
 800606a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800606e:	2b3c      	cmp	r3, #60	; 0x3c
 8006070:	d902      	bls.n	8006078 <main+0x3f0>
              tempSetpoint=60;
 8006072:	233c      	movs	r3, #60	; 0x3c
 8006074:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            if(tempSetpoint<24)
 8006078:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800607c:	2b17      	cmp	r3, #23
 800607e:	d802      	bhi.n	8006086 <main+0x3fe>
              tempSetpoint=24;
 8006080:	2318      	movs	r3, #24
 8006082:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sprintf(buf, "%li degC / %li degF ", tempSetpoint, (uint32_t)((double)tempSetpoint * 1.8) + 32);
 8006086:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 800608a:	f7fa fa3b 	bl	8000504 <__aeabi_ui2d>
 800608e:	a3ac      	add	r3, pc, #688	; (adr r3, 8006340 <main+0x6b8>)
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f7fa fab0 	bl	80005f8 <__aeabi_dmul>
 8006098:	4603      	mov	r3, r0
 800609a:	460c      	mov	r4, r1
 800609c:	4618      	mov	r0, r3
 800609e:	4621      	mov	r1, r4
 80060a0:	f7fa fcbc 	bl	8000a1c <__aeabi_d2uiz>
 80060a4:	4603      	mov	r3, r0
 80060a6:	3320      	adds	r3, #32
 80060a8:	f107 001c 	add.w	r0, r7, #28
 80060ac:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80060b0:	49a5      	ldr	r1, [pc, #660]	; (8006348 <main+0x6c0>)
 80060b2:	f001 f9ab 	bl	800740c <siprintf>
            ansiEscapePrint(24, 15, GRN_ON_BLK,  buf);
 80060b6:	f107 031c 	add.w	r3, r7, #28
 80060ba:	4aa4      	ldr	r2, [pc, #656]	; (800634c <main+0x6c4>)
 80060bc:	210f      	movs	r1, #15
 80060be:	2018      	movs	r0, #24
 80060c0:	f7ff fd9e 	bl	8005c00 <ansiEscapePrint>
            HAL_Delay(250);
 80060c4:	20fa      	movs	r0, #250	; 0xfa
 80060c6:	f7fa fe7f 	bl	8000dc8 <HAL_Delay>
            continue;
 80060ca:	e136      	b.n	800633a <main+0x6b2>
            break;
      }

      if(y!=old_y)
 80060cc:	f9b7 212e 	ldrsh.w	r2, [r7, #302]	; 0x12e
 80060d0:	f9b7 312c 	ldrsh.w	r3, [r7, #300]	; 0x12c
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d05b      	beq.n	8006190 <main+0x508>
      {
        ansiEscapePrint(4, 10, YEL_ON_BLK,  "  Coffee Level (oz)");
 80060d8:	4b9d      	ldr	r3, [pc, #628]	; (8006350 <main+0x6c8>)
 80060da:	4a9e      	ldr	r2, [pc, #632]	; (8006354 <main+0x6cc>)
 80060dc:	210a      	movs	r1, #10
 80060de:	2004      	movs	r0, #4
 80060e0:	f7ff fd8e 	bl	8005c00 <ansiEscapePrint>
        ansiEscapePrint(4, 14, YEL_ON_BLK,  "  Coffee Temperature (degC)");
 80060e4:	4b9c      	ldr	r3, [pc, #624]	; (8006358 <main+0x6d0>)
 80060e6:	4a9b      	ldr	r2, [pc, #620]	; (8006354 <main+0x6cc>)
 80060e8:	210e      	movs	r1, #14
 80060ea:	2004      	movs	r0, #4
 80060ec:	f7ff fd88 	bl	8005c00 <ansiEscapePrint>
        ansiEscapePrint(4, 18, YEL_ON_BLK,  "  Start Brew");
 80060f0:	4b9a      	ldr	r3, [pc, #616]	; (800635c <main+0x6d4>)
 80060f2:	4a98      	ldr	r2, [pc, #608]	; (8006354 <main+0x6cc>)
 80060f4:	2112      	movs	r1, #18
 80060f6:	2004      	movs	r0, #4
 80060f8:	f7ff fd82 	bl	8005c00 <ansiEscapePrint>
        ansiEscapePrint(4, 20, YEL_ON_BLK,  "  Use Joy-Stick to Select");
 80060fc:	4b98      	ldr	r3, [pc, #608]	; (8006360 <main+0x6d8>)
 80060fe:	4a95      	ldr	r2, [pc, #596]	; (8006354 <main+0x6cc>)
 8006100:	2114      	movs	r1, #20
 8006102:	2004      	movs	r0, #4
 8006104:	f7ff fd7c 	bl	8005c00 <ansiEscapePrint>
        switch(y&0xc)
 8006108:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800610c:	f003 030c 	and.w	r3, r3, #12
 8006110:	2b0c      	cmp	r3, #12
 8006112:	d839      	bhi.n	8006188 <main+0x500>
 8006114:	a201      	add	r2, pc, #4	; (adr r2, 800611c <main+0x494>)
 8006116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611a:	bf00      	nop
 800611c:	08006151 	.word	0x08006151
 8006120:	08006189 	.word	0x08006189
 8006124:	08006189 	.word	0x08006189
 8006128:	08006189 	.word	0x08006189
 800612c:	0800615f 	.word	0x0800615f
 8006130:	08006189 	.word	0x08006189
 8006134:	08006189 	.word	0x08006189
 8006138:	08006189 	.word	0x08006189
 800613c:	0800616d 	.word	0x0800616d
 8006140:	08006189 	.word	0x08006189
 8006144:	08006189 	.word	0x08006189
 8006148:	08006189 	.word	0x08006189
 800614c:	0800617b 	.word	0x0800617b
        {
          case(0x0):ansiEscapePrint(4, 10, GRN_ON_BLK,  ">>Coffee Level (oz) "); break;
 8006150:	4b84      	ldr	r3, [pc, #528]	; (8006364 <main+0x6dc>)
 8006152:	4a7e      	ldr	r2, [pc, #504]	; (800634c <main+0x6c4>)
 8006154:	210a      	movs	r1, #10
 8006156:	2004      	movs	r0, #4
 8006158:	f7ff fd52 	bl	8005c00 <ansiEscapePrint>
 800615c:	e014      	b.n	8006188 <main+0x500>
          case(0x4):ansiEscapePrint(4, 14, GRN_ON_BLK,  ">>Coffee Temperature (degC) "); break;
 800615e:	4b82      	ldr	r3, [pc, #520]	; (8006368 <main+0x6e0>)
 8006160:	4a7a      	ldr	r2, [pc, #488]	; (800634c <main+0x6c4>)
 8006162:	210e      	movs	r1, #14
 8006164:	2004      	movs	r0, #4
 8006166:	f7ff fd4b 	bl	8005c00 <ansiEscapePrint>
 800616a:	e00d      	b.n	8006188 <main+0x500>
          case(0x8):ansiEscapePrint(4, 18, GRN_ON_BLK,  ">>Start Brew "); break;
 800616c:	4b7f      	ldr	r3, [pc, #508]	; (800636c <main+0x6e4>)
 800616e:	4a77      	ldr	r2, [pc, #476]	; (800634c <main+0x6c4>)
 8006170:	2112      	movs	r1, #18
 8006172:	2004      	movs	r0, #4
 8006174:	f7ff fd44 	bl	8005c00 <ansiEscapePrint>
 8006178:	e006      	b.n	8006188 <main+0x500>
          case(0xc):ansiEscapePrint(4, 20, GRN_ON_BLK,  ">>Use Joy-Stick to Select "); break;
 800617a:	4b7d      	ldr	r3, [pc, #500]	; (8006370 <main+0x6e8>)
 800617c:	4a73      	ldr	r2, [pc, #460]	; (800634c <main+0x6c4>)
 800617e:	2114      	movs	r1, #20
 8006180:	2004      	movs	r0, #4
 8006182:	f7ff fd3d 	bl	8005c00 <ansiEscapePrint>
 8006186:	bf00      	nop
        }
        old_y=y;
 8006188:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800618c:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
      }

      HAL_Delay(250);
 8006190:	20fa      	movs	r0, #250	; 0xfa
 8006192:	f7fa fe19 	bl	8000dc8 <HAL_Delay>
 8006196:	e641      	b.n	8005e1c <main+0x194>

    }
    else
    {

      sConfig.Channel = ADC_CHANNEL_2;
 8006198:	1d3b      	adds	r3, r7, #4
 800619a:	4a76      	ldr	r2, [pc, #472]	; (8006374 <main+0x6ec>)
 800619c:	601a      	str	r2, [r3, #0]
      HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800619e:	1d3b      	adds	r3, r7, #4
 80061a0:	4619      	mov	r1, r3
 80061a2:	4875      	ldr	r0, [pc, #468]	; (8006378 <main+0x6f0>)
 80061a4:	f7fb faf4 	bl	8001790 <HAL_ADC_ConfigChannel>
      HAL_ADC_Start(&hadc1);
 80061a8:	4873      	ldr	r0, [pc, #460]	; (8006378 <main+0x6f0>)
 80061aa:	f7fb f959 	bl	8001460 <HAL_ADC_Start>
      while(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY)!=HAL_OK);
 80061ae:	bf00      	nop
 80061b0:	f04f 31ff 	mov.w	r1, #4294967295
 80061b4:	4870      	ldr	r0, [pc, #448]	; (8006378 <main+0x6f0>)
 80061b6:	f7fb fa0d 	bl	80015d4 <HAL_ADC_PollForConversion>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1f7      	bne.n	80061b0 <main+0x528>
      adcLevel = HAL_ADC_GetValue(&hadc1);
 80061c0:	486d      	ldr	r0, [pc, #436]	; (8006378 <main+0x6f0>)
 80061c2:	f7fb fad7 	bl	8001774 <HAL_ADC_GetValue>
 80061c6:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
      adcLevel = (uint32_t)( ((float)HAL_ADC_GetValue(&hadc1)/4096) * 24);
 80061ca:	486b      	ldr	r0, [pc, #428]	; (8006378 <main+0x6f0>)
 80061cc:	f7fb fad2 	bl	8001774 <HAL_ADC_GetValue>
 80061d0:	ee07 0a90 	vmov	s15, r0
 80061d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061d8:	eddf 6a68 	vldr	s13, [pc, #416]	; 800637c <main+0x6f4>
 80061dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061e0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80061e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ec:	ee17 3a90 	vmov	r3, s15
 80061f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

      sprintf(buf, "%li oz  ", adcLevel);
 80061f4:	f107 031c 	add.w	r3, r7, #28
 80061f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80061fc:	4960      	ldr	r1, [pc, #384]	; (8006380 <main+0x6f8>)
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 f904 	bl	800740c <siprintf>
      ansiEscapePrint(24, 12, GRN_ON_BLK,  buf);
 8006204:	f107 031c 	add.w	r3, r7, #28
 8006208:	4a50      	ldr	r2, [pc, #320]	; (800634c <main+0x6c4>)
 800620a:	210c      	movs	r1, #12
 800620c:	2018      	movs	r0, #24
 800620e:	f7ff fcf7 	bl	8005c00 <ansiEscapePrint>

      sConfig.Channel = ADC_CHANNEL_3;
 8006212:	1d3b      	adds	r3, r7, #4
 8006214:	4a5b      	ldr	r2, [pc, #364]	; (8006384 <main+0x6fc>)
 8006216:	601a      	str	r2, [r3, #0]
      HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8006218:	1d3b      	adds	r3, r7, #4
 800621a:	4619      	mov	r1, r3
 800621c:	4856      	ldr	r0, [pc, #344]	; (8006378 <main+0x6f0>)
 800621e:	f7fb fab7 	bl	8001790 <HAL_ADC_ConfigChannel>
      HAL_ADC_Start(&hadc1);
 8006222:	4855      	ldr	r0, [pc, #340]	; (8006378 <main+0x6f0>)
 8006224:	f7fb f91c 	bl	8001460 <HAL_ADC_Start>
      while(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY)!=HAL_OK);
 8006228:	bf00      	nop
 800622a:	f04f 31ff 	mov.w	r1, #4294967295
 800622e:	4852      	ldr	r0, [pc, #328]	; (8006378 <main+0x6f0>)
 8006230:	f7fb f9d0 	bl	80015d4 <HAL_ADC_PollForConversion>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f7      	bne.n	800622a <main+0x5a2>
      adcTemperature = HAL_ADC_GetValue(&hadc1);
 800623a:	484f      	ldr	r0, [pc, #316]	; (8006378 <main+0x6f0>)
 800623c:	f7fb fa9a 	bl	8001774 <HAL_ADC_GetValue>
 8006240:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
      adcTemperature = (uint32_t)( ((float)HAL_ADC_GetValue(&hadc1)/4096) * 100);
 8006244:	484c      	ldr	r0, [pc, #304]	; (8006378 <main+0x6f0>)
 8006246:	f7fb fa95 	bl	8001774 <HAL_ADC_GetValue>
 800624a:	ee07 0a90 	vmov	s15, r0
 800624e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006252:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800637c <main+0x6f4>
 8006256:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800625a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8006388 <main+0x700>
 800625e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006266:	ee17 3a90 	vmov	r3, s15
 800626a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

      sprintf(buf, "%li degC / %li degF ", adcTemperature, (uint32_t)((double)adcTemperature * 1.8) + 32);
 800626e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8006272:	f7fa f947 	bl	8000504 <__aeabi_ui2d>
 8006276:	a332      	add	r3, pc, #200	; (adr r3, 8006340 <main+0x6b8>)
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f7fa f9bc 	bl	80005f8 <__aeabi_dmul>
 8006280:	4603      	mov	r3, r0
 8006282:	460c      	mov	r4, r1
 8006284:	4618      	mov	r0, r3
 8006286:	4621      	mov	r1, r4
 8006288:	f7fa fbc8 	bl	8000a1c <__aeabi_d2uiz>
 800628c:	4603      	mov	r3, r0
 800628e:	3320      	adds	r3, #32
 8006290:	f107 001c 	add.w	r0, r7, #28
 8006294:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006298:	492b      	ldr	r1, [pc, #172]	; (8006348 <main+0x6c0>)
 800629a:	f001 f8b7 	bl	800740c <siprintf>
      ansiEscapePrint(24, 16, GRN_ON_BLK,  buf);
 800629e:	f107 031c 	add.w	r3, r7, #28
 80062a2:	4a2a      	ldr	r2, [pc, #168]	; (800634c <main+0x6c4>)
 80062a4:	2110      	movs	r1, #16
 80062a6:	2018      	movs	r0, #24
 80062a8:	f7ff fcaa 	bl	8005c00 <ansiEscapePrint>

      if(adcLevel >= levelSetpoint)
 80062ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80062b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d30b      	bcc.n	80062d0 <main+0x648>
      {
        SET_BREW_MODE(0);
 80062b8:	2201      	movs	r2, #1
 80062ba:	2120      	movs	r1, #32
 80062bc:	4833      	ldr	r0, [pc, #204]	; (800638c <main+0x704>)
 80062be:	f7fc faa5 	bl	800280c <HAL_GPIO_WritePin>
        ansiEscapePrint(25, 25, RED_ON_BLK,  "READY");
 80062c2:	4b33      	ldr	r3, [pc, #204]	; (8006390 <main+0x708>)
 80062c4:	4a33      	ldr	r2, [pc, #204]	; (8006394 <main+0x70c>)
 80062c6:	2119      	movs	r1, #25
 80062c8:	2019      	movs	r0, #25
 80062ca:	f7ff fc99 	bl	8005c00 <ansiEscapePrint>
 80062ce:	e00a      	b.n	80062e6 <main+0x65e>
      }
      else
      {
        SET_BREW_MODE(1);
 80062d0:	2200      	movs	r2, #0
 80062d2:	2120      	movs	r1, #32
 80062d4:	482d      	ldr	r0, [pc, #180]	; (800638c <main+0x704>)
 80062d6:	f7fc fa99 	bl	800280c <HAL_GPIO_WritePin>
        ansiEscapePrint(25, 25, GRN_ON_BLK,  "ON ");
 80062da:	4b2f      	ldr	r3, [pc, #188]	; (8006398 <main+0x710>)
 80062dc:	4a1b      	ldr	r2, [pc, #108]	; (800634c <main+0x6c4>)
 80062de:	2119      	movs	r1, #25
 80062e0:	2019      	movs	r0, #25
 80062e2:	f7ff fc8d 	bl	8005c00 <ansiEscapePrint>
      }

      if(adcTemperature > (tempSetpoint+1))
 80062e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062ea:	3301      	adds	r3, #1
 80062ec:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d90a      	bls.n	800630a <main+0x682>
      {
        SET_WARM_MODE(0);
 80062f4:	2201      	movs	r2, #1
 80062f6:	2110      	movs	r1, #16
 80062f8:	4824      	ldr	r0, [pc, #144]	; (800638c <main+0x704>)
 80062fa:	f7fc fa87 	bl	800280c <HAL_GPIO_WritePin>
        ansiEscapePrint(25, 26, YEL_ON_BLK,  "OFF");
 80062fe:	4b27      	ldr	r3, [pc, #156]	; (800639c <main+0x714>)
 8006300:	4a14      	ldr	r2, [pc, #80]	; (8006354 <main+0x6cc>)
 8006302:	211a      	movs	r1, #26
 8006304:	2019      	movs	r0, #25
 8006306:	f7ff fc7b 	bl	8005c00 <ansiEscapePrint>
      }

      if(adcTemperature < (tempSetpoint-1))
 800630a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800630e:	3b01      	subs	r3, #1
 8006310:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006314:	429a      	cmp	r2, r3
 8006316:	d20a      	bcs.n	800632e <main+0x6a6>
      {
        SET_WARM_MODE(1);
 8006318:	2200      	movs	r2, #0
 800631a:	2110      	movs	r1, #16
 800631c:	481b      	ldr	r0, [pc, #108]	; (800638c <main+0x704>)
 800631e:	f7fc fa75 	bl	800280c <HAL_GPIO_WritePin>
        ansiEscapePrint(25, 26, RED_ON_BLK,  "ON ");
 8006322:	4b1d      	ldr	r3, [pc, #116]	; (8006398 <main+0x710>)
 8006324:	4a1b      	ldr	r2, [pc, #108]	; (8006394 <main+0x70c>)
 8006326:	211a      	movs	r1, #26
 8006328:	2019      	movs	r0, #25
 800632a:	f7ff fc69 	bl	8005c00 <ansiEscapePrint>
      }

      ansiEscapePrint(0, 0, WHT_ON_BLK,  "");
 800632e:	4b1c      	ldr	r3, [pc, #112]	; (80063a0 <main+0x718>)
 8006330:	4a1c      	ldr	r2, [pc, #112]	; (80063a4 <main+0x71c>)
 8006332:	2100      	movs	r1, #0
 8006334:	2000      	movs	r0, #0
 8006336:	f7ff fc63 	bl	8005c00 <ansiEscapePrint>
    if(!enableBrew)
 800633a:	e56f      	b.n	8005e1c <main+0x194>
 800633c:	f3af 8000 	nop.w
 8006340:	cccccccd 	.word	0xcccccccd
 8006344:	3ffccccc 	.word	0x3ffccccc
 8006348:	08007ee8 	.word	0x08007ee8
 800634c:	08007e64 	.word	0x08007e64
 8006350:	08007de0 	.word	0x08007de0
 8006354:	08007df4 	.word	0x08007df4
 8006358:	08007e1c 	.word	0x08007e1c
 800635c:	08007e38 	.word	0x08007e38
 8006360:	08007f00 	.word	0x08007f00
 8006364:	08007f1c 	.word	0x08007f1c
 8006368:	08007f34 	.word	0x08007f34
 800636c:	08007f54 	.word	0x08007f54
 8006370:	08007e6c 	.word	0x08007e6c
 8006374:	08600004 	.word	0x08600004
 8006378:	20000634 	.word	0x20000634
 800637c:	45800000 	.word	0x45800000
 8006380:	08007f64 	.word	0x08007f64
 8006384:	0c900008 	.word	0x0c900008
 8006388:	42c80000 	.word	0x42c80000
 800638c:	48000800 	.word	0x48000800
 8006390:	08007f70 	.word	0x08007f70
 8006394:	08007e0c 	.word	0x08007e0c
 8006398:	08007f78 	.word	0x08007f78
 800639c:	08007f7c 	.word	0x08007f7c
 80063a0:	08007f80 	.word	0x08007f80
 80063a4:	08007f84 	.word	0x08007f84

080063a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b0b8      	sub	sp, #224	; 0xe0
 80063ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80063ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80063b2:	2244      	movs	r2, #68	; 0x44
 80063b4:	2100      	movs	r1, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 f820 	bl	80073fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80063bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	605a      	str	r2, [r3, #4]
 80063c6:	609a      	str	r2, [r3, #8]
 80063c8:	60da      	str	r2, [r3, #12]
 80063ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80063cc:	463b      	mov	r3, r7
 80063ce:	2288      	movs	r2, #136	; 0x88
 80063d0:	2100      	movs	r1, #0
 80063d2:	4618      	mov	r0, r3
 80063d4:	f001 f812 	bl	80073fc <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80063d8:	f7fc fcc2 	bl	8002d60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80063dc:	4b43      	ldr	r3, [pc, #268]	; (80064ec <SystemClock_Config+0x144>)
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e2:	4a42      	ldr	r2, [pc, #264]	; (80064ec <SystemClock_Config+0x144>)
 80063e4:	f023 0318 	bic.w	r3, r3, #24
 80063e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80063ec:	2314      	movs	r3, #20
 80063ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80063f8:	2301      	movs	r3, #1
 80063fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006404:	2360      	movs	r3, #96	; 0x60
 8006406:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800640a:	2302      	movs	r3, #2
 800640c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006410:	2301      	movs	r3, #1
 8006412:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006416:	2301      	movs	r3, #1
 8006418:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800641c:	2328      	movs	r3, #40	; 0x28
 800641e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006422:	2307      	movs	r3, #7
 8006424:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006428:	2302      	movs	r3, #2
 800642a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800642e:	2302      	movs	r3, #2
 8006430:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006434:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006438:	4618      	mov	r0, r3
 800643a:	f7fc fddd 	bl	8002ff8 <HAL_RCC_OscConfig>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8006444:	f000 fbe2 	bl	8006c0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006448:	230f      	movs	r3, #15
 800644a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800644e:	2303      	movs	r3, #3
 8006450:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006454:	2300      	movs	r3, #0
 8006456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800645a:	2300      	movs	r3, #0
 800645c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006460:	2300      	movs	r3, #0
 8006462:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006466:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800646a:	2104      	movs	r1, #4
 800646c:	4618      	mov	r0, r3
 800646e:	f7fd f9a9 	bl	80037c4 <HAL_RCC_ClockConfig>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8006478:	f000 fbc8 	bl	8006c0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800647c:	4b1c      	ldr	r3, [pc, #112]	; (80064f0 <SystemClock_Config+0x148>)
 800647e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006480:	2300      	movs	r3, #0
 8006482:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006484:	2300      	movs	r3, #0
 8006486:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006488:	2300      	movs	r3, #0
 800648a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800648c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006490:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8006492:	2300      	movs	r3, #0
 8006494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8006498:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800649c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800649e:	2301      	movs	r3, #1
 80064a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80064a2:	2301      	movs	r3, #1
 80064a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80064a6:	2318      	movs	r3, #24
 80064a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80064aa:	2307      	movs	r3, #7
 80064ac:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80064ae:	2302      	movs	r3, #2
 80064b0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80064b2:	2302      	movs	r3, #2
 80064b4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80064b6:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80064ba:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80064bc:	463b      	mov	r3, r7
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fd fbb6 	bl	8003c30 <HAL_RCCEx_PeriphCLKConfig>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <SystemClock_Config+0x126>
  {
    Error_Handler();
 80064ca:	f000 fb9f 	bl	8006c0c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80064ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80064d2:	f7fc fc63 	bl	8002d9c <HAL_PWREx_ControlVoltageScaling>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <SystemClock_Config+0x138>
  {
    Error_Handler();
 80064dc:	f000 fb96 	bl	8006c0c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80064e0:	f7fd fe8c 	bl	80041fc <HAL_RCCEx_EnableMSIPLLMode>
}
 80064e4:	bf00      	nop
 80064e6:	37e0      	adds	r7, #224	; 0xe0
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40021000 	.word	0x40021000
 80064f0:	00016085 	.word	0x00016085

080064f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08a      	sub	sp, #40	; 0x28
 80064f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80064fa:	f107 031c 	add.w	r3, r7, #28
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	605a      	str	r2, [r3, #4]
 8006504:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006506:	1d3b      	adds	r3, r7, #4
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	605a      	str	r2, [r3, #4]
 800650e:	609a      	str	r2, [r3, #8]
 8006510:	60da      	str	r2, [r3, #12]
 8006512:	611a      	str	r2, [r3, #16]
 8006514:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006516:	4b31      	ldr	r3, [pc, #196]	; (80065dc <MX_ADC1_Init+0xe8>)
 8006518:	4a31      	ldr	r2, [pc, #196]	; (80065e0 <MX_ADC1_Init+0xec>)
 800651a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800651c:	4b2f      	ldr	r3, [pc, #188]	; (80065dc <MX_ADC1_Init+0xe8>)
 800651e:	2200      	movs	r2, #0
 8006520:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006522:	4b2e      	ldr	r3, [pc, #184]	; (80065dc <MX_ADC1_Init+0xe8>)
 8006524:	2200      	movs	r2, #0
 8006526:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006528:	4b2c      	ldr	r3, [pc, #176]	; (80065dc <MX_ADC1_Init+0xe8>)
 800652a:	2200      	movs	r2, #0
 800652c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800652e:	4b2b      	ldr	r3, [pc, #172]	; (80065dc <MX_ADC1_Init+0xe8>)
 8006530:	2200      	movs	r2, #0
 8006532:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006534:	4b29      	ldr	r3, [pc, #164]	; (80065dc <MX_ADC1_Init+0xe8>)
 8006536:	2204      	movs	r2, #4
 8006538:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800653a:	4b28      	ldr	r3, [pc, #160]	; (80065dc <MX_ADC1_Init+0xe8>)
 800653c:	2200      	movs	r2, #0
 800653e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006540:	4b26      	ldr	r3, [pc, #152]	; (80065dc <MX_ADC1_Init+0xe8>)
 8006542:	2200      	movs	r2, #0
 8006544:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8006546:	4b25      	ldr	r3, [pc, #148]	; (80065dc <MX_ADC1_Init+0xe8>)
 8006548:	2201      	movs	r2, #1
 800654a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800654c:	4b23      	ldr	r3, [pc, #140]	; (80065dc <MX_ADC1_Init+0xe8>)
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8006554:	4b21      	ldr	r3, [pc, #132]	; (80065dc <MX_ADC1_Init+0xe8>)
 8006556:	2201      	movs	r2, #1
 8006558:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800655a:	4b20      	ldr	r3, [pc, #128]	; (80065dc <MX_ADC1_Init+0xe8>)
 800655c:	2200      	movs	r2, #0
 800655e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006560:	4b1e      	ldr	r3, [pc, #120]	; (80065dc <MX_ADC1_Init+0xe8>)
 8006562:	2200      	movs	r2, #0
 8006564:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006566:	4b1d      	ldr	r3, [pc, #116]	; (80065dc <MX_ADC1_Init+0xe8>)
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800656e:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <MX_ADC1_Init+0xe8>)
 8006570:	2200      	movs	r2, #0
 8006572:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8006574:	4b19      	ldr	r3, [pc, #100]	; (80065dc <MX_ADC1_Init+0xe8>)
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800657c:	4817      	ldr	r0, [pc, #92]	; (80065dc <MX_ADC1_Init+0xe8>)
 800657e:	f7fa fe1b 	bl	80011b8 <HAL_ADC_Init>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8006588:	f000 fb40 	bl	8006c0c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800658c:	2300      	movs	r3, #0
 800658e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006590:	f107 031c 	add.w	r3, r7, #28
 8006594:	4619      	mov	r1, r3
 8006596:	4811      	ldr	r0, [pc, #68]	; (80065dc <MX_ADC1_Init+0xe8>)
 8006598:	f7fb fcde 	bl	8001f58 <HAL_ADCEx_MultiModeConfigChannel>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80065a2:	f000 fb33 	bl	8006c0c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80065a6:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <MX_ADC1_Init+0xf0>)
 80065a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80065aa:	2306      	movs	r3, #6
 80065ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80065b2:	237f      	movs	r3, #127	; 0x7f
 80065b4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80065b6:	2304      	movs	r3, #4
 80065b8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80065be:	1d3b      	adds	r3, r7, #4
 80065c0:	4619      	mov	r1, r3
 80065c2:	4806      	ldr	r0, [pc, #24]	; (80065dc <MX_ADC1_Init+0xe8>)
 80065c4:	f7fb f8e4 	bl	8001790 <HAL_ADC_ConfigChannel>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80065ce:	f000 fb1d 	bl	8006c0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80065d2:	bf00      	nop
 80065d4:	3728      	adds	r7, #40	; 0x28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000634 	.word	0x20000634
 80065e0:	50040000 	.word	0x50040000
 80065e4:	04300002 	.word	0x04300002

080065e8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80065ec:	4b18      	ldr	r3, [pc, #96]	; (8006650 <MX_DFSDM1_Init+0x68>)
 80065ee:	4a19      	ldr	r2, [pc, #100]	; (8006654 <MX_DFSDM1_Init+0x6c>)
 80065f0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80065f2:	4b17      	ldr	r3, [pc, #92]	; (8006650 <MX_DFSDM1_Init+0x68>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80065f8:	4b15      	ldr	r3, [pc, #84]	; (8006650 <MX_DFSDM1_Init+0x68>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80065fe:	4b14      	ldr	r3, [pc, #80]	; (8006650 <MX_DFSDM1_Init+0x68>)
 8006600:	2202      	movs	r2, #2
 8006602:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8006604:	4b12      	ldr	r3, [pc, #72]	; (8006650 <MX_DFSDM1_Init+0x68>)
 8006606:	2200      	movs	r2, #0
 8006608:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800660a:	4b11      	ldr	r3, [pc, #68]	; (8006650 <MX_DFSDM1_Init+0x68>)
 800660c:	2200      	movs	r2, #0
 800660e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8006610:	4b0f      	ldr	r3, [pc, #60]	; (8006650 <MX_DFSDM1_Init+0x68>)
 8006612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006616:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8006618:	4b0d      	ldr	r3, [pc, #52]	; (8006650 <MX_DFSDM1_Init+0x68>)
 800661a:	2200      	movs	r2, #0
 800661c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800661e:	4b0c      	ldr	r3, [pc, #48]	; (8006650 <MX_DFSDM1_Init+0x68>)
 8006620:	2204      	movs	r2, #4
 8006622:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8006624:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <MX_DFSDM1_Init+0x68>)
 8006626:	2200      	movs	r2, #0
 8006628:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800662a:	4b09      	ldr	r3, [pc, #36]	; (8006650 <MX_DFSDM1_Init+0x68>)
 800662c:	2201      	movs	r2, #1
 800662e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8006630:	4b07      	ldr	r3, [pc, #28]	; (8006650 <MX_DFSDM1_Init+0x68>)
 8006632:	2200      	movs	r2, #0
 8006634:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8006636:	4b06      	ldr	r3, [pc, #24]	; (8006650 <MX_DFSDM1_Init+0x68>)
 8006638:	2200      	movs	r2, #0
 800663a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800663c:	4804      	ldr	r0, [pc, #16]	; (8006650 <MX_DFSDM1_Init+0x68>)
 800663e:	f7fb fe19 	bl	8002274 <HAL_DFSDM_ChannelInit>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8006648:	f000 fae0 	bl	8006c0c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800664c:	bf00      	nop
 800664e:	bd80      	pop	{r7, pc}
 8006650:	200000c4 	.word	0x200000c4
 8006654:	40016020 	.word	0x40016020

08006658 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800665c:	4b1b      	ldr	r3, [pc, #108]	; (80066cc <MX_I2C2_Init+0x74>)
 800665e:	4a1c      	ldr	r2, [pc, #112]	; (80066d0 <MX_I2C2_Init+0x78>)
 8006660:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8006662:	4b1a      	ldr	r3, [pc, #104]	; (80066cc <MX_I2C2_Init+0x74>)
 8006664:	4a1b      	ldr	r2, [pc, #108]	; (80066d4 <MX_I2C2_Init+0x7c>)
 8006666:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006668:	4b18      	ldr	r3, [pc, #96]	; (80066cc <MX_I2C2_Init+0x74>)
 800666a:	2200      	movs	r2, #0
 800666c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800666e:	4b17      	ldr	r3, [pc, #92]	; (80066cc <MX_I2C2_Init+0x74>)
 8006670:	2201      	movs	r2, #1
 8006672:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006674:	4b15      	ldr	r3, [pc, #84]	; (80066cc <MX_I2C2_Init+0x74>)
 8006676:	2200      	movs	r2, #0
 8006678:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800667a:	4b14      	ldr	r3, [pc, #80]	; (80066cc <MX_I2C2_Init+0x74>)
 800667c:	2200      	movs	r2, #0
 800667e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006680:	4b12      	ldr	r3, [pc, #72]	; (80066cc <MX_I2C2_Init+0x74>)
 8006682:	2200      	movs	r2, #0
 8006684:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006686:	4b11      	ldr	r3, [pc, #68]	; (80066cc <MX_I2C2_Init+0x74>)
 8006688:	2200      	movs	r2, #0
 800668a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800668c:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <MX_I2C2_Init+0x74>)
 800668e:	2200      	movs	r2, #0
 8006690:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006692:	480e      	ldr	r0, [pc, #56]	; (80066cc <MX_I2C2_Init+0x74>)
 8006694:	f7fc f8f5 	bl	8002882 <HAL_I2C_Init>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800669e:	f000 fab5 	bl	8006c0c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80066a2:	2100      	movs	r1, #0
 80066a4:	4809      	ldr	r0, [pc, #36]	; (80066cc <MX_I2C2_Init+0x74>)
 80066a6:	f7fc f97b 	bl	80029a0 <HAL_I2CEx_ConfigAnalogFilter>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80066b0:	f000 faac 	bl	8006c0c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80066b4:	2100      	movs	r1, #0
 80066b6:	4805      	ldr	r0, [pc, #20]	; (80066cc <MX_I2C2_Init+0x74>)
 80066b8:	f7fc f9bd 	bl	8002a36 <HAL_I2CEx_ConfigDigitalFilter>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80066c2:	f000 faa3 	bl	8006c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80066c6:	bf00      	nop
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20000584 	.word	0x20000584
 80066d0:	40005800 	.word	0x40005800
 80066d4:	10909cec 	.word	0x10909cec

080066d8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80066dc:	4b0f      	ldr	r3, [pc, #60]	; (800671c <MX_QUADSPI_Init+0x44>)
 80066de:	4a10      	ldr	r2, [pc, #64]	; (8006720 <MX_QUADSPI_Init+0x48>)
 80066e0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80066e2:	4b0e      	ldr	r3, [pc, #56]	; (800671c <MX_QUADSPI_Init+0x44>)
 80066e4:	22ff      	movs	r2, #255	; 0xff
 80066e6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80066e8:	4b0c      	ldr	r3, [pc, #48]	; (800671c <MX_QUADSPI_Init+0x44>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80066ee:	4b0b      	ldr	r3, [pc, #44]	; (800671c <MX_QUADSPI_Init+0x44>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80066f4:	4b09      	ldr	r3, [pc, #36]	; (800671c <MX_QUADSPI_Init+0x44>)
 80066f6:	2201      	movs	r2, #1
 80066f8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80066fa:	4b08      	ldr	r3, [pc, #32]	; (800671c <MX_QUADSPI_Init+0x44>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8006700:	4b06      	ldr	r3, [pc, #24]	; (800671c <MX_QUADSPI_Init+0x44>)
 8006702:	2200      	movs	r2, #0
 8006704:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8006706:	4805      	ldr	r0, [pc, #20]	; (800671c <MX_QUADSPI_Init+0x44>)
 8006708:	f7fc fbae 	bl	8002e68 <HAL_QSPI_Init>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8006712:	f000 fa7b 	bl	8006c0c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8006716:	bf00      	nop
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20000718 	.word	0x20000718
 8006720:	a0001000 	.word	0xa0001000

08006724 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006728:	4b1b      	ldr	r3, [pc, #108]	; (8006798 <MX_SPI3_Init+0x74>)
 800672a:	4a1c      	ldr	r2, [pc, #112]	; (800679c <MX_SPI3_Init+0x78>)
 800672c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800672e:	4b1a      	ldr	r3, [pc, #104]	; (8006798 <MX_SPI3_Init+0x74>)
 8006730:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006734:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006736:	4b18      	ldr	r3, [pc, #96]	; (8006798 <MX_SPI3_Init+0x74>)
 8006738:	2200      	movs	r2, #0
 800673a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800673c:	4b16      	ldr	r3, [pc, #88]	; (8006798 <MX_SPI3_Init+0x74>)
 800673e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006742:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006744:	4b14      	ldr	r3, [pc, #80]	; (8006798 <MX_SPI3_Init+0x74>)
 8006746:	2200      	movs	r2, #0
 8006748:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800674a:	4b13      	ldr	r3, [pc, #76]	; (8006798 <MX_SPI3_Init+0x74>)
 800674c:	2200      	movs	r2, #0
 800674e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006750:	4b11      	ldr	r3, [pc, #68]	; (8006798 <MX_SPI3_Init+0x74>)
 8006752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006756:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006758:	4b0f      	ldr	r3, [pc, #60]	; (8006798 <MX_SPI3_Init+0x74>)
 800675a:	2200      	movs	r2, #0
 800675c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800675e:	4b0e      	ldr	r3, [pc, #56]	; (8006798 <MX_SPI3_Init+0x74>)
 8006760:	2200      	movs	r2, #0
 8006762:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006764:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <MX_SPI3_Init+0x74>)
 8006766:	2200      	movs	r2, #0
 8006768:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800676a:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <MX_SPI3_Init+0x74>)
 800676c:	2200      	movs	r2, #0
 800676e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006770:	4b09      	ldr	r3, [pc, #36]	; (8006798 <MX_SPI3_Init+0x74>)
 8006772:	2207      	movs	r2, #7
 8006774:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006776:	4b08      	ldr	r3, [pc, #32]	; (8006798 <MX_SPI3_Init+0x74>)
 8006778:	2200      	movs	r2, #0
 800677a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <MX_SPI3_Init+0x74>)
 800677e:	2208      	movs	r2, #8
 8006780:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006782:	4805      	ldr	r0, [pc, #20]	; (8006798 <MX_SPI3_Init+0x74>)
 8006784:	f7fd ff14 	bl	80045b0 <HAL_SPI_Init>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800678e:	f000 fa3d 	bl	8006c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006792:	bf00      	nop
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	200005d0 	.word	0x200005d0
 800679c:	40003c00 	.word	0x40003c00

080067a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80067a4:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <MX_USART1_UART_Init+0x58>)
 80067a6:	4a15      	ldr	r2, [pc, #84]	; (80067fc <MX_USART1_UART_Init+0x5c>)
 80067a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80067aa:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <MX_USART1_UART_Init+0x58>)
 80067ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80067b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067b2:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <MX_USART1_UART_Init+0x58>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80067b8:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <MX_USART1_UART_Init+0x58>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80067be:	4b0e      	ldr	r3, [pc, #56]	; (80067f8 <MX_USART1_UART_Init+0x58>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80067c4:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <MX_USART1_UART_Init+0x58>)
 80067c6:	220c      	movs	r2, #12
 80067c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067ca:	4b0b      	ldr	r3, [pc, #44]	; (80067f8 <MX_USART1_UART_Init+0x58>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80067d0:	4b09      	ldr	r3, [pc, #36]	; (80067f8 <MX_USART1_UART_Init+0x58>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80067d6:	4b08      	ldr	r3, [pc, #32]	; (80067f8 <MX_USART1_UART_Init+0x58>)
 80067d8:	2200      	movs	r2, #0
 80067da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80067dc:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <MX_USART1_UART_Init+0x58>)
 80067de:	2200      	movs	r2, #0
 80067e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80067e2:	4805      	ldr	r0, [pc, #20]	; (80067f8 <MX_USART1_UART_Init+0x58>)
 80067e4:	f7fe f9ce 	bl	8004b84 <HAL_UART_Init>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80067ee:	f000 fa0d 	bl	8006c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80067f2:	bf00      	nop
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000698 	.word	0x20000698
 80067fc:	40013800 	.word	0x40013800

08006800 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006804:	4b14      	ldr	r3, [pc, #80]	; (8006858 <MX_USART3_UART_Init+0x58>)
 8006806:	4a15      	ldr	r2, [pc, #84]	; (800685c <MX_USART3_UART_Init+0x5c>)
 8006808:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800680a:	4b13      	ldr	r3, [pc, #76]	; (8006858 <MX_USART3_UART_Init+0x58>)
 800680c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006810:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006812:	4b11      	ldr	r3, [pc, #68]	; (8006858 <MX_USART3_UART_Init+0x58>)
 8006814:	2200      	movs	r2, #0
 8006816:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006818:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <MX_USART3_UART_Init+0x58>)
 800681a:	2200      	movs	r2, #0
 800681c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800681e:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <MX_USART3_UART_Init+0x58>)
 8006820:	2200      	movs	r2, #0
 8006822:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006824:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <MX_USART3_UART_Init+0x58>)
 8006826:	220c      	movs	r2, #12
 8006828:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800682a:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <MX_USART3_UART_Init+0x58>)
 800682c:	2200      	movs	r2, #0
 800682e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006830:	4b09      	ldr	r3, [pc, #36]	; (8006858 <MX_USART3_UART_Init+0x58>)
 8006832:	2200      	movs	r2, #0
 8006834:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006836:	4b08      	ldr	r3, [pc, #32]	; (8006858 <MX_USART3_UART_Init+0x58>)
 8006838:	2200      	movs	r2, #0
 800683a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <MX_USART3_UART_Init+0x58>)
 800683e:	2200      	movs	r2, #0
 8006840:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006842:	4805      	ldr	r0, [pc, #20]	; (8006858 <MX_USART3_UART_Init+0x58>)
 8006844:	f7fe f99e 	bl	8004b84 <HAL_UART_Init>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800684e:	f000 f9dd 	bl	8006c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006852:	bf00      	nop
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	200000fc 	.word	0x200000fc
 800685c:	40004800 	.word	0x40004800

08006860 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006864:	4b14      	ldr	r3, [pc, #80]	; (80068b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006866:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800686a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800686c:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800686e:	2206      	movs	r2, #6
 8006870:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006872:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006874:	2202      	movs	r2, #2
 8006876:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006878:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800687a:	2202      	movs	r2, #2
 800687c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800687e:	4b0e      	ldr	r3, [pc, #56]	; (80068b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006880:	2200      	movs	r2, #0
 8006882:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006884:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006886:	2200      	movs	r2, #0
 8006888:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800688a:	4b0b      	ldr	r3, [pc, #44]	; (80068b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800688c:	2200      	movs	r2, #0
 800688e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006890:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006892:	2200      	movs	r2, #0
 8006894:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006896:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006898:	2200      	movs	r2, #0
 800689a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800689e:	2200      	movs	r2, #0
 80068a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80068a2:	4805      	ldr	r0, [pc, #20]	; (80068b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80068a4:	f7fc f913 	bl	8002ace <HAL_PCD_Init>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80068ae:	f000 f9ad 	bl	8006c0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80068b2:	bf00      	nop
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	2000017c 	.word	0x2000017c

080068bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08a      	sub	sp, #40	; 0x28
 80068c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068c2:	f107 0314 	add.w	r3, r7, #20
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	605a      	str	r2, [r3, #4]
 80068cc:	609a      	str	r2, [r3, #8]
 80068ce:	60da      	str	r2, [r3, #12]
 80068d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80068d2:	4bbc      	ldr	r3, [pc, #752]	; (8006bc4 <MX_GPIO_Init+0x308>)
 80068d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d6:	4abb      	ldr	r2, [pc, #748]	; (8006bc4 <MX_GPIO_Init+0x308>)
 80068d8:	f043 0310 	orr.w	r3, r3, #16
 80068dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068de:	4bb9      	ldr	r3, [pc, #740]	; (8006bc4 <MX_GPIO_Init+0x308>)
 80068e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e2:	f003 0310 	and.w	r3, r3, #16
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80068ea:	4bb6      	ldr	r3, [pc, #728]	; (8006bc4 <MX_GPIO_Init+0x308>)
 80068ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ee:	4ab5      	ldr	r2, [pc, #724]	; (8006bc4 <MX_GPIO_Init+0x308>)
 80068f0:	f043 0304 	orr.w	r3, r3, #4
 80068f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068f6:	4bb3      	ldr	r3, [pc, #716]	; (8006bc4 <MX_GPIO_Init+0x308>)
 80068f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006902:	4bb0      	ldr	r3, [pc, #704]	; (8006bc4 <MX_GPIO_Init+0x308>)
 8006904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006906:	4aaf      	ldr	r2, [pc, #700]	; (8006bc4 <MX_GPIO_Init+0x308>)
 8006908:	f043 0301 	orr.w	r3, r3, #1
 800690c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800690e:	4bad      	ldr	r3, [pc, #692]	; (8006bc4 <MX_GPIO_Init+0x308>)
 8006910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	60bb      	str	r3, [r7, #8]
 8006918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800691a:	4baa      	ldr	r3, [pc, #680]	; (8006bc4 <MX_GPIO_Init+0x308>)
 800691c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691e:	4aa9      	ldr	r2, [pc, #676]	; (8006bc4 <MX_GPIO_Init+0x308>)
 8006920:	f043 0302 	orr.w	r3, r3, #2
 8006924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006926:	4ba7      	ldr	r3, [pc, #668]	; (8006bc4 <MX_GPIO_Init+0x308>)
 8006928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	607b      	str	r3, [r7, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006932:	4ba4      	ldr	r3, [pc, #656]	; (8006bc4 <MX_GPIO_Init+0x308>)
 8006934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006936:	4aa3      	ldr	r2, [pc, #652]	; (8006bc4 <MX_GPIO_Init+0x308>)
 8006938:	f043 0308 	orr.w	r3, r3, #8
 800693c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800693e:	4ba1      	ldr	r3, [pc, #644]	; (8006bc4 <MX_GPIO_Init+0x308>)
 8006940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800694a:	2200      	movs	r2, #0
 800694c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006950:	489d      	ldr	r0, [pc, #628]	; (8006bc8 <MX_GPIO_Init+0x30c>)
 8006952:	f7fb ff5b 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8006956:	2200      	movs	r2, #0
 8006958:	f248 1104 	movw	r1, #33028	; 0x8104
 800695c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006960:	f7fb ff54 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HEATER_EN_Pin|BREW_EN_Pin|VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8006964:	2200      	movs	r2, #0
 8006966:	f44f 711c 	mov.w	r1, #624	; 0x270
 800696a:	4898      	ldr	r0, [pc, #608]	; (8006bcc <MX_GPIO_Init+0x310>)
 800696c:	f7fb ff4e 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8006970:	2200      	movs	r2, #0
 8006972:	f24f 0114 	movw	r1, #61460	; 0xf014
 8006976:	4896      	ldr	r0, [pc, #600]	; (8006bd0 <MX_GPIO_Init+0x314>)
 8006978:	f7fb ff48 	bl	800280c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800697c:	2200      	movs	r2, #0
 800697e:	f241 0181 	movw	r1, #4225	; 0x1081
 8006982:	4894      	ldr	r0, [pc, #592]	; (8006bd4 <MX_GPIO_Init+0x318>)
 8006984:	f7fb ff42 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8006988:	2201      	movs	r2, #1
 800698a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800698e:	4891      	ldr	r0, [pc, #580]	; (8006bd4 <MX_GPIO_Init+0x318>)
 8006990:	f7fb ff3c 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8006994:	2201      	movs	r2, #1
 8006996:	2120      	movs	r1, #32
 8006998:	488d      	ldr	r0, [pc, #564]	; (8006bd0 <MX_GPIO_Init+0x314>)
 800699a:	f7fb ff37 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800699e:	2201      	movs	r2, #1
 80069a0:	2101      	movs	r1, #1
 80069a2:	4889      	ldr	r0, [pc, #548]	; (8006bc8 <MX_GPIO_Init+0x30c>)
 80069a4:	f7fb ff32 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80069a8:	f240 1315 	movw	r3, #277	; 0x115
 80069ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069ae:	2301      	movs	r3, #1
 80069b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b2:	2300      	movs	r3, #0
 80069b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069b6:	2300      	movs	r3, #0
 80069b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069ba:	f107 0314 	add.w	r3, r7, #20
 80069be:	4619      	mov	r1, r3
 80069c0:	4881      	ldr	r0, [pc, #516]	; (8006bc8 <MX_GPIO_Init+0x30c>)
 80069c2:	f7fb fd63 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80069c6:	236a      	movs	r3, #106	; 0x6a
 80069c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80069ca:	4b83      	ldr	r3, [pc, #524]	; (8006bd8 <MX_GPIO_Init+0x31c>)
 80069cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069d2:	f107 0314 	add.w	r3, r7, #20
 80069d6:	4619      	mov	r1, r3
 80069d8:	487b      	ldr	r0, [pc, #492]	; (8006bc8 <MX_GPIO_Init+0x30c>)
 80069da:	f7fb fd57 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80069de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80069e4:	4b7d      	ldr	r3, [pc, #500]	; (8006bdc <MX_GPIO_Init+0x320>)
 80069e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80069ec:	f107 0314 	add.w	r3, r7, #20
 80069f0:	4619      	mov	r1, r3
 80069f2:	4876      	ldr	r0, [pc, #472]	; (8006bcc <MX_GPIO_Init+0x310>)
 80069f4:	f7fb fd4a 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : SELECTOR_SW_Pin */
  GPIO_InitStruct.Pin = SELECTOR_SW_Pin;
 80069f8:	2308      	movs	r3, #8
 80069fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a00:	2300      	movs	r3, #0
 8006a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SELECTOR_SW_GPIO_Port, &GPIO_InitStruct);
 8006a04:	f107 0314 	add.w	r3, r7, #20
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4870      	ldr	r0, [pc, #448]	; (8006bcc <MX_GPIO_Init+0x310>)
 8006a0c:	f7fb fd3e 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8006a10:	2303      	movs	r3, #3
 8006a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a14:	2302      	movs	r3, #2
 8006a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006a20:	2308      	movs	r3, #8
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a24:	f107 0314 	add.w	r3, r7, #20
 8006a28:	4619      	mov	r1, r3
 8006a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a2e:	f7fb fd2d 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8006a32:	f248 1304 	movw	r3, #33028	; 0x8104
 8006a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a40:	2300      	movs	r3, #0
 8006a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a44:	f107 0314 	add.w	r3, r7, #20
 8006a48:	4619      	mov	r1, r3
 8006a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a4e:	f7fb fd1d 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8006a52:	2308      	movs	r3, #8
 8006a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a56:	2302      	movs	r3, #2
 8006a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006a62:	2301      	movs	r3, #1
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8006a66:	f107 0314 	add.w	r3, r7, #20
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a70:	f7fb fd0c 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8006a74:	23e0      	movs	r3, #224	; 0xe0
 8006a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a78:	2302      	movs	r3, #2
 8006a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a80:	2303      	movs	r3, #3
 8006a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006a84:	2305      	movs	r3, #5
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a88:	f107 0314 	add.w	r3, r7, #20
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a92:	f7fb fcfb 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : HEATER_EN_Pin BREW_EN_Pin VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = HEATER_EN_Pin|BREW_EN_Pin|VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8006a96:	f44f 731c 	mov.w	r3, #624	; 0x270
 8006a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006aa8:	f107 0314 	add.w	r3, r7, #20
 8006aac:	4619      	mov	r1, r3
 8006aae:	4847      	ldr	r0, [pc, #284]	; (8006bcc <MX_GPIO_Init+0x310>)
 8006ab0:	f7fb fcec 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006ab8:	4b47      	ldr	r3, [pc, #284]	; (8006bd8 <MX_GPIO_Init+0x31c>)
 8006aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8006ac0:	f107 0314 	add.w	r3, r7, #20
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4842      	ldr	r0, [pc, #264]	; (8006bd0 <MX_GPIO_Init+0x314>)
 8006ac8:	f7fb fce0 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8006acc:	f24f 0334 	movw	r3, #61492	; 0xf034
 8006ad0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ada:	2300      	movs	r3, #0
 8006adc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ade:	f107 0314 	add.w	r3, r7, #20
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	483a      	ldr	r0, [pc, #232]	; (8006bd0 <MX_GPIO_Init+0x314>)
 8006ae6:	f7fb fcd1 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8006aea:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8006aee:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006af0:	4b39      	ldr	r3, [pc, #228]	; (8006bd8 <MX_GPIO_Init+0x31c>)
 8006af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006af8:	f107 0314 	add.w	r3, r7, #20
 8006afc:	4619      	mov	r1, r3
 8006afe:	4835      	ldr	r0, [pc, #212]	; (8006bd4 <MX_GPIO_Init+0x318>)
 8006b00:	f7fb fcc4 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8006b04:	f243 0381 	movw	r3, #12417	; 0x3081
 8006b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b12:	2300      	movs	r3, #0
 8006b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b16:	f107 0314 	add.w	r3, r7, #20
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	482d      	ldr	r0, [pc, #180]	; (8006bd4 <MX_GPIO_Init+0x318>)
 8006b1e:	f7fb fcb5 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8006b22:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b28:	4b2b      	ldr	r3, [pc, #172]	; (8006bd8 <MX_GPIO_Init+0x31c>)
 8006b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b30:	f107 0314 	add.w	r3, r7, #20
 8006b34:	4619      	mov	r1, r3
 8006b36:	4825      	ldr	r0, [pc, #148]	; (8006bcc <MX_GPIO_Init+0x310>)
 8006b38:	f7fb fca8 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b40:	2302      	movs	r3, #2
 8006b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006b4c:	2305      	movs	r3, #5
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8006b50:	f107 0314 	add.w	r3, r7, #20
 8006b54:	4619      	mov	r1, r3
 8006b56:	481f      	ldr	r0, [pc, #124]	; (8006bd4 <MX_GPIO_Init+0x318>)
 8006b58:	f7fb fc98 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8006b5c:	2378      	movs	r3, #120	; 0x78
 8006b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b60:	2302      	movs	r3, #2
 8006b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006b6c:	2307      	movs	r3, #7
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b70:	f107 0314 	add.w	r3, r7, #20
 8006b74:	4619      	mov	r1, r3
 8006b76:	4817      	ldr	r0, [pc, #92]	; (8006bd4 <MX_GPIO_Init+0x318>)
 8006b78:	f7fb fc88 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8006b7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b82:	2312      	movs	r3, #18
 8006b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b86:	2301      	movs	r3, #1
 8006b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006b8e:	2304      	movs	r3, #4
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b92:	f107 0314 	add.w	r3, r7, #20
 8006b96:	4619      	mov	r1, r3
 8006b98:	480d      	ldr	r0, [pc, #52]	; (8006bd0 <MX_GPIO_Init+0x314>)
 8006b9a:	f7fb fc77 	bl	800248c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	2017      	movs	r0, #23
 8006ba4:	f7fb fb3c 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006ba8:	2017      	movs	r0, #23
 8006baa:	f7fb fb55 	bl	8002258 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	2028      	movs	r0, #40	; 0x28
 8006bb4:	f7fb fb34 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006bb8:	2028      	movs	r0, #40	; 0x28
 8006bba:	f7fb fb4d 	bl	8002258 <HAL_NVIC_EnableIRQ>

}
 8006bbe:	bf00      	nop
 8006bc0:	e00e      	b.n	8006be0 <MX_GPIO_Init+0x324>
 8006bc2:	bf00      	nop
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	48001000 	.word	0x48001000
 8006bcc:	48000800 	.word	0x48000800
 8006bd0:	48000400 	.word	0x48000400
 8006bd4:	48000c00 	.word	0x48000c00
 8006bd8:	10110000 	.word	0x10110000
 8006bdc:	10210000 	.word	0x10210000
 8006be0:	3728      	adds	r7, #40	; 0x28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop

08006be8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a04      	ldr	r2, [pc, #16]	; (8006c08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d101      	bne.n	8006bfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006bfa:	f7fa f8c7 	bl	8000d8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	40012c00 	.word	0x40012c00

08006c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006c10:	bf00      	nop
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
	...

08006c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c22:	4b0f      	ldr	r3, [pc, #60]	; (8006c60 <HAL_MspInit+0x44>)
 8006c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c26:	4a0e      	ldr	r2, [pc, #56]	; (8006c60 <HAL_MspInit+0x44>)
 8006c28:	f043 0301 	orr.w	r3, r3, #1
 8006c2c:	6613      	str	r3, [r2, #96]	; 0x60
 8006c2e:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <HAL_MspInit+0x44>)
 8006c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	607b      	str	r3, [r7, #4]
 8006c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c3a:	4b09      	ldr	r3, [pc, #36]	; (8006c60 <HAL_MspInit+0x44>)
 8006c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3e:	4a08      	ldr	r2, [pc, #32]	; (8006c60 <HAL_MspInit+0x44>)
 8006c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c44:	6593      	str	r3, [r2, #88]	; 0x58
 8006c46:	4b06      	ldr	r3, [pc, #24]	; (8006c60 <HAL_MspInit+0x44>)
 8006c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40021000 	.word	0x40021000

08006c64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08c      	sub	sp, #48	; 0x30
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c6c:	f107 031c 	add.w	r3, r7, #28
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	605a      	str	r2, [r3, #4]
 8006c76:	609a      	str	r2, [r3, #8]
 8006c78:	60da      	str	r2, [r3, #12]
 8006c7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a2d      	ldr	r2, [pc, #180]	; (8006d38 <HAL_ADC_MspInit+0xd4>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d154      	bne.n	8006d30 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8006c86:	4b2d      	ldr	r3, [pc, #180]	; (8006d3c <HAL_ADC_MspInit+0xd8>)
 8006c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8a:	4a2c      	ldr	r2, [pc, #176]	; (8006d3c <HAL_ADC_MspInit+0xd8>)
 8006c8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c92:	4b2a      	ldr	r3, [pc, #168]	; (8006d3c <HAL_ADC_MspInit+0xd8>)
 8006c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c9a:	61bb      	str	r3, [r7, #24]
 8006c9c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c9e:	4b27      	ldr	r3, [pc, #156]	; (8006d3c <HAL_ADC_MspInit+0xd8>)
 8006ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca2:	4a26      	ldr	r2, [pc, #152]	; (8006d3c <HAL_ADC_MspInit+0xd8>)
 8006ca4:	f043 0304 	orr.w	r3, r3, #4
 8006ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006caa:	4b24      	ldr	r3, [pc, #144]	; (8006d3c <HAL_ADC_MspInit+0xd8>)
 8006cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cae:	f003 0304 	and.w	r3, r3, #4
 8006cb2:	617b      	str	r3, [r7, #20]
 8006cb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cb6:	4b21      	ldr	r3, [pc, #132]	; (8006d3c <HAL_ADC_MspInit+0xd8>)
 8006cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cba:	4a20      	ldr	r2, [pc, #128]	; (8006d3c <HAL_ADC_MspInit+0xd8>)
 8006cbc:	f043 0301 	orr.w	r3, r3, #1
 8006cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cc2:	4b1e      	ldr	r3, [pc, #120]	; (8006d3c <HAL_ADC_MspInit+0xd8>)
 8006cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cce:	4b1b      	ldr	r3, [pc, #108]	; (8006d3c <HAL_ADC_MspInit+0xd8>)
 8006cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd2:	4a1a      	ldr	r2, [pc, #104]	; (8006d3c <HAL_ADC_MspInit+0xd8>)
 8006cd4:	f043 0302 	orr.w	r3, r3, #2
 8006cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cda:	4b18      	ldr	r3, [pc, #96]	; (8006d3c <HAL_ADC_MspInit+0xd8>)
 8006cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA4     ------> ADC1_IN9
    PB1     ------> ADC1_IN16 
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin;
 8006ce6:	2307      	movs	r3, #7
 8006ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006cea:	230b      	movs	r3, #11
 8006cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cf2:	f107 031c 	add.w	r3, r7, #28
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4811      	ldr	r0, [pc, #68]	; (8006d40 <HAL_ADC_MspInit+0xdc>)
 8006cfa:	f7fb fbc7 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8006cfe:	2310      	movs	r3, #16
 8006d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006d02:	230b      	movs	r3, #11
 8006d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8006d0a:	f107 031c 	add.w	r3, r7, #28
 8006d0e:	4619      	mov	r1, r3
 8006d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d14:	f7fb fbba 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8006d18:	2302      	movs	r3, #2
 8006d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006d1c:	230b      	movs	r3, #11
 8006d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8006d24:	f107 031c 	add.w	r3, r7, #28
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4806      	ldr	r0, [pc, #24]	; (8006d44 <HAL_ADC_MspInit+0xe0>)
 8006d2c:	f7fb fbae 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006d30:	bf00      	nop
 8006d32:	3730      	adds	r7, #48	; 0x30
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	50040000 	.word	0x50040000
 8006d3c:	40021000 	.word	0x40021000
 8006d40:	48000800 	.word	0x48000800
 8006d44:	48000400 	.word	0x48000400

08006d48 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08a      	sub	sp, #40	; 0x28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d50:	f107 0314 	add.w	r3, r7, #20
 8006d54:	2200      	movs	r2, #0
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	605a      	str	r2, [r3, #4]
 8006d5a:	609a      	str	r2, [r3, #8]
 8006d5c:	60da      	str	r2, [r3, #12]
 8006d5e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8006d60:	4b18      	ldr	r3, [pc, #96]	; (8006dc4 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d128      	bne.n	8006dba <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8006d68:	4b17      	ldr	r3, [pc, #92]	; (8006dc8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8006d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d6c:	4a16      	ldr	r2, [pc, #88]	; (8006dc8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8006d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d72:	6613      	str	r3, [r2, #96]	; 0x60
 8006d74:	4b14      	ldr	r3, [pc, #80]	; (8006dc8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8006d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d80:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8006d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d84:	4a10      	ldr	r2, [pc, #64]	; (8006dc8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8006d86:	f043 0310 	orr.w	r3, r3, #16
 8006d8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d8c:	4b0e      	ldr	r3, [pc, #56]	; (8006dc8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8006d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d90:	f003 0310 	and.w	r3, r3, #16
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8006d98:	f44f 7320 	mov.w	r3, #640	; 0x280
 8006d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d9e:	2302      	movs	r3, #2
 8006da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006da6:	2300      	movs	r3, #0
 8006da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8006daa:	2306      	movs	r3, #6
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006dae:	f107 0314 	add.w	r3, r7, #20
 8006db2:	4619      	mov	r1, r3
 8006db4:	4805      	ldr	r0, [pc, #20]	; (8006dcc <HAL_DFSDM_ChannelMspInit+0x84>)
 8006db6:	f7fb fb69 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8006dba:	bf00      	nop
 8006dbc:	3728      	adds	r7, #40	; 0x28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	200000b0 	.word	0x200000b0
 8006dc8:	40021000 	.word	0x40021000
 8006dcc:	48001000 	.word	0x48001000

08006dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	; 0x28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dd8:	f107 0314 	add.w	r3, r7, #20
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	609a      	str	r2, [r3, #8]
 8006de4:	60da      	str	r2, [r3, #12]
 8006de6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a17      	ldr	r2, [pc, #92]	; (8006e4c <HAL_I2C_MspInit+0x7c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d128      	bne.n	8006e44 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006df2:	4b17      	ldr	r3, [pc, #92]	; (8006e50 <HAL_I2C_MspInit+0x80>)
 8006df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df6:	4a16      	ldr	r2, [pc, #88]	; (8006e50 <HAL_I2C_MspInit+0x80>)
 8006df8:	f043 0302 	orr.w	r3, r3, #2
 8006dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dfe:	4b14      	ldr	r3, [pc, #80]	; (8006e50 <HAL_I2C_MspInit+0x80>)
 8006e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	613b      	str	r3, [r7, #16]
 8006e08:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8006e0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e10:	2312      	movs	r3, #18
 8006e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e14:	2301      	movs	r3, #1
 8006e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006e1c:	2304      	movs	r3, #4
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e20:	f107 0314 	add.w	r3, r7, #20
 8006e24:	4619      	mov	r1, r3
 8006e26:	480b      	ldr	r0, [pc, #44]	; (8006e54 <HAL_I2C_MspInit+0x84>)
 8006e28:	f7fb fb30 	bl	800248c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006e2c:	4b08      	ldr	r3, [pc, #32]	; (8006e50 <HAL_I2C_MspInit+0x80>)
 8006e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e30:	4a07      	ldr	r2, [pc, #28]	; (8006e50 <HAL_I2C_MspInit+0x80>)
 8006e32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e36:	6593      	str	r3, [r2, #88]	; 0x58
 8006e38:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <HAL_I2C_MspInit+0x80>)
 8006e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006e44:	bf00      	nop
 8006e46:	3728      	adds	r7, #40	; 0x28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	40005800 	.word	0x40005800
 8006e50:	40021000 	.word	0x40021000
 8006e54:	48000400 	.word	0x48000400

08006e58 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08a      	sub	sp, #40	; 0x28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e60:	f107 0314 	add.w	r3, r7, #20
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	605a      	str	r2, [r3, #4]
 8006e6a:	609a      	str	r2, [r3, #8]
 8006e6c:	60da      	str	r2, [r3, #12]
 8006e6e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a17      	ldr	r2, [pc, #92]	; (8006ed4 <HAL_QSPI_MspInit+0x7c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d128      	bne.n	8006ecc <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006e7a:	4b17      	ldr	r3, [pc, #92]	; (8006ed8 <HAL_QSPI_MspInit+0x80>)
 8006e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e7e:	4a16      	ldr	r2, [pc, #88]	; (8006ed8 <HAL_QSPI_MspInit+0x80>)
 8006e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e84:	6513      	str	r3, [r2, #80]	; 0x50
 8006e86:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <HAL_QSPI_MspInit+0x80>)
 8006e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e8e:	613b      	str	r3, [r7, #16]
 8006e90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e92:	4b11      	ldr	r3, [pc, #68]	; (8006ed8 <HAL_QSPI_MspInit+0x80>)
 8006e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e96:	4a10      	ldr	r2, [pc, #64]	; (8006ed8 <HAL_QSPI_MspInit+0x80>)
 8006e98:	f043 0310 	orr.w	r3, r3, #16
 8006e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e9e:	4b0e      	ldr	r3, [pc, #56]	; (8006ed8 <HAL_QSPI_MspInit+0x80>)
 8006ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea2:	f003 0310 	and.w	r3, r3, #16
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8006eaa:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8006eae:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006ebc:	230a      	movs	r3, #10
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ec0:	f107 0314 	add.w	r3, r7, #20
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4805      	ldr	r0, [pc, #20]	; (8006edc <HAL_QSPI_MspInit+0x84>)
 8006ec8:	f7fb fae0 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8006ecc:	bf00      	nop
 8006ece:	3728      	adds	r7, #40	; 0x28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	a0001000 	.word	0xa0001000
 8006ed8:	40021000 	.word	0x40021000
 8006edc:	48001000 	.word	0x48001000

08006ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08a      	sub	sp, #40	; 0x28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ee8:	f107 0314 	add.w	r3, r7, #20
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	605a      	str	r2, [r3, #4]
 8006ef2:	609a      	str	r2, [r3, #8]
 8006ef4:	60da      	str	r2, [r3, #12]
 8006ef6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a17      	ldr	r2, [pc, #92]	; (8006f5c <HAL_SPI_MspInit+0x7c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d128      	bne.n	8006f54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006f02:	4b17      	ldr	r3, [pc, #92]	; (8006f60 <HAL_SPI_MspInit+0x80>)
 8006f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f06:	4a16      	ldr	r2, [pc, #88]	; (8006f60 <HAL_SPI_MspInit+0x80>)
 8006f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8006f0e:	4b14      	ldr	r3, [pc, #80]	; (8006f60 <HAL_SPI_MspInit+0x80>)
 8006f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f1a:	4b11      	ldr	r3, [pc, #68]	; (8006f60 <HAL_SPI_MspInit+0x80>)
 8006f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1e:	4a10      	ldr	r2, [pc, #64]	; (8006f60 <HAL_SPI_MspInit+0x80>)
 8006f20:	f043 0304 	orr.w	r3, r3, #4
 8006f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f26:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <HAL_SPI_MspInit+0x80>)
 8006f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f2a:	f003 0304 	and.w	r3, r3, #4
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8006f32:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f38:	2302      	movs	r3, #2
 8006f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f40:	2303      	movs	r3, #3
 8006f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006f44:	2306      	movs	r3, #6
 8006f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f48:	f107 0314 	add.w	r3, r7, #20
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4805      	ldr	r0, [pc, #20]	; (8006f64 <HAL_SPI_MspInit+0x84>)
 8006f50:	f7fb fa9c 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006f54:	bf00      	nop
 8006f56:	3728      	adds	r7, #40	; 0x28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40003c00 	.word	0x40003c00
 8006f60:	40021000 	.word	0x40021000
 8006f64:	48000800 	.word	0x48000800

08006f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08c      	sub	sp, #48	; 0x30
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f70:	f107 031c 	add.w	r3, r7, #28
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	605a      	str	r2, [r3, #4]
 8006f7a:	609a      	str	r2, [r3, #8]
 8006f7c:	60da      	str	r2, [r3, #12]
 8006f7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a2e      	ldr	r2, [pc, #184]	; (8007040 <HAL_UART_MspInit+0xd8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d128      	bne.n	8006fdc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006f8a:	4b2e      	ldr	r3, [pc, #184]	; (8007044 <HAL_UART_MspInit+0xdc>)
 8006f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f8e:	4a2d      	ldr	r2, [pc, #180]	; (8007044 <HAL_UART_MspInit+0xdc>)
 8006f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f94:	6613      	str	r3, [r2, #96]	; 0x60
 8006f96:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <HAL_UART_MspInit+0xdc>)
 8006f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f9e:	61bb      	str	r3, [r7, #24]
 8006fa0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fa2:	4b28      	ldr	r3, [pc, #160]	; (8007044 <HAL_UART_MspInit+0xdc>)
 8006fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa6:	4a27      	ldr	r2, [pc, #156]	; (8007044 <HAL_UART_MspInit+0xdc>)
 8006fa8:	f043 0302 	orr.w	r3, r3, #2
 8006fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fae:	4b25      	ldr	r3, [pc, #148]	; (8007044 <HAL_UART_MspInit+0xdc>)
 8006fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8006fba:	23c0      	movs	r3, #192	; 0xc0
 8006fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006fca:	2307      	movs	r3, #7
 8006fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fce:	f107 031c 	add.w	r3, r7, #28
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	481c      	ldr	r0, [pc, #112]	; (8007048 <HAL_UART_MspInit+0xe0>)
 8006fd6:	f7fb fa59 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006fda:	e02d      	b.n	8007038 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a1a      	ldr	r2, [pc, #104]	; (800704c <HAL_UART_MspInit+0xe4>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d128      	bne.n	8007038 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006fe6:	4b17      	ldr	r3, [pc, #92]	; (8007044 <HAL_UART_MspInit+0xdc>)
 8006fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fea:	4a16      	ldr	r2, [pc, #88]	; (8007044 <HAL_UART_MspInit+0xdc>)
 8006fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8006ff2:	4b14      	ldr	r3, [pc, #80]	; (8007044 <HAL_UART_MspInit+0xdc>)
 8006ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ffe:	4b11      	ldr	r3, [pc, #68]	; (8007044 <HAL_UART_MspInit+0xdc>)
 8007000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007002:	4a10      	ldr	r2, [pc, #64]	; (8007044 <HAL_UART_MspInit+0xdc>)
 8007004:	f043 0308 	orr.w	r3, r3, #8
 8007008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800700a:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <HAL_UART_MspInit+0xdc>)
 800700c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8007016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800701a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800701c:	2302      	movs	r3, #2
 800701e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007020:	2300      	movs	r3, #0
 8007022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007024:	2303      	movs	r3, #3
 8007026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007028:	2307      	movs	r3, #7
 800702a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800702c:	f107 031c 	add.w	r3, r7, #28
 8007030:	4619      	mov	r1, r3
 8007032:	4807      	ldr	r0, [pc, #28]	; (8007050 <HAL_UART_MspInit+0xe8>)
 8007034:	f7fb fa2a 	bl	800248c <HAL_GPIO_Init>
}
 8007038:	bf00      	nop
 800703a:	3730      	adds	r7, #48	; 0x30
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40013800 	.word	0x40013800
 8007044:	40021000 	.word	0x40021000
 8007048:	48000400 	.word	0x48000400
 800704c:	40004800 	.word	0x40004800
 8007050:	48000c00 	.word	0x48000c00

08007054 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	; 0x28
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800705c:	f107 0314 	add.w	r3, r7, #20
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	605a      	str	r2, [r3, #4]
 8007066:	609a      	str	r2, [r3, #8]
 8007068:	60da      	str	r2, [r3, #12]
 800706a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007074:	d154      	bne.n	8007120 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007076:	4b2c      	ldr	r3, [pc, #176]	; (8007128 <HAL_PCD_MspInit+0xd4>)
 8007078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707a:	4a2b      	ldr	r2, [pc, #172]	; (8007128 <HAL_PCD_MspInit+0xd4>)
 800707c:	f043 0301 	orr.w	r3, r3, #1
 8007080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007082:	4b29      	ldr	r3, [pc, #164]	; (8007128 <HAL_PCD_MspInit+0xd4>)
 8007084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	613b      	str	r3, [r7, #16]
 800708c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800708e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007094:	2300      	movs	r3, #0
 8007096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007098:	2300      	movs	r3, #0
 800709a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800709c:	f107 0314 	add.w	r3, r7, #20
 80070a0:	4619      	mov	r1, r3
 80070a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070a6:	f7fb f9f1 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80070aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80070ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b0:	2302      	movs	r3, #2
 80070b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b4:	2300      	movs	r3, #0
 80070b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070b8:	2303      	movs	r3, #3
 80070ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80070bc:	230a      	movs	r3, #10
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070c0:	f107 0314 	add.w	r3, r7, #20
 80070c4:	4619      	mov	r1, r3
 80070c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070ca:	f7fb f9df 	bl	800248c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80070ce:	4b16      	ldr	r3, [pc, #88]	; (8007128 <HAL_PCD_MspInit+0xd4>)
 80070d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d2:	4a15      	ldr	r2, [pc, #84]	; (8007128 <HAL_PCD_MspInit+0xd4>)
 80070d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070da:	4b13      	ldr	r3, [pc, #76]	; (8007128 <HAL_PCD_MspInit+0xd4>)
 80070dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070e6:	4b10      	ldr	r3, [pc, #64]	; (8007128 <HAL_PCD_MspInit+0xd4>)
 80070e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d114      	bne.n	800711c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070f2:	4b0d      	ldr	r3, [pc, #52]	; (8007128 <HAL_PCD_MspInit+0xd4>)
 80070f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f6:	4a0c      	ldr	r2, [pc, #48]	; (8007128 <HAL_PCD_MspInit+0xd4>)
 80070f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070fc:	6593      	str	r3, [r2, #88]	; 0x58
 80070fe:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <HAL_PCD_MspInit+0xd4>)
 8007100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007106:	60bb      	str	r3, [r7, #8]
 8007108:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800710a:	f7fb fe9d 	bl	8002e48 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800710e:	4b06      	ldr	r3, [pc, #24]	; (8007128 <HAL_PCD_MspInit+0xd4>)
 8007110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007112:	4a05      	ldr	r2, [pc, #20]	; (8007128 <HAL_PCD_MspInit+0xd4>)
 8007114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007118:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800711a:	e001      	b.n	8007120 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 800711c:	f7fb fe94 	bl	8002e48 <HAL_PWREx_EnableVddUSB>
}
 8007120:	bf00      	nop
 8007122:	3728      	adds	r7, #40	; 0x28
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	40021000 	.word	0x40021000

0800712c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b08c      	sub	sp, #48	; 0x30
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007134:	2300      	movs	r3, #0
 8007136:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800713c:	2200      	movs	r2, #0
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	2019      	movs	r0, #25
 8007142:	f7fb f86d 	bl	8002220 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8007146:	2019      	movs	r0, #25
 8007148:	f7fb f886 	bl	8002258 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800714c:	4b1e      	ldr	r3, [pc, #120]	; (80071c8 <HAL_InitTick+0x9c>)
 800714e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007150:	4a1d      	ldr	r2, [pc, #116]	; (80071c8 <HAL_InitTick+0x9c>)
 8007152:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007156:	6613      	str	r3, [r2, #96]	; 0x60
 8007158:	4b1b      	ldr	r3, [pc, #108]	; (80071c8 <HAL_InitTick+0x9c>)
 800715a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007164:	f107 0210 	add.w	r2, r7, #16
 8007168:	f107 0314 	add.w	r3, r7, #20
 800716c:	4611      	mov	r1, r2
 800716e:	4618      	mov	r0, r3
 8007170:	f7fc fccc 	bl	8003b0c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007174:	f7fc fcb4 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 8007178:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	4a13      	ldr	r2, [pc, #76]	; (80071cc <HAL_InitTick+0xa0>)
 800717e:	fba2 2303 	umull	r2, r3, r2, r3
 8007182:	0c9b      	lsrs	r3, r3, #18
 8007184:	3b01      	subs	r3, #1
 8007186:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007188:	4b11      	ldr	r3, [pc, #68]	; (80071d0 <HAL_InitTick+0xa4>)
 800718a:	4a12      	ldr	r2, [pc, #72]	; (80071d4 <HAL_InitTick+0xa8>)
 800718c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800718e:	4b10      	ldr	r3, [pc, #64]	; (80071d0 <HAL_InitTick+0xa4>)
 8007190:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007194:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007196:	4a0e      	ldr	r2, [pc, #56]	; (80071d0 <HAL_InitTick+0xa4>)
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800719c:	4b0c      	ldr	r3, [pc, #48]	; (80071d0 <HAL_InitTick+0xa4>)
 800719e:	2200      	movs	r2, #0
 80071a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071a2:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <HAL_InitTick+0xa4>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80071a8:	4809      	ldr	r0, [pc, #36]	; (80071d0 <HAL_InitTick+0xa4>)
 80071aa:	f7fd fa8b 	bl	80046c4 <HAL_TIM_Base_Init>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d104      	bne.n	80071be <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80071b4:	4806      	ldr	r0, [pc, #24]	; (80071d0 <HAL_InitTick+0xa4>)
 80071b6:	f7fd fabb 	bl	8004730 <HAL_TIM_Base_Start_IT>
 80071ba:	4603      	mov	r3, r0
 80071bc:	e000      	b.n	80071c0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3730      	adds	r7, #48	; 0x30
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	40021000 	.word	0x40021000
 80071cc:	431bde83 	.word	0x431bde83
 80071d0:	2000075c 	.word	0x2000075c
 80071d4:	40012c00 	.word	0x40012c00

080071d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80071d8:	b480      	push	{r7}
 80071da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80071dc:	bf00      	nop
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80071e6:	b480      	push	{r7}
 80071e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80071ea:	e7fe      	b.n	80071ea <HardFault_Handler+0x4>

080071ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80071f0:	e7fe      	b.n	80071f0 <MemManage_Handler+0x4>

080071f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80071f2:	b480      	push	{r7}
 80071f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80071f6:	e7fe      	b.n	80071f6 <BusFault_Handler+0x4>

080071f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80071f8:	b480      	push	{r7}
 80071fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80071fc:	e7fe      	b.n	80071fc <UsageFault_Handler+0x4>

080071fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80071fe:	b480      	push	{r7}
 8007200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007202:	bf00      	nop
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007210:	bf00      	nop
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800721a:	b480      	push	{r7}
 800721c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800721e:	bf00      	nop
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800722c:	2020      	movs	r0, #32
 800722e:	f7fb fb05 	bl	800283c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8007232:	2040      	movs	r0, #64	; 0x40
 8007234:	f7fb fb02 	bl	800283c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8007238:	2080      	movs	r0, #128	; 0x80
 800723a:	f7fb faff 	bl	800283c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800723e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007242:	f7fb fafb 	bl	800283c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007246:	bf00      	nop
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007250:	4802      	ldr	r0, [pc, #8]	; (800725c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8007252:	f7fd fa97 	bl	8004784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007256:	bf00      	nop
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	2000075c 	.word	0x2000075c

08007260 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007264:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007268:	f7fb fae8 	bl	800283c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800726c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007270:	f7fb fae4 	bl	800283c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007274:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007278:	f7fb fae0 	bl	800283c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800727c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007280:	f7fb fadc 	bl	800283c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007284:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007288:	f7fb fad8 	bl	800283c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800728c:	bf00      	nop
 800728e:	bd80      	pop	{r7, pc}

08007290 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007298:	4b11      	ldr	r3, [pc, #68]	; (80072e0 <_sbrk+0x50>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d102      	bne.n	80072a6 <_sbrk+0x16>
		heap_end = &end;
 80072a0:	4b0f      	ldr	r3, [pc, #60]	; (80072e0 <_sbrk+0x50>)
 80072a2:	4a10      	ldr	r2, [pc, #64]	; (80072e4 <_sbrk+0x54>)
 80072a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80072a6:	4b0e      	ldr	r3, [pc, #56]	; (80072e0 <_sbrk+0x50>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80072ac:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <_sbrk+0x50>)
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4413      	add	r3, r2
 80072b4:	466a      	mov	r2, sp
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d907      	bls.n	80072ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80072ba:	f000 f875 	bl	80073a8 <__errno>
 80072be:	4602      	mov	r2, r0
 80072c0:	230c      	movs	r3, #12
 80072c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80072c4:	f04f 33ff 	mov.w	r3, #4294967295
 80072c8:	e006      	b.n	80072d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80072ca:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <_sbrk+0x50>)
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4413      	add	r3, r2
 80072d2:	4a03      	ldr	r2, [pc, #12]	; (80072e0 <_sbrk+0x50>)
 80072d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80072d6:	68fb      	ldr	r3, [r7, #12]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	200000b4 	.word	0x200000b4
 80072e4:	200007a0 	.word	0x200007a0

080072e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80072ec:	4b17      	ldr	r3, [pc, #92]	; (800734c <SystemInit+0x64>)
 80072ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f2:	4a16      	ldr	r2, [pc, #88]	; (800734c <SystemInit+0x64>)
 80072f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80072fc:	4b14      	ldr	r3, [pc, #80]	; (8007350 <SystemInit+0x68>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a13      	ldr	r2, [pc, #76]	; (8007350 <SystemInit+0x68>)
 8007302:	f043 0301 	orr.w	r3, r3, #1
 8007306:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007308:	4b11      	ldr	r3, [pc, #68]	; (8007350 <SystemInit+0x68>)
 800730a:	2200      	movs	r2, #0
 800730c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800730e:	4b10      	ldr	r3, [pc, #64]	; (8007350 <SystemInit+0x68>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a0f      	ldr	r2, [pc, #60]	; (8007350 <SystemInit+0x68>)
 8007314:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007318:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800731c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800731e:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <SystemInit+0x68>)
 8007320:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007324:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007326:	4b0a      	ldr	r3, [pc, #40]	; (8007350 <SystemInit+0x68>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a09      	ldr	r2, [pc, #36]	; (8007350 <SystemInit+0x68>)
 800732c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007330:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007332:	4b07      	ldr	r3, [pc, #28]	; (8007350 <SystemInit+0x68>)
 8007334:	2200      	movs	r2, #0
 8007336:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007338:	4b04      	ldr	r3, [pc, #16]	; (800734c <SystemInit+0x64>)
 800733a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800733e:	609a      	str	r2, [r3, #8]
#endif
}
 8007340:	bf00      	nop
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	e000ed00 	.word	0xe000ed00
 8007350:	40021000 	.word	0x40021000

08007354 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800738c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007358:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800735a:	e003      	b.n	8007364 <LoopCopyDataInit>

0800735c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800735c:	4b0c      	ldr	r3, [pc, #48]	; (8007390 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800735e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007360:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007362:	3104      	adds	r1, #4

08007364 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007364:	480b      	ldr	r0, [pc, #44]	; (8007394 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007366:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007368:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800736a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800736c:	d3f6      	bcc.n	800735c <CopyDataInit>
	ldr	r2, =_sbss
 800736e:	4a0b      	ldr	r2, [pc, #44]	; (800739c <LoopForever+0x12>)
	b	LoopFillZerobss
 8007370:	e002      	b.n	8007378 <LoopFillZerobss>

08007372 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007372:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007374:	f842 3b04 	str.w	r3, [r2], #4

08007378 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007378:	4b09      	ldr	r3, [pc, #36]	; (80073a0 <LoopForever+0x16>)
	cmp	r2, r3
 800737a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800737c:	d3f9      	bcc.n	8007372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800737e:	f7ff ffb3 	bl	80072e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007382:	f000 f817 	bl	80073b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007386:	f7fe fc7f 	bl	8005c88 <main>

0800738a <LoopForever>:

LoopForever:
    b LoopForever
 800738a:	e7fe      	b.n	800738a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800738c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007390:	08008018 	.word	0x08008018
	ldr	r0, =_sdata
 8007394:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007398:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800739c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80073a0:	200007a0 	.word	0x200007a0

080073a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80073a4:	e7fe      	b.n	80073a4 <ADC1_2_IRQHandler>
	...

080073a8 <__errno>:
 80073a8:	4b01      	ldr	r3, [pc, #4]	; (80073b0 <__errno+0x8>)
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	2000000c 	.word	0x2000000c

080073b4 <__libc_init_array>:
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	4e0d      	ldr	r6, [pc, #52]	; (80073ec <__libc_init_array+0x38>)
 80073b8:	4c0d      	ldr	r4, [pc, #52]	; (80073f0 <__libc_init_array+0x3c>)
 80073ba:	1ba4      	subs	r4, r4, r6
 80073bc:	10a4      	asrs	r4, r4, #2
 80073be:	2500      	movs	r5, #0
 80073c0:	42a5      	cmp	r5, r4
 80073c2:	d109      	bne.n	80073d8 <__libc_init_array+0x24>
 80073c4:	4e0b      	ldr	r6, [pc, #44]	; (80073f4 <__libc_init_array+0x40>)
 80073c6:	4c0c      	ldr	r4, [pc, #48]	; (80073f8 <__libc_init_array+0x44>)
 80073c8:	f000 fc26 	bl	8007c18 <_init>
 80073cc:	1ba4      	subs	r4, r4, r6
 80073ce:	10a4      	asrs	r4, r4, #2
 80073d0:	2500      	movs	r5, #0
 80073d2:	42a5      	cmp	r5, r4
 80073d4:	d105      	bne.n	80073e2 <__libc_init_array+0x2e>
 80073d6:	bd70      	pop	{r4, r5, r6, pc}
 80073d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073dc:	4798      	blx	r3
 80073de:	3501      	adds	r5, #1
 80073e0:	e7ee      	b.n	80073c0 <__libc_init_array+0xc>
 80073e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073e6:	4798      	blx	r3
 80073e8:	3501      	adds	r5, #1
 80073ea:	e7f2      	b.n	80073d2 <__libc_init_array+0x1e>
 80073ec:	08008010 	.word	0x08008010
 80073f0:	08008010 	.word	0x08008010
 80073f4:	08008010 	.word	0x08008010
 80073f8:	08008014 	.word	0x08008014

080073fc <memset>:
 80073fc:	4402      	add	r2, r0
 80073fe:	4603      	mov	r3, r0
 8007400:	4293      	cmp	r3, r2
 8007402:	d100      	bne.n	8007406 <memset+0xa>
 8007404:	4770      	bx	lr
 8007406:	f803 1b01 	strb.w	r1, [r3], #1
 800740a:	e7f9      	b.n	8007400 <memset+0x4>

0800740c <siprintf>:
 800740c:	b40e      	push	{r1, r2, r3}
 800740e:	b500      	push	{lr}
 8007410:	b09c      	sub	sp, #112	; 0x70
 8007412:	ab1d      	add	r3, sp, #116	; 0x74
 8007414:	9002      	str	r0, [sp, #8]
 8007416:	9006      	str	r0, [sp, #24]
 8007418:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800741c:	4809      	ldr	r0, [pc, #36]	; (8007444 <siprintf+0x38>)
 800741e:	9107      	str	r1, [sp, #28]
 8007420:	9104      	str	r1, [sp, #16]
 8007422:	4909      	ldr	r1, [pc, #36]	; (8007448 <siprintf+0x3c>)
 8007424:	f853 2b04 	ldr.w	r2, [r3], #4
 8007428:	9105      	str	r1, [sp, #20]
 800742a:	6800      	ldr	r0, [r0, #0]
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	a902      	add	r1, sp, #8
 8007430:	f000 f866 	bl	8007500 <_svfiprintf_r>
 8007434:	9b02      	ldr	r3, [sp, #8]
 8007436:	2200      	movs	r2, #0
 8007438:	701a      	strb	r2, [r3, #0]
 800743a:	b01c      	add	sp, #112	; 0x70
 800743c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007440:	b003      	add	sp, #12
 8007442:	4770      	bx	lr
 8007444:	2000000c 	.word	0x2000000c
 8007448:	ffff0208 	.word	0xffff0208

0800744c <__ssputs_r>:
 800744c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007450:	688e      	ldr	r6, [r1, #8]
 8007452:	429e      	cmp	r6, r3
 8007454:	4682      	mov	sl, r0
 8007456:	460c      	mov	r4, r1
 8007458:	4690      	mov	r8, r2
 800745a:	4699      	mov	r9, r3
 800745c:	d837      	bhi.n	80074ce <__ssputs_r+0x82>
 800745e:	898a      	ldrh	r2, [r1, #12]
 8007460:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007464:	d031      	beq.n	80074ca <__ssputs_r+0x7e>
 8007466:	6825      	ldr	r5, [r4, #0]
 8007468:	6909      	ldr	r1, [r1, #16]
 800746a:	1a6f      	subs	r7, r5, r1
 800746c:	6965      	ldr	r5, [r4, #20]
 800746e:	2302      	movs	r3, #2
 8007470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007474:	fb95 f5f3 	sdiv	r5, r5, r3
 8007478:	f109 0301 	add.w	r3, r9, #1
 800747c:	443b      	add	r3, r7
 800747e:	429d      	cmp	r5, r3
 8007480:	bf38      	it	cc
 8007482:	461d      	movcc	r5, r3
 8007484:	0553      	lsls	r3, r2, #21
 8007486:	d530      	bpl.n	80074ea <__ssputs_r+0x9e>
 8007488:	4629      	mov	r1, r5
 800748a:	f000 fb2b 	bl	8007ae4 <_malloc_r>
 800748e:	4606      	mov	r6, r0
 8007490:	b950      	cbnz	r0, 80074a8 <__ssputs_r+0x5c>
 8007492:	230c      	movs	r3, #12
 8007494:	f8ca 3000 	str.w	r3, [sl]
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800749e:	81a3      	strh	r3, [r4, #12]
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a8:	463a      	mov	r2, r7
 80074aa:	6921      	ldr	r1, [r4, #16]
 80074ac:	f000 faa8 	bl	8007a00 <memcpy>
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ba:	81a3      	strh	r3, [r4, #12]
 80074bc:	6126      	str	r6, [r4, #16]
 80074be:	6165      	str	r5, [r4, #20]
 80074c0:	443e      	add	r6, r7
 80074c2:	1bed      	subs	r5, r5, r7
 80074c4:	6026      	str	r6, [r4, #0]
 80074c6:	60a5      	str	r5, [r4, #8]
 80074c8:	464e      	mov	r6, r9
 80074ca:	454e      	cmp	r6, r9
 80074cc:	d900      	bls.n	80074d0 <__ssputs_r+0x84>
 80074ce:	464e      	mov	r6, r9
 80074d0:	4632      	mov	r2, r6
 80074d2:	4641      	mov	r1, r8
 80074d4:	6820      	ldr	r0, [r4, #0]
 80074d6:	f000 fa9e 	bl	8007a16 <memmove>
 80074da:	68a3      	ldr	r3, [r4, #8]
 80074dc:	1b9b      	subs	r3, r3, r6
 80074de:	60a3      	str	r3, [r4, #8]
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	441e      	add	r6, r3
 80074e4:	6026      	str	r6, [r4, #0]
 80074e6:	2000      	movs	r0, #0
 80074e8:	e7dc      	b.n	80074a4 <__ssputs_r+0x58>
 80074ea:	462a      	mov	r2, r5
 80074ec:	f000 fb54 	bl	8007b98 <_realloc_r>
 80074f0:	4606      	mov	r6, r0
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d1e2      	bne.n	80074bc <__ssputs_r+0x70>
 80074f6:	6921      	ldr	r1, [r4, #16]
 80074f8:	4650      	mov	r0, sl
 80074fa:	f000 faa5 	bl	8007a48 <_free_r>
 80074fe:	e7c8      	b.n	8007492 <__ssputs_r+0x46>

08007500 <_svfiprintf_r>:
 8007500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007504:	461d      	mov	r5, r3
 8007506:	898b      	ldrh	r3, [r1, #12]
 8007508:	061f      	lsls	r7, r3, #24
 800750a:	b09d      	sub	sp, #116	; 0x74
 800750c:	4680      	mov	r8, r0
 800750e:	460c      	mov	r4, r1
 8007510:	4616      	mov	r6, r2
 8007512:	d50f      	bpl.n	8007534 <_svfiprintf_r+0x34>
 8007514:	690b      	ldr	r3, [r1, #16]
 8007516:	b96b      	cbnz	r3, 8007534 <_svfiprintf_r+0x34>
 8007518:	2140      	movs	r1, #64	; 0x40
 800751a:	f000 fae3 	bl	8007ae4 <_malloc_r>
 800751e:	6020      	str	r0, [r4, #0]
 8007520:	6120      	str	r0, [r4, #16]
 8007522:	b928      	cbnz	r0, 8007530 <_svfiprintf_r+0x30>
 8007524:	230c      	movs	r3, #12
 8007526:	f8c8 3000 	str.w	r3, [r8]
 800752a:	f04f 30ff 	mov.w	r0, #4294967295
 800752e:	e0c8      	b.n	80076c2 <_svfiprintf_r+0x1c2>
 8007530:	2340      	movs	r3, #64	; 0x40
 8007532:	6163      	str	r3, [r4, #20]
 8007534:	2300      	movs	r3, #0
 8007536:	9309      	str	r3, [sp, #36]	; 0x24
 8007538:	2320      	movs	r3, #32
 800753a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800753e:	2330      	movs	r3, #48	; 0x30
 8007540:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007544:	9503      	str	r5, [sp, #12]
 8007546:	f04f 0b01 	mov.w	fp, #1
 800754a:	4637      	mov	r7, r6
 800754c:	463d      	mov	r5, r7
 800754e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007552:	b10b      	cbz	r3, 8007558 <_svfiprintf_r+0x58>
 8007554:	2b25      	cmp	r3, #37	; 0x25
 8007556:	d13e      	bne.n	80075d6 <_svfiprintf_r+0xd6>
 8007558:	ebb7 0a06 	subs.w	sl, r7, r6
 800755c:	d00b      	beq.n	8007576 <_svfiprintf_r+0x76>
 800755e:	4653      	mov	r3, sl
 8007560:	4632      	mov	r2, r6
 8007562:	4621      	mov	r1, r4
 8007564:	4640      	mov	r0, r8
 8007566:	f7ff ff71 	bl	800744c <__ssputs_r>
 800756a:	3001      	adds	r0, #1
 800756c:	f000 80a4 	beq.w	80076b8 <_svfiprintf_r+0x1b8>
 8007570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007572:	4453      	add	r3, sl
 8007574:	9309      	str	r3, [sp, #36]	; 0x24
 8007576:	783b      	ldrb	r3, [r7, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 809d 	beq.w	80076b8 <_svfiprintf_r+0x1b8>
 800757e:	2300      	movs	r3, #0
 8007580:	f04f 32ff 	mov.w	r2, #4294967295
 8007584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007588:	9304      	str	r3, [sp, #16]
 800758a:	9307      	str	r3, [sp, #28]
 800758c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007590:	931a      	str	r3, [sp, #104]	; 0x68
 8007592:	462f      	mov	r7, r5
 8007594:	2205      	movs	r2, #5
 8007596:	f817 1b01 	ldrb.w	r1, [r7], #1
 800759a:	4850      	ldr	r0, [pc, #320]	; (80076dc <_svfiprintf_r+0x1dc>)
 800759c:	f7f8 fe20 	bl	80001e0 <memchr>
 80075a0:	9b04      	ldr	r3, [sp, #16]
 80075a2:	b9d0      	cbnz	r0, 80075da <_svfiprintf_r+0xda>
 80075a4:	06d9      	lsls	r1, r3, #27
 80075a6:	bf44      	itt	mi
 80075a8:	2220      	movmi	r2, #32
 80075aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075ae:	071a      	lsls	r2, r3, #28
 80075b0:	bf44      	itt	mi
 80075b2:	222b      	movmi	r2, #43	; 0x2b
 80075b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075b8:	782a      	ldrb	r2, [r5, #0]
 80075ba:	2a2a      	cmp	r2, #42	; 0x2a
 80075bc:	d015      	beq.n	80075ea <_svfiprintf_r+0xea>
 80075be:	9a07      	ldr	r2, [sp, #28]
 80075c0:	462f      	mov	r7, r5
 80075c2:	2000      	movs	r0, #0
 80075c4:	250a      	movs	r5, #10
 80075c6:	4639      	mov	r1, r7
 80075c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075cc:	3b30      	subs	r3, #48	; 0x30
 80075ce:	2b09      	cmp	r3, #9
 80075d0:	d94d      	bls.n	800766e <_svfiprintf_r+0x16e>
 80075d2:	b1b8      	cbz	r0, 8007604 <_svfiprintf_r+0x104>
 80075d4:	e00f      	b.n	80075f6 <_svfiprintf_r+0xf6>
 80075d6:	462f      	mov	r7, r5
 80075d8:	e7b8      	b.n	800754c <_svfiprintf_r+0x4c>
 80075da:	4a40      	ldr	r2, [pc, #256]	; (80076dc <_svfiprintf_r+0x1dc>)
 80075dc:	1a80      	subs	r0, r0, r2
 80075de:	fa0b f000 	lsl.w	r0, fp, r0
 80075e2:	4318      	orrs	r0, r3
 80075e4:	9004      	str	r0, [sp, #16]
 80075e6:	463d      	mov	r5, r7
 80075e8:	e7d3      	b.n	8007592 <_svfiprintf_r+0x92>
 80075ea:	9a03      	ldr	r2, [sp, #12]
 80075ec:	1d11      	adds	r1, r2, #4
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	9103      	str	r1, [sp, #12]
 80075f2:	2a00      	cmp	r2, #0
 80075f4:	db01      	blt.n	80075fa <_svfiprintf_r+0xfa>
 80075f6:	9207      	str	r2, [sp, #28]
 80075f8:	e004      	b.n	8007604 <_svfiprintf_r+0x104>
 80075fa:	4252      	negs	r2, r2
 80075fc:	f043 0302 	orr.w	r3, r3, #2
 8007600:	9207      	str	r2, [sp, #28]
 8007602:	9304      	str	r3, [sp, #16]
 8007604:	783b      	ldrb	r3, [r7, #0]
 8007606:	2b2e      	cmp	r3, #46	; 0x2e
 8007608:	d10c      	bne.n	8007624 <_svfiprintf_r+0x124>
 800760a:	787b      	ldrb	r3, [r7, #1]
 800760c:	2b2a      	cmp	r3, #42	; 0x2a
 800760e:	d133      	bne.n	8007678 <_svfiprintf_r+0x178>
 8007610:	9b03      	ldr	r3, [sp, #12]
 8007612:	1d1a      	adds	r2, r3, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	9203      	str	r2, [sp, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	bfb8      	it	lt
 800761c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007620:	3702      	adds	r7, #2
 8007622:	9305      	str	r3, [sp, #20]
 8007624:	4d2e      	ldr	r5, [pc, #184]	; (80076e0 <_svfiprintf_r+0x1e0>)
 8007626:	7839      	ldrb	r1, [r7, #0]
 8007628:	2203      	movs	r2, #3
 800762a:	4628      	mov	r0, r5
 800762c:	f7f8 fdd8 	bl	80001e0 <memchr>
 8007630:	b138      	cbz	r0, 8007642 <_svfiprintf_r+0x142>
 8007632:	2340      	movs	r3, #64	; 0x40
 8007634:	1b40      	subs	r0, r0, r5
 8007636:	fa03 f000 	lsl.w	r0, r3, r0
 800763a:	9b04      	ldr	r3, [sp, #16]
 800763c:	4303      	orrs	r3, r0
 800763e:	3701      	adds	r7, #1
 8007640:	9304      	str	r3, [sp, #16]
 8007642:	7839      	ldrb	r1, [r7, #0]
 8007644:	4827      	ldr	r0, [pc, #156]	; (80076e4 <_svfiprintf_r+0x1e4>)
 8007646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800764a:	2206      	movs	r2, #6
 800764c:	1c7e      	adds	r6, r7, #1
 800764e:	f7f8 fdc7 	bl	80001e0 <memchr>
 8007652:	2800      	cmp	r0, #0
 8007654:	d038      	beq.n	80076c8 <_svfiprintf_r+0x1c8>
 8007656:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <_svfiprintf_r+0x1e8>)
 8007658:	bb13      	cbnz	r3, 80076a0 <_svfiprintf_r+0x1a0>
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	3307      	adds	r3, #7
 800765e:	f023 0307 	bic.w	r3, r3, #7
 8007662:	3308      	adds	r3, #8
 8007664:	9303      	str	r3, [sp, #12]
 8007666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007668:	444b      	add	r3, r9
 800766a:	9309      	str	r3, [sp, #36]	; 0x24
 800766c:	e76d      	b.n	800754a <_svfiprintf_r+0x4a>
 800766e:	fb05 3202 	mla	r2, r5, r2, r3
 8007672:	2001      	movs	r0, #1
 8007674:	460f      	mov	r7, r1
 8007676:	e7a6      	b.n	80075c6 <_svfiprintf_r+0xc6>
 8007678:	2300      	movs	r3, #0
 800767a:	3701      	adds	r7, #1
 800767c:	9305      	str	r3, [sp, #20]
 800767e:	4619      	mov	r1, r3
 8007680:	250a      	movs	r5, #10
 8007682:	4638      	mov	r0, r7
 8007684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007688:	3a30      	subs	r2, #48	; 0x30
 800768a:	2a09      	cmp	r2, #9
 800768c:	d903      	bls.n	8007696 <_svfiprintf_r+0x196>
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0c8      	beq.n	8007624 <_svfiprintf_r+0x124>
 8007692:	9105      	str	r1, [sp, #20]
 8007694:	e7c6      	b.n	8007624 <_svfiprintf_r+0x124>
 8007696:	fb05 2101 	mla	r1, r5, r1, r2
 800769a:	2301      	movs	r3, #1
 800769c:	4607      	mov	r7, r0
 800769e:	e7f0      	b.n	8007682 <_svfiprintf_r+0x182>
 80076a0:	ab03      	add	r3, sp, #12
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	4622      	mov	r2, r4
 80076a6:	4b11      	ldr	r3, [pc, #68]	; (80076ec <_svfiprintf_r+0x1ec>)
 80076a8:	a904      	add	r1, sp, #16
 80076aa:	4640      	mov	r0, r8
 80076ac:	f3af 8000 	nop.w
 80076b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80076b4:	4681      	mov	r9, r0
 80076b6:	d1d6      	bne.n	8007666 <_svfiprintf_r+0x166>
 80076b8:	89a3      	ldrh	r3, [r4, #12]
 80076ba:	065b      	lsls	r3, r3, #25
 80076bc:	f53f af35 	bmi.w	800752a <_svfiprintf_r+0x2a>
 80076c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076c2:	b01d      	add	sp, #116	; 0x74
 80076c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c8:	ab03      	add	r3, sp, #12
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	4622      	mov	r2, r4
 80076ce:	4b07      	ldr	r3, [pc, #28]	; (80076ec <_svfiprintf_r+0x1ec>)
 80076d0:	a904      	add	r1, sp, #16
 80076d2:	4640      	mov	r0, r8
 80076d4:	f000 f882 	bl	80077dc <_printf_i>
 80076d8:	e7ea      	b.n	80076b0 <_svfiprintf_r+0x1b0>
 80076da:	bf00      	nop
 80076dc:	08007fd4 	.word	0x08007fd4
 80076e0:	08007fda 	.word	0x08007fda
 80076e4:	08007fde 	.word	0x08007fde
 80076e8:	00000000 	.word	0x00000000
 80076ec:	0800744d 	.word	0x0800744d

080076f0 <_printf_common>:
 80076f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076f4:	4691      	mov	r9, r2
 80076f6:	461f      	mov	r7, r3
 80076f8:	688a      	ldr	r2, [r1, #8]
 80076fa:	690b      	ldr	r3, [r1, #16]
 80076fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007700:	4293      	cmp	r3, r2
 8007702:	bfb8      	it	lt
 8007704:	4613      	movlt	r3, r2
 8007706:	f8c9 3000 	str.w	r3, [r9]
 800770a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800770e:	4606      	mov	r6, r0
 8007710:	460c      	mov	r4, r1
 8007712:	b112      	cbz	r2, 800771a <_printf_common+0x2a>
 8007714:	3301      	adds	r3, #1
 8007716:	f8c9 3000 	str.w	r3, [r9]
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	0699      	lsls	r1, r3, #26
 800771e:	bf42      	ittt	mi
 8007720:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007724:	3302      	addmi	r3, #2
 8007726:	f8c9 3000 	strmi.w	r3, [r9]
 800772a:	6825      	ldr	r5, [r4, #0]
 800772c:	f015 0506 	ands.w	r5, r5, #6
 8007730:	d107      	bne.n	8007742 <_printf_common+0x52>
 8007732:	f104 0a19 	add.w	sl, r4, #25
 8007736:	68e3      	ldr	r3, [r4, #12]
 8007738:	f8d9 2000 	ldr.w	r2, [r9]
 800773c:	1a9b      	subs	r3, r3, r2
 800773e:	42ab      	cmp	r3, r5
 8007740:	dc28      	bgt.n	8007794 <_printf_common+0xa4>
 8007742:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	3300      	adds	r3, #0
 800774a:	bf18      	it	ne
 800774c:	2301      	movne	r3, #1
 800774e:	0692      	lsls	r2, r2, #26
 8007750:	d42d      	bmi.n	80077ae <_printf_common+0xbe>
 8007752:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007756:	4639      	mov	r1, r7
 8007758:	4630      	mov	r0, r6
 800775a:	47c0      	blx	r8
 800775c:	3001      	adds	r0, #1
 800775e:	d020      	beq.n	80077a2 <_printf_common+0xb2>
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	68e5      	ldr	r5, [r4, #12]
 8007764:	f8d9 2000 	ldr.w	r2, [r9]
 8007768:	f003 0306 	and.w	r3, r3, #6
 800776c:	2b04      	cmp	r3, #4
 800776e:	bf08      	it	eq
 8007770:	1aad      	subeq	r5, r5, r2
 8007772:	68a3      	ldr	r3, [r4, #8]
 8007774:	6922      	ldr	r2, [r4, #16]
 8007776:	bf0c      	ite	eq
 8007778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800777c:	2500      	movne	r5, #0
 800777e:	4293      	cmp	r3, r2
 8007780:	bfc4      	itt	gt
 8007782:	1a9b      	subgt	r3, r3, r2
 8007784:	18ed      	addgt	r5, r5, r3
 8007786:	f04f 0900 	mov.w	r9, #0
 800778a:	341a      	adds	r4, #26
 800778c:	454d      	cmp	r5, r9
 800778e:	d11a      	bne.n	80077c6 <_printf_common+0xd6>
 8007790:	2000      	movs	r0, #0
 8007792:	e008      	b.n	80077a6 <_printf_common+0xb6>
 8007794:	2301      	movs	r3, #1
 8007796:	4652      	mov	r2, sl
 8007798:	4639      	mov	r1, r7
 800779a:	4630      	mov	r0, r6
 800779c:	47c0      	blx	r8
 800779e:	3001      	adds	r0, #1
 80077a0:	d103      	bne.n	80077aa <_printf_common+0xba>
 80077a2:	f04f 30ff 	mov.w	r0, #4294967295
 80077a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077aa:	3501      	adds	r5, #1
 80077ac:	e7c3      	b.n	8007736 <_printf_common+0x46>
 80077ae:	18e1      	adds	r1, r4, r3
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	2030      	movs	r0, #48	; 0x30
 80077b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077b8:	4422      	add	r2, r4
 80077ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077c2:	3302      	adds	r3, #2
 80077c4:	e7c5      	b.n	8007752 <_printf_common+0x62>
 80077c6:	2301      	movs	r3, #1
 80077c8:	4622      	mov	r2, r4
 80077ca:	4639      	mov	r1, r7
 80077cc:	4630      	mov	r0, r6
 80077ce:	47c0      	blx	r8
 80077d0:	3001      	adds	r0, #1
 80077d2:	d0e6      	beq.n	80077a2 <_printf_common+0xb2>
 80077d4:	f109 0901 	add.w	r9, r9, #1
 80077d8:	e7d8      	b.n	800778c <_printf_common+0x9c>
	...

080077dc <_printf_i>:
 80077dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80077e4:	460c      	mov	r4, r1
 80077e6:	7e09      	ldrb	r1, [r1, #24]
 80077e8:	b085      	sub	sp, #20
 80077ea:	296e      	cmp	r1, #110	; 0x6e
 80077ec:	4617      	mov	r7, r2
 80077ee:	4606      	mov	r6, r0
 80077f0:	4698      	mov	r8, r3
 80077f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077f4:	f000 80b3 	beq.w	800795e <_printf_i+0x182>
 80077f8:	d822      	bhi.n	8007840 <_printf_i+0x64>
 80077fa:	2963      	cmp	r1, #99	; 0x63
 80077fc:	d036      	beq.n	800786c <_printf_i+0x90>
 80077fe:	d80a      	bhi.n	8007816 <_printf_i+0x3a>
 8007800:	2900      	cmp	r1, #0
 8007802:	f000 80b9 	beq.w	8007978 <_printf_i+0x19c>
 8007806:	2958      	cmp	r1, #88	; 0x58
 8007808:	f000 8083 	beq.w	8007912 <_printf_i+0x136>
 800780c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007810:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007814:	e032      	b.n	800787c <_printf_i+0xa0>
 8007816:	2964      	cmp	r1, #100	; 0x64
 8007818:	d001      	beq.n	800781e <_printf_i+0x42>
 800781a:	2969      	cmp	r1, #105	; 0x69
 800781c:	d1f6      	bne.n	800780c <_printf_i+0x30>
 800781e:	6820      	ldr	r0, [r4, #0]
 8007820:	6813      	ldr	r3, [r2, #0]
 8007822:	0605      	lsls	r5, r0, #24
 8007824:	f103 0104 	add.w	r1, r3, #4
 8007828:	d52a      	bpl.n	8007880 <_printf_i+0xa4>
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6011      	str	r1, [r2, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	da03      	bge.n	800783a <_printf_i+0x5e>
 8007832:	222d      	movs	r2, #45	; 0x2d
 8007834:	425b      	negs	r3, r3
 8007836:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800783a:	486f      	ldr	r0, [pc, #444]	; (80079f8 <_printf_i+0x21c>)
 800783c:	220a      	movs	r2, #10
 800783e:	e039      	b.n	80078b4 <_printf_i+0xd8>
 8007840:	2973      	cmp	r1, #115	; 0x73
 8007842:	f000 809d 	beq.w	8007980 <_printf_i+0x1a4>
 8007846:	d808      	bhi.n	800785a <_printf_i+0x7e>
 8007848:	296f      	cmp	r1, #111	; 0x6f
 800784a:	d020      	beq.n	800788e <_printf_i+0xb2>
 800784c:	2970      	cmp	r1, #112	; 0x70
 800784e:	d1dd      	bne.n	800780c <_printf_i+0x30>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	f043 0320 	orr.w	r3, r3, #32
 8007856:	6023      	str	r3, [r4, #0]
 8007858:	e003      	b.n	8007862 <_printf_i+0x86>
 800785a:	2975      	cmp	r1, #117	; 0x75
 800785c:	d017      	beq.n	800788e <_printf_i+0xb2>
 800785e:	2978      	cmp	r1, #120	; 0x78
 8007860:	d1d4      	bne.n	800780c <_printf_i+0x30>
 8007862:	2378      	movs	r3, #120	; 0x78
 8007864:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007868:	4864      	ldr	r0, [pc, #400]	; (80079fc <_printf_i+0x220>)
 800786a:	e055      	b.n	8007918 <_printf_i+0x13c>
 800786c:	6813      	ldr	r3, [r2, #0]
 800786e:	1d19      	adds	r1, r3, #4
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6011      	str	r1, [r2, #0]
 8007874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800787c:	2301      	movs	r3, #1
 800787e:	e08c      	b.n	800799a <_printf_i+0x1be>
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6011      	str	r1, [r2, #0]
 8007884:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007888:	bf18      	it	ne
 800788a:	b21b      	sxthne	r3, r3
 800788c:	e7cf      	b.n	800782e <_printf_i+0x52>
 800788e:	6813      	ldr	r3, [r2, #0]
 8007890:	6825      	ldr	r5, [r4, #0]
 8007892:	1d18      	adds	r0, r3, #4
 8007894:	6010      	str	r0, [r2, #0]
 8007896:	0628      	lsls	r0, r5, #24
 8007898:	d501      	bpl.n	800789e <_printf_i+0xc2>
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	e002      	b.n	80078a4 <_printf_i+0xc8>
 800789e:	0668      	lsls	r0, r5, #25
 80078a0:	d5fb      	bpl.n	800789a <_printf_i+0xbe>
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	4854      	ldr	r0, [pc, #336]	; (80079f8 <_printf_i+0x21c>)
 80078a6:	296f      	cmp	r1, #111	; 0x6f
 80078a8:	bf14      	ite	ne
 80078aa:	220a      	movne	r2, #10
 80078ac:	2208      	moveq	r2, #8
 80078ae:	2100      	movs	r1, #0
 80078b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078b4:	6865      	ldr	r5, [r4, #4]
 80078b6:	60a5      	str	r5, [r4, #8]
 80078b8:	2d00      	cmp	r5, #0
 80078ba:	f2c0 8095 	blt.w	80079e8 <_printf_i+0x20c>
 80078be:	6821      	ldr	r1, [r4, #0]
 80078c0:	f021 0104 	bic.w	r1, r1, #4
 80078c4:	6021      	str	r1, [r4, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d13d      	bne.n	8007946 <_printf_i+0x16a>
 80078ca:	2d00      	cmp	r5, #0
 80078cc:	f040 808e 	bne.w	80079ec <_printf_i+0x210>
 80078d0:	4665      	mov	r5, ip
 80078d2:	2a08      	cmp	r2, #8
 80078d4:	d10b      	bne.n	80078ee <_printf_i+0x112>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	07db      	lsls	r3, r3, #31
 80078da:	d508      	bpl.n	80078ee <_printf_i+0x112>
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	6862      	ldr	r2, [r4, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	bfde      	ittt	le
 80078e4:	2330      	movle	r3, #48	; 0x30
 80078e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078ee:	ebac 0305 	sub.w	r3, ip, r5
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	f8cd 8000 	str.w	r8, [sp]
 80078f8:	463b      	mov	r3, r7
 80078fa:	aa03      	add	r2, sp, #12
 80078fc:	4621      	mov	r1, r4
 80078fe:	4630      	mov	r0, r6
 8007900:	f7ff fef6 	bl	80076f0 <_printf_common>
 8007904:	3001      	adds	r0, #1
 8007906:	d14d      	bne.n	80079a4 <_printf_i+0x1c8>
 8007908:	f04f 30ff 	mov.w	r0, #4294967295
 800790c:	b005      	add	sp, #20
 800790e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007912:	4839      	ldr	r0, [pc, #228]	; (80079f8 <_printf_i+0x21c>)
 8007914:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007918:	6813      	ldr	r3, [r2, #0]
 800791a:	6821      	ldr	r1, [r4, #0]
 800791c:	1d1d      	adds	r5, r3, #4
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6015      	str	r5, [r2, #0]
 8007922:	060a      	lsls	r2, r1, #24
 8007924:	d50b      	bpl.n	800793e <_printf_i+0x162>
 8007926:	07ca      	lsls	r2, r1, #31
 8007928:	bf44      	itt	mi
 800792a:	f041 0120 	orrmi.w	r1, r1, #32
 800792e:	6021      	strmi	r1, [r4, #0]
 8007930:	b91b      	cbnz	r3, 800793a <_printf_i+0x15e>
 8007932:	6822      	ldr	r2, [r4, #0]
 8007934:	f022 0220 	bic.w	r2, r2, #32
 8007938:	6022      	str	r2, [r4, #0]
 800793a:	2210      	movs	r2, #16
 800793c:	e7b7      	b.n	80078ae <_printf_i+0xd2>
 800793e:	064d      	lsls	r5, r1, #25
 8007940:	bf48      	it	mi
 8007942:	b29b      	uxthmi	r3, r3
 8007944:	e7ef      	b.n	8007926 <_printf_i+0x14a>
 8007946:	4665      	mov	r5, ip
 8007948:	fbb3 f1f2 	udiv	r1, r3, r2
 800794c:	fb02 3311 	mls	r3, r2, r1, r3
 8007950:	5cc3      	ldrb	r3, [r0, r3]
 8007952:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007956:	460b      	mov	r3, r1
 8007958:	2900      	cmp	r1, #0
 800795a:	d1f5      	bne.n	8007948 <_printf_i+0x16c>
 800795c:	e7b9      	b.n	80078d2 <_printf_i+0xf6>
 800795e:	6813      	ldr	r3, [r2, #0]
 8007960:	6825      	ldr	r5, [r4, #0]
 8007962:	6961      	ldr	r1, [r4, #20]
 8007964:	1d18      	adds	r0, r3, #4
 8007966:	6010      	str	r0, [r2, #0]
 8007968:	0628      	lsls	r0, r5, #24
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	d501      	bpl.n	8007972 <_printf_i+0x196>
 800796e:	6019      	str	r1, [r3, #0]
 8007970:	e002      	b.n	8007978 <_printf_i+0x19c>
 8007972:	066a      	lsls	r2, r5, #25
 8007974:	d5fb      	bpl.n	800796e <_printf_i+0x192>
 8007976:	8019      	strh	r1, [r3, #0]
 8007978:	2300      	movs	r3, #0
 800797a:	6123      	str	r3, [r4, #16]
 800797c:	4665      	mov	r5, ip
 800797e:	e7b9      	b.n	80078f4 <_printf_i+0x118>
 8007980:	6813      	ldr	r3, [r2, #0]
 8007982:	1d19      	adds	r1, r3, #4
 8007984:	6011      	str	r1, [r2, #0]
 8007986:	681d      	ldr	r5, [r3, #0]
 8007988:	6862      	ldr	r2, [r4, #4]
 800798a:	2100      	movs	r1, #0
 800798c:	4628      	mov	r0, r5
 800798e:	f7f8 fc27 	bl	80001e0 <memchr>
 8007992:	b108      	cbz	r0, 8007998 <_printf_i+0x1bc>
 8007994:	1b40      	subs	r0, r0, r5
 8007996:	6060      	str	r0, [r4, #4]
 8007998:	6863      	ldr	r3, [r4, #4]
 800799a:	6123      	str	r3, [r4, #16]
 800799c:	2300      	movs	r3, #0
 800799e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079a2:	e7a7      	b.n	80078f4 <_printf_i+0x118>
 80079a4:	6923      	ldr	r3, [r4, #16]
 80079a6:	462a      	mov	r2, r5
 80079a8:	4639      	mov	r1, r7
 80079aa:	4630      	mov	r0, r6
 80079ac:	47c0      	blx	r8
 80079ae:	3001      	adds	r0, #1
 80079b0:	d0aa      	beq.n	8007908 <_printf_i+0x12c>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	079b      	lsls	r3, r3, #30
 80079b6:	d413      	bmi.n	80079e0 <_printf_i+0x204>
 80079b8:	68e0      	ldr	r0, [r4, #12]
 80079ba:	9b03      	ldr	r3, [sp, #12]
 80079bc:	4298      	cmp	r0, r3
 80079be:	bfb8      	it	lt
 80079c0:	4618      	movlt	r0, r3
 80079c2:	e7a3      	b.n	800790c <_printf_i+0x130>
 80079c4:	2301      	movs	r3, #1
 80079c6:	464a      	mov	r2, r9
 80079c8:	4639      	mov	r1, r7
 80079ca:	4630      	mov	r0, r6
 80079cc:	47c0      	blx	r8
 80079ce:	3001      	adds	r0, #1
 80079d0:	d09a      	beq.n	8007908 <_printf_i+0x12c>
 80079d2:	3501      	adds	r5, #1
 80079d4:	68e3      	ldr	r3, [r4, #12]
 80079d6:	9a03      	ldr	r2, [sp, #12]
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	42ab      	cmp	r3, r5
 80079dc:	dcf2      	bgt.n	80079c4 <_printf_i+0x1e8>
 80079de:	e7eb      	b.n	80079b8 <_printf_i+0x1dc>
 80079e0:	2500      	movs	r5, #0
 80079e2:	f104 0919 	add.w	r9, r4, #25
 80079e6:	e7f5      	b.n	80079d4 <_printf_i+0x1f8>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1ac      	bne.n	8007946 <_printf_i+0x16a>
 80079ec:	7803      	ldrb	r3, [r0, #0]
 80079ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079f6:	e76c      	b.n	80078d2 <_printf_i+0xf6>
 80079f8:	08007fe5 	.word	0x08007fe5
 80079fc:	08007ff6 	.word	0x08007ff6

08007a00 <memcpy>:
 8007a00:	b510      	push	{r4, lr}
 8007a02:	1e43      	subs	r3, r0, #1
 8007a04:	440a      	add	r2, r1
 8007a06:	4291      	cmp	r1, r2
 8007a08:	d100      	bne.n	8007a0c <memcpy+0xc>
 8007a0a:	bd10      	pop	{r4, pc}
 8007a0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a14:	e7f7      	b.n	8007a06 <memcpy+0x6>

08007a16 <memmove>:
 8007a16:	4288      	cmp	r0, r1
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	eb01 0302 	add.w	r3, r1, r2
 8007a1e:	d807      	bhi.n	8007a30 <memmove+0x1a>
 8007a20:	1e42      	subs	r2, r0, #1
 8007a22:	4299      	cmp	r1, r3
 8007a24:	d00a      	beq.n	8007a3c <memmove+0x26>
 8007a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a2a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007a2e:	e7f8      	b.n	8007a22 <memmove+0xc>
 8007a30:	4283      	cmp	r3, r0
 8007a32:	d9f5      	bls.n	8007a20 <memmove+0xa>
 8007a34:	1881      	adds	r1, r0, r2
 8007a36:	1ad2      	subs	r2, r2, r3
 8007a38:	42d3      	cmn	r3, r2
 8007a3a:	d100      	bne.n	8007a3e <memmove+0x28>
 8007a3c:	bd10      	pop	{r4, pc}
 8007a3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a42:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007a46:	e7f7      	b.n	8007a38 <memmove+0x22>

08007a48 <_free_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4605      	mov	r5, r0
 8007a4c:	2900      	cmp	r1, #0
 8007a4e:	d045      	beq.n	8007adc <_free_r+0x94>
 8007a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a54:	1f0c      	subs	r4, r1, #4
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	bfb8      	it	lt
 8007a5a:	18e4      	addlt	r4, r4, r3
 8007a5c:	f000 f8d2 	bl	8007c04 <__malloc_lock>
 8007a60:	4a1f      	ldr	r2, [pc, #124]	; (8007ae0 <_free_r+0x98>)
 8007a62:	6813      	ldr	r3, [r2, #0]
 8007a64:	4610      	mov	r0, r2
 8007a66:	b933      	cbnz	r3, 8007a76 <_free_r+0x2e>
 8007a68:	6063      	str	r3, [r4, #4]
 8007a6a:	6014      	str	r4, [r2, #0]
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a72:	f000 b8c8 	b.w	8007c06 <__malloc_unlock>
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	d90c      	bls.n	8007a94 <_free_r+0x4c>
 8007a7a:	6821      	ldr	r1, [r4, #0]
 8007a7c:	1862      	adds	r2, r4, r1
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	bf04      	itt	eq
 8007a82:	681a      	ldreq	r2, [r3, #0]
 8007a84:	685b      	ldreq	r3, [r3, #4]
 8007a86:	6063      	str	r3, [r4, #4]
 8007a88:	bf04      	itt	eq
 8007a8a:	1852      	addeq	r2, r2, r1
 8007a8c:	6022      	streq	r2, [r4, #0]
 8007a8e:	6004      	str	r4, [r0, #0]
 8007a90:	e7ec      	b.n	8007a6c <_free_r+0x24>
 8007a92:	4613      	mov	r3, r2
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	b10a      	cbz	r2, 8007a9c <_free_r+0x54>
 8007a98:	42a2      	cmp	r2, r4
 8007a9a:	d9fa      	bls.n	8007a92 <_free_r+0x4a>
 8007a9c:	6819      	ldr	r1, [r3, #0]
 8007a9e:	1858      	adds	r0, r3, r1
 8007aa0:	42a0      	cmp	r0, r4
 8007aa2:	d10b      	bne.n	8007abc <_free_r+0x74>
 8007aa4:	6820      	ldr	r0, [r4, #0]
 8007aa6:	4401      	add	r1, r0
 8007aa8:	1858      	adds	r0, r3, r1
 8007aaa:	4282      	cmp	r2, r0
 8007aac:	6019      	str	r1, [r3, #0]
 8007aae:	d1dd      	bne.n	8007a6c <_free_r+0x24>
 8007ab0:	6810      	ldr	r0, [r2, #0]
 8007ab2:	6852      	ldr	r2, [r2, #4]
 8007ab4:	605a      	str	r2, [r3, #4]
 8007ab6:	4401      	add	r1, r0
 8007ab8:	6019      	str	r1, [r3, #0]
 8007aba:	e7d7      	b.n	8007a6c <_free_r+0x24>
 8007abc:	d902      	bls.n	8007ac4 <_free_r+0x7c>
 8007abe:	230c      	movs	r3, #12
 8007ac0:	602b      	str	r3, [r5, #0]
 8007ac2:	e7d3      	b.n	8007a6c <_free_r+0x24>
 8007ac4:	6820      	ldr	r0, [r4, #0]
 8007ac6:	1821      	adds	r1, r4, r0
 8007ac8:	428a      	cmp	r2, r1
 8007aca:	bf04      	itt	eq
 8007acc:	6811      	ldreq	r1, [r2, #0]
 8007ace:	6852      	ldreq	r2, [r2, #4]
 8007ad0:	6062      	str	r2, [r4, #4]
 8007ad2:	bf04      	itt	eq
 8007ad4:	1809      	addeq	r1, r1, r0
 8007ad6:	6021      	streq	r1, [r4, #0]
 8007ad8:	605c      	str	r4, [r3, #4]
 8007ada:	e7c7      	b.n	8007a6c <_free_r+0x24>
 8007adc:	bd38      	pop	{r3, r4, r5, pc}
 8007ade:	bf00      	nop
 8007ae0:	200000b8 	.word	0x200000b8

08007ae4 <_malloc_r>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	1ccd      	adds	r5, r1, #3
 8007ae8:	f025 0503 	bic.w	r5, r5, #3
 8007aec:	3508      	adds	r5, #8
 8007aee:	2d0c      	cmp	r5, #12
 8007af0:	bf38      	it	cc
 8007af2:	250c      	movcc	r5, #12
 8007af4:	2d00      	cmp	r5, #0
 8007af6:	4606      	mov	r6, r0
 8007af8:	db01      	blt.n	8007afe <_malloc_r+0x1a>
 8007afa:	42a9      	cmp	r1, r5
 8007afc:	d903      	bls.n	8007b06 <_malloc_r+0x22>
 8007afe:	230c      	movs	r3, #12
 8007b00:	6033      	str	r3, [r6, #0]
 8007b02:	2000      	movs	r0, #0
 8007b04:	bd70      	pop	{r4, r5, r6, pc}
 8007b06:	f000 f87d 	bl	8007c04 <__malloc_lock>
 8007b0a:	4a21      	ldr	r2, [pc, #132]	; (8007b90 <_malloc_r+0xac>)
 8007b0c:	6814      	ldr	r4, [r2, #0]
 8007b0e:	4621      	mov	r1, r4
 8007b10:	b991      	cbnz	r1, 8007b38 <_malloc_r+0x54>
 8007b12:	4c20      	ldr	r4, [pc, #128]	; (8007b94 <_malloc_r+0xb0>)
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	b91b      	cbnz	r3, 8007b20 <_malloc_r+0x3c>
 8007b18:	4630      	mov	r0, r6
 8007b1a:	f000 f863 	bl	8007be4 <_sbrk_r>
 8007b1e:	6020      	str	r0, [r4, #0]
 8007b20:	4629      	mov	r1, r5
 8007b22:	4630      	mov	r0, r6
 8007b24:	f000 f85e 	bl	8007be4 <_sbrk_r>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d124      	bne.n	8007b76 <_malloc_r+0x92>
 8007b2c:	230c      	movs	r3, #12
 8007b2e:	6033      	str	r3, [r6, #0]
 8007b30:	4630      	mov	r0, r6
 8007b32:	f000 f868 	bl	8007c06 <__malloc_unlock>
 8007b36:	e7e4      	b.n	8007b02 <_malloc_r+0x1e>
 8007b38:	680b      	ldr	r3, [r1, #0]
 8007b3a:	1b5b      	subs	r3, r3, r5
 8007b3c:	d418      	bmi.n	8007b70 <_malloc_r+0x8c>
 8007b3e:	2b0b      	cmp	r3, #11
 8007b40:	d90f      	bls.n	8007b62 <_malloc_r+0x7e>
 8007b42:	600b      	str	r3, [r1, #0]
 8007b44:	50cd      	str	r5, [r1, r3]
 8007b46:	18cc      	adds	r4, r1, r3
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f000 f85c 	bl	8007c06 <__malloc_unlock>
 8007b4e:	f104 000b 	add.w	r0, r4, #11
 8007b52:	1d23      	adds	r3, r4, #4
 8007b54:	f020 0007 	bic.w	r0, r0, #7
 8007b58:	1ac3      	subs	r3, r0, r3
 8007b5a:	d0d3      	beq.n	8007b04 <_malloc_r+0x20>
 8007b5c:	425a      	negs	r2, r3
 8007b5e:	50e2      	str	r2, [r4, r3]
 8007b60:	e7d0      	b.n	8007b04 <_malloc_r+0x20>
 8007b62:	428c      	cmp	r4, r1
 8007b64:	684b      	ldr	r3, [r1, #4]
 8007b66:	bf16      	itet	ne
 8007b68:	6063      	strne	r3, [r4, #4]
 8007b6a:	6013      	streq	r3, [r2, #0]
 8007b6c:	460c      	movne	r4, r1
 8007b6e:	e7eb      	b.n	8007b48 <_malloc_r+0x64>
 8007b70:	460c      	mov	r4, r1
 8007b72:	6849      	ldr	r1, [r1, #4]
 8007b74:	e7cc      	b.n	8007b10 <_malloc_r+0x2c>
 8007b76:	1cc4      	adds	r4, r0, #3
 8007b78:	f024 0403 	bic.w	r4, r4, #3
 8007b7c:	42a0      	cmp	r0, r4
 8007b7e:	d005      	beq.n	8007b8c <_malloc_r+0xa8>
 8007b80:	1a21      	subs	r1, r4, r0
 8007b82:	4630      	mov	r0, r6
 8007b84:	f000 f82e 	bl	8007be4 <_sbrk_r>
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d0cf      	beq.n	8007b2c <_malloc_r+0x48>
 8007b8c:	6025      	str	r5, [r4, #0]
 8007b8e:	e7db      	b.n	8007b48 <_malloc_r+0x64>
 8007b90:	200000b8 	.word	0x200000b8
 8007b94:	200000bc 	.word	0x200000bc

08007b98 <_realloc_r>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	4607      	mov	r7, r0
 8007b9c:	4614      	mov	r4, r2
 8007b9e:	460e      	mov	r6, r1
 8007ba0:	b921      	cbnz	r1, 8007bac <_realloc_r+0x14>
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ba8:	f7ff bf9c 	b.w	8007ae4 <_malloc_r>
 8007bac:	b922      	cbnz	r2, 8007bb8 <_realloc_r+0x20>
 8007bae:	f7ff ff4b 	bl	8007a48 <_free_r>
 8007bb2:	4625      	mov	r5, r4
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bb8:	f000 f826 	bl	8007c08 <_malloc_usable_size_r>
 8007bbc:	42a0      	cmp	r0, r4
 8007bbe:	d20f      	bcs.n	8007be0 <_realloc_r+0x48>
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	f7ff ff8e 	bl	8007ae4 <_malloc_r>
 8007bc8:	4605      	mov	r5, r0
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d0f2      	beq.n	8007bb4 <_realloc_r+0x1c>
 8007bce:	4631      	mov	r1, r6
 8007bd0:	4622      	mov	r2, r4
 8007bd2:	f7ff ff15 	bl	8007a00 <memcpy>
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	4638      	mov	r0, r7
 8007bda:	f7ff ff35 	bl	8007a48 <_free_r>
 8007bde:	e7e9      	b.n	8007bb4 <_realloc_r+0x1c>
 8007be0:	4635      	mov	r5, r6
 8007be2:	e7e7      	b.n	8007bb4 <_realloc_r+0x1c>

08007be4 <_sbrk_r>:
 8007be4:	b538      	push	{r3, r4, r5, lr}
 8007be6:	4c06      	ldr	r4, [pc, #24]	; (8007c00 <_sbrk_r+0x1c>)
 8007be8:	2300      	movs	r3, #0
 8007bea:	4605      	mov	r5, r0
 8007bec:	4608      	mov	r0, r1
 8007bee:	6023      	str	r3, [r4, #0]
 8007bf0:	f7ff fb4e 	bl	8007290 <_sbrk>
 8007bf4:	1c43      	adds	r3, r0, #1
 8007bf6:	d102      	bne.n	8007bfe <_sbrk_r+0x1a>
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	b103      	cbz	r3, 8007bfe <_sbrk_r+0x1a>
 8007bfc:	602b      	str	r3, [r5, #0]
 8007bfe:	bd38      	pop	{r3, r4, r5, pc}
 8007c00:	2000079c 	.word	0x2000079c

08007c04 <__malloc_lock>:
 8007c04:	4770      	bx	lr

08007c06 <__malloc_unlock>:
 8007c06:	4770      	bx	lr

08007c08 <_malloc_usable_size_r>:
 8007c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c0c:	1f18      	subs	r0, r3, #4
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bfbc      	itt	lt
 8007c12:	580b      	ldrlt	r3, [r1, r0]
 8007c14:	18c0      	addlt	r0, r0, r3
 8007c16:	4770      	bx	lr

08007c18 <_init>:
 8007c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1a:	bf00      	nop
 8007c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c1e:	bc08      	pop	{r3}
 8007c20:	469e      	mov	lr, r3
 8007c22:	4770      	bx	lr

08007c24 <_fini>:
 8007c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c26:	bf00      	nop
 8007c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2a:	bc08      	pop	{r3}
 8007c2c:	469e      	mov	lr, r3
 8007c2e:	4770      	bx	lr
